◊namespace Azoth.Tools.Bootstrap.Compiler.Semantics.Symbols;
◊name SymbolNodeAspect;
◊using Azoth.Tools.Bootstrap.Compiler.Core.Diagnostics;
◊using Azoth.Tools.Bootstrap.Compiler.Names;
◊using Azoth.Tools.Bootstrap.Compiler.Primitives;
◊using Azoth.Tools.Bootstrap.Compiler.Symbols;
◊using Azoth.Tools.Bootstrap.Framework;

// ↓ ⟳ ↑ ⮡ ↗↖ →*← ✎

// ---------- Packages
↑ Package.PackageDeclarations: `FixedDictionary<IdentifierName, IPackageDeclarationNode>`;
↑ child PackageReference.SymbolNode: PackageSymbol;
= eager PackageReference.SymbolNode;
↑ PackageReference.PackageSymbols:`IPackageSymbols`;
= StandardPackageReference.PackageSymbols => Syntax.Package;
= IntrinsicsPackageReference.PackageSymbols => IntrinsicPackageSymbol.Instance;

// ---------- Facets
↑ PackageFacet.GlobalNamespace: NamespaceDefinition;

// ---------- Code Files
↑ CompilationUnit.ImplicitNamespace: NamespaceDefinition;

// ---------- Namespace Definitions
↑ NamespaceBlockDefinition.ContainingNamespace: NamespaceDefinition;
↑ NamespaceBlockDefinition.Definition: NamespaceDefinition;

// ---------- Function Definition
= FunctionDefinition.*.**.IsAttributeType => false;

// ---------- Type Definitions
= TypeDefinition.*.**.IsAttributeType => false;

// ---------- Attributes
= Attribute.TypeName.IsAttributeType => true;

// ---------- Parameters
↑ FieldParameter.ReferencedField: FieldDefinition?;

// ---------- Types
↑ StandardTypeName.ReferencedDeclaration: TypeDeclaration?;
= StandardTypeName.ReferencedDeclaration;
↓ StandardTypeName.IsAttributeType:`bool`;
= StandardTypeName.↑.Diagnostics;

// -------------------------------------------------------------------------------------------------
// Symbol Nodes
// -------------------------------------------------------------------------------------------------

// ---------- Parent Symbol Nodes
↓ ChildSymbol.SymbolTree(): `ISymbolTree`;
↑ ChildSymbol.Symbol: `Symbol`;
↑ ChildSymbol.Syntax: `ISyntax`? => null;

// ---------- Package Symbol Nodes
↑ PackageSymbol.Symbol: `PackageSymbol` => PackageReference.PackageSymbols.PackageSymbol;
↑ PackageSymbol.Name: `IdentifierName` => Symbol.Name;
↑ PackageSymbol.AliasOrName: `IdentifierName` => PackageReference.AliasOrName;
↑ child eager PackageSymbol.MainFacet: PackageFacetSymbol;
↑ child eager PackageSymbol.TestingFacet: PackageFacetSymbol;

// ---------- Facet Symbol Nodes
↑ PackageFacetSymbol.Symbol: `PackageSymbol` => PackageSymbol;
= PackageFacetSymbol.*.**.SymbolTree => SymbolTree;
↑ child PackageFacetSymbol.GlobalNamespace: NamespaceSymbol;
= eager PackageFacetSymbol.GlobalNamespace;

// ---------- Namespace Symbol Nodes
↑ child NamespaceSymbol.Members:NamespaceMemberSymbol*;

// ---------- Function Symbol Nodes
↑ FunctionSymbol.Name: `IdentifierName` => Symbol.Name;
= FunctionSymbol.ParameterPlainTypes => Symbol.Type.Parameters.ToPlainTypes();
= FunctionSymbol.ParameterTypes => Symbol.Type.Parameters.ToTypes();
= FunctionSymbol.ReturnPlainType => Symbol.Type.Return.PlainType;
= FunctionSymbol.ReturnType => Symbol.Type.Return.ToType();
= FunctionSymbol.PlainType => Symbol.Type.PlainType;
= FunctionSymbol.Type => Symbol.Type.ToType();

// ---------- Type Symbol Nodes
↑ child TypeSymbol.Members: {TypeMemberSymbol};

↑ BuiltInTypeSymbol.SymbolTree(): `PrimitiveSymbolTree` => Primitive.SymbolTree;
↑ BuiltInTypeSymbol.Name: `SpecialTypeName`;
= BuiltInTypeSymbol.Supertypes => Symbol.TryGetTypeConstructor()?.Supertypes ?? [];
↑ child BuiltInTypeSymbol.Members: {TypeMemberSymbol};
= BuiltInTypeSymbol.Members;
// For now, the symbol tree already includes all inherited members.
= BuiltInTypeSymbol.InclusiveMembers => Members;

= VoidTypeSymbol.Name => Symbol.Name;
= NeverTypeSymbol.Name => Symbol.Name;
= PrimitiveTypeSymbol.Name => Symbol.Name;

↑ OrdinaryTypeSymbol.Name: `StandardName` => Symbol.Name;
↑ child OrdinaryTypeSymbol.GenericParameters: GenericParameterSymbol*;
= OrdinaryTypeSymbol.Supertypes => Symbol.TryGetTypeConstructor().Supertypes;
= OrdinaryTypeSymbol.GenericParameters;
↑ child OrdinaryTypeSymbol.Members: {TypeMemberSymbol};

+ ClassSymbol.new.Validate;
↑ child ClassSymbol.Members: {ClassMemberSymbol};
// For now, the symbol tree already includes all inherited members.
= ClassSymbol.InclusiveMembers => Members;

+ StructSymbol.new.Validate;
↑ child StructSymbol.Members: {StructMemberSymbol};
// For now, the symbol tree already includes all inherited members.
= StructSymbol.InclusiveMembers => Members;

+ TraitSymbol.new.Validate;
↑ child TraitSymbol.Members: {TraitMemberSymbol};
// For now, the symbol tree already includes all inherited members.
= TraitSymbol.InclusiveMembers => Members;

// ---------- Type Declaration Parts
↑ GenericParameterSymbol.Name: `IdentifierName` => Symbol.Name;
= GenericParameterSymbol.Supertypes => Symbol.TryGetTypeConstructor()?.Supertypes ?? [];
↑ child GenericParameterSymbol.Members: {TypeMemberSymbol} => [];
= GenericParameterSymbol.InclusiveMembers => [];

// ---------- Member Symbol Nodes
↑ MethodSymbol.Name: `IdentifierName` => Symbol.Name;
= MethodSymbol.SelfParameterPlainType => Symbol.SelfParameterType.PlainType;
= MethodSymbol.SelfParameterType => Symbol.SelfParameterType.ToSelfParameterType();
= MethodSymbol.ParameterPlainTypes => Symbol.MethodGroupType.Parameters.ToPlainTypes();
= MethodSymbol.ParameterTypes => Symbol.MethodGroupType.Parameters.ToTypes();
= MethodSymbol.ReturnPlainType => Symbol.MethodGroupType.Return.PlainType;
= MethodSymbol.ReturnType => Symbol.MethodGroupType.Return.ToType();
+ StandardMethodSymbol.new.Validate;
= StandardMethodSymbol.Arity => Symbol.Arity;
= StandardMethodSymbol.MethodGroupPlainType => Symbol.MethodGroupType.PlainType;
= StandardMethodSymbol.MethodGroupType => Symbol.MethodGroupType.ToType();
+ GetterMethodSymbol.new.Validate;
+ SetterMethodSymbol.new.Validate;
↑ ConstructorSymbol.Name: `IdentifierName`? => Symbol.Name;
= ConstructorSymbol.SelfParameterPlainType => Symbol.SelfParameterType.PlainType;
= ConstructorSymbol.SelfParameterType => Symbol.SelfParameterType.ToSelfParameterType();
= ConstructorSymbol.ParameterPlainTypes => Symbol.ParameterTypes.ToPlainTypes();
= ConstructorSymbol.ParameterTypes => Symbol.ParameterTypes.ToTypes();
= ConstructorSymbol.ReturnPlainType => Symbol.ReturnType.PlainType;
= ConstructorSymbol.ReturnType => Symbol.ReturnType.ToType();
↑ InitializerSymbol.Name: `IdentifierName`? => Symbol.Name;
= InitializerSymbol.SelfParameterPlainType => Symbol.SelfParameterType.PlainType;
= InitializerSymbol.SelfParameterType => Symbol.SelfParameterType.ToSelfParameterType();
= InitializerSymbol.ParameterPlainTypes => Symbol.ParameterTypes.ToPlainTypes();
= InitializerSymbol.ParameterTypes => Symbol.ParameterTypes.ToTypes();
= InitializerSymbol.ReturnPlainType => Symbol.ReturnType.PlainType;
= InitializerSymbol.ReturnType => Symbol.ReturnType.ToType();
= FieldSymbol.IsMutableBinding => Symbol.IsMutableBinding;
↑ FieldSymbol.Name: `IdentifierName` => Symbol.Name;
= FieldSymbol.BindingType => Symbol.Type.ToType();
= AssociatedFunctionSymbol.PlainType => Symbol.Type.PlainType;
= AssociatedFunctionSymbol.Type => Symbol.Type.ToType();
= AssociatedFunctionSymbol.ParameterPlainTypes => Symbol.Type.Parameters.ToPlainTypes();
= AssociatedFunctionSymbol.ParameterTypes => Symbol.Type.Parameters.ToTypes();
= AssociatedFunctionSymbol.ReturnPlainType => Symbol.Type.Return.PlainType;
= AssociatedFunctionSymbol.ReturnType => Symbol.Type.Return.ToType();
