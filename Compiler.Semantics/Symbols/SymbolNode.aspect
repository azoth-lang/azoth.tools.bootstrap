◊namespace Azoth.Tools.Bootstrap.Compiler.Semantics.Symbols;
◊name SymbolNodeAspect;
◊using Azoth.Tools.Bootstrap.Compiler.Names;
◊using Azoth.Tools.Bootstrap.Framework;

// ↓ ↑ ⮡ ✎

// ---------- Packages
↑ Package.PackageDeclarations: `FixedDictionary<IdentifierName, IPackageDeclarationNode>`;
↑ child PackageReference.SymbolNode: PackageSymbol;
= eager PackageReference.SymbolNode;
↑ PackageReference.PackageSymbols:`IPackageSymbols`;
= StandardPackageReference.PackageSymbols => Syntax.Package;
= IntrinsicsPackageReference.PackageSymbols => IntrinsicPackageSymbol.Instance;

// ---------- Facets
↑ PackageFacet.GlobalNamespace: NamespaceDefinition;

// ---------- Code Files
= CompilationUnit.*.ContainingDeclaration;
↑ CompilationUnit.ImplicitNamespace: NamespaceDefinition;

// ---------- Namespace Definitions
↑ NamespaceBlockDefinition.ContainingNamespace: NamespaceDefinition;
↑ NamespaceBlockDefinition.Definition: NamespaceDefinition;
// = NamespaceBlockDefinition.*.**.ContainingDeclaration;

// ---------- Function Definition
= FunctionDefinition.*.**.IsAttributeType => false;

// ---------- Type Definitions
// = TypeDefinition.*.**.ContainingDeclaration;
= TypeDefinition.*.**.IsAttributeType => false;

// ---------- Attributes
= Attribute.TypeName.IsAttributeType => true;

// ---------- Parameters
↑ FieldParameter.ReferencedField: FieldDefinition?;

// ---------- Types
↑ StandardTypeName.ReferencedDeclaration: TypeDeclaration?;
= StandardTypeName.ReferencedDeclaration;
↓ StandardTypeName.IsAttributeType:`bool`;

// -------------------------------------------------------------------------------------------------
// Symbol Nodes
// -------------------------------------------------------------------------------------------------

// ---------- Parent
↑ ChildSymbol.Syntax: `ISyntax`? => null;

// ---------- Facets
= PackageFacetSymbol.*.**.SymbolTree => SymbolTree;
= eager PackageFacetSymbol.GlobalNamespace;

// ---------- Type Declarations
↓ UserTypeSymbol.SymbolTree(): `ISymbolTree`;
