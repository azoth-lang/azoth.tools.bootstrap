◊namespace Azoth.Tools.Bootstrap.Compiler.Semantics.Symbols;
◊name SymbolNodeAspect;
◊using Azoth.Tools.Bootstrap.Compiler.Core.Diagnostics;
◊using Azoth.Tools.Bootstrap.Compiler.Names;
◊using Azoth.Tools.Bootstrap.Compiler.Primitives;
◊using Azoth.Tools.Bootstrap.Compiler.Symbols;
◊using Azoth.Tools.Bootstrap.Framework;

// ↓ ⟳ ↑ ⮡ ↗↖ →*← ✎

// ---------- Packages
↑ child PackageReference.SymbolNode: PackageSymbol;
= eager PackageReference.SymbolNode;


// ---------- Function Definition
= FunctionDefinition.*.**.IsAttributeType => false;

// ---------- Type Definitions
= TypeDefinition.*.**.IsAttributeType => false;

// ---------- Attributes
= Attribute.TypeName.IsAttributeType => true;

// ---------- Types
// TODO move IsAttributeType to another aspect
↓ OrdinaryTypeName.IsAttributeType:`bool`;

// -------------------------------------------------------------------------------------------------
// Symbol Nodes
// -------------------------------------------------------------------------------------------------

// ---------- Parent Symbol Nodes
↓ ChildSymbol.SymbolTree(): `ISymbolTree`;
↑ ChildSymbol.Symbol: `Symbol`;
↑ ChildSymbol.Syntax: `ISyntax`? => null;

// ---------- Package Symbol Nodes
↑ PackageSymbol.Symbol: `PackageSymbol` => PackageReference.PackageSymbols.PackageSymbol;
↑ PackageSymbol.Name: `IdentifierName` => Symbol.Name;
↑ PackageSymbol.AliasOrName: `IdentifierName` => PackageReference.AliasOrName;
↑ child eager PackageSymbol.MainFacet: PackageFacetSymbol;
↑ child eager PackageSymbol.TestingFacet: PackageFacetSymbol;

// ---------- Facet Symbol Nodes
↑ PackageFacetSymbol.Symbol: `PackageSymbol` => PackageSymbol;
= PackageFacetSymbol.*.**.SymbolTree => SymbolTree;
↑ child PackageFacetSymbol.GlobalNamespace: NamespaceSymbol;
= eager PackageFacetSymbol.GlobalNamespace;

// ---------- Namespace Symbol Nodes
↑ child NamespaceSymbol.Members:NamespaceMemberSymbol*;

// ---------- Function Symbol Nodes
↑ FunctionSymbol.Name: `IdentifierName` => Symbol.Name;
= FunctionSymbol.ParameterPlainTypes => Symbol.Type.Parameters.ToPlainTypes();
= FunctionSymbol.ParameterTypes => Symbol.Type.Parameters;
= FunctionSymbol.ReturnPlainType => Symbol.Type.Return.PlainType;
= FunctionSymbol.ReturnType => Symbol.Type.Return;
= FunctionSymbol.PlainType => Symbol.Type.PlainType;
= FunctionSymbol.Type => Symbol.Type;

// ---------- Type Symbol Nodes
↑ TypeSymbol.Members: {TypeMemberSymbol};
↑ child NonVariableTypeSymbol.ImplicitSelf: SelfSymbol;
= NonVariableTypeSymbol.ImplicitSelf;

↑ BuiltInTypeSymbol.SymbolTree(): `PrimitiveSymbolTree` => Primitive.SymbolTree;
↑ BuiltInTypeSymbol.Name: `BuiltInTypeName` => Symbol.Name;
= BuiltInTypeSymbol.TypeConstructor => Symbol.TypeConstructor;
= BuiltInTypeSymbol.Supertypes => Symbol.TryGetTypeConstructor()?.Supertypes ?? [];
↑ child BuiltInTypeSymbol.Members: {TypeMemberSymbol};
= BuiltInTypeSymbol.Members;
// For now, the symbol tree already includes all inherited members.
= BuiltInTypeSymbol.InclusiveMembers => Members;

= VoidTypeSymbol.Name => Symbol.Name;
= VoidTypeSymbol.TypeConstructor => ITypeConstructor.Void;
= VoidTypeSymbol.Supertypes => [];
= VoidTypeSymbol.Members => [];
= VoidTypeSymbol.InclusiveMembers => Members;
= VoidTypeSymbol.InclusiveInstanceMembersNamed(OrdinaryName named) => [];
= VoidTypeSymbol.AssociatedMembersNamed(OrdinaryName named) => [];
= NeverTypeSymbol.Name => Symbol.Name;
= NeverTypeSymbol.TypeConstructor => ITypeConstructor.Never;
= NeverTypeSymbol.Supertypes => [];
= NeverTypeSymbol.Members => [];
= NeverTypeSymbol.InclusiveMembers => Members;
= NeverTypeSymbol.InclusiveInstanceMembersNamed(OrdinaryName named) => [];
= NeverTypeSymbol.AssociatedMembersNamed(OrdinaryName named) => [];


↑ OrdinaryTypeSymbol.Name: `OrdinaryName` => Symbol.Name;
↑ child OrdinaryTypeSymbol.GenericParameters: GenericParameterSymbol*;
= OrdinaryTypeSymbol.Supertypes => Symbol.TryGetTypeConstructor().Supertypes;
= OrdinaryTypeSymbol.GenericParameters;
= OrdinaryTypeSymbol.TypeConstructor => Symbol.TypeConstructor;
↑ child OrdinaryTypeSymbol.Members: {TypeMemberSymbol};

+ ClassSymbol.new.Validate;
↑ child ClassSymbol.Members: {ClassMemberSymbol};
// For now, the symbol tree already includes all inherited members.
= ClassSymbol.InclusiveMembers => Members;

+ StructSymbol.new.Validate;
↑ child StructSymbol.Members: {StructMemberSymbol};
// For now, the symbol tree already includes all inherited members.
= StructSymbol.InclusiveMembers => Members;

+ TraitSymbol.new.Validate;
↑ child TraitSymbol.Members: {TraitMemberSymbol};
// For now, the symbol tree already includes all inherited members.
= TraitSymbol.InclusiveMembers => Members;

// ---------- Type Declaration Parts
↑ GenericParameterSymbol.Name: `IdentifierName` => Symbol.Name;
= GenericParameterSymbol.Supertypes => Symbol.TryGetTypeConstructor()?.Supertypes ?? [];
↑ GenericParameterSymbol.Members: {TypeMemberSymbol} => [];
= GenericParameterSymbol.InclusiveMembers => [];
= SelfSymbol.TypeConstructor => Symbol.TypeConstructor;
↑ SelfSymbol.Members: {TypeMemberSymbol} => [];
= SelfSymbol.InclusiveMembers => [];

// ---------- Member Symbol Nodes
↑ MethodSymbol.Name: `IdentifierName` => Symbol.Name;
= MethodSymbol.SelfParameterPlainType => Symbol.SelfParameterType.PlainType;
= MethodSymbol.SelfParameterType => Symbol.SelfParameterType;
= MethodSymbol.ParameterPlainTypes => Symbol.MethodGroupType.Parameters.ToPlainTypes();
= MethodSymbol.ParameterTypes => Symbol.MethodGroupType.Parameters;
= MethodSymbol.ReturnPlainType => Symbol.MethodGroupType.Return.PlainType;
= MethodSymbol.ReturnType => Symbol.MethodGroupType.Return;
+ OrdinaryMethodSymbol.new.Validate;
= OrdinaryMethodSymbol.Arity => Symbol.Arity;
= OrdinaryMethodSymbol.MethodGroupPlainType => Symbol.MethodGroupType.PlainType;
= OrdinaryMethodSymbol.MethodGroupType => Symbol.MethodGroupType;
+ GetterMethodSymbol.new.Validate;
+ SetterMethodSymbol.new.Validate;
↑ InitializerSymbol.Name: `IdentifierName`? => Symbol.Name;
= InitializerSymbol.SelfParameterPlainType => Symbol.SelfParameterType.PlainType;
= InitializerSymbol.SelfParameterType => Symbol.SelfParameterType;
= InitializerSymbol.ParameterPlainTypes => Symbol.ParameterTypes.ToPlainTypes();
= InitializerSymbol.ParameterTypes => Symbol.ParameterTypes;
= InitializerSymbol.ReturnPlainType => Symbol.ReturnType.PlainType;
= InitializerSymbol.ReturnType => Symbol.ReturnType;
= FieldSymbol.IsMutableBinding => Symbol.IsMutableBinding;
↑ FieldSymbol.Name: `IdentifierName` => Symbol.Name;
= FieldSymbol.BindingType => Symbol.Type;
= AssociatedFunctionSymbol.PlainType => Symbol.Type.PlainType;
= AssociatedFunctionSymbol.Type => Symbol.Type;
= AssociatedFunctionSymbol.ParameterPlainTypes => Symbol.Type.Parameters.ToPlainTypes();
= AssociatedFunctionSymbol.ParameterTypes => Symbol.Type.Parameters;
= AssociatedFunctionSymbol.ReturnPlainType => Symbol.Type.Return.PlainType;
= AssociatedFunctionSymbol.ReturnType => Symbol.Type.Return;
