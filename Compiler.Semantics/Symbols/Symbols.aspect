◊namespace Azoth.Tools.Bootstrap.Compiler.Semantics.Symbols;
◊name SymbolsAspect;
◊using Azoth.Tools.Bootstrap.Compiler.Symbols;

// ↓ ⟳ ↑ ⮡ ↗↖ →*← ✎

// Type relationship needed to determine most abstract type for ContainingSymbol()
type `NamespaceSymbol` <: `Symbol`;
type `TypeSymbol` <: `Symbol`;
type `OrdinaryTypeSymbol` <: `TypeSymbol`;

// ---------- Packages
= Package.Symbol;
↑ Package.PackageSymbols: `IPackageSymbols`;

↑ PackageReference.PackageSymbols:`IPackageSymbols`;
= StandardPackageReference.PackageSymbols => Syntax.Package;
= IntrinsicsPackageReference.PackageSymbols => IntrinsicPackageSymbol.Instance;

// ---------- Code Files
↑ CompilationUnit.ContainingSymbol(): `PackageSymbol` => Package.Symbol;
= CompilationUnit.*.ContainingSymbol() => Self.ImplicitNamespaceSymbol;

// ---------- Definitions
↓ Definition.ContainingSymbol(): `Symbol`;

// ---------- Namespace Definitions
= NamespaceBlockDefinition.*.ContainingSymbol() => Self.Symbol;
↑ NamespaceBlockDefinition.Symbol: `NamespaceSymbol` => Definition.Symbol;
↓ NamespaceDefinition.ContainingSymbol(): `NamespaceSymbol`;
= NamespaceDefinition.*.ContainingSymbol() => Symbol;
= NamespaceDefinition.Symbol;

// ---------- Function Definition
↓ FunctionDefinition.ContainingSymbol(): `NamespaceSymbol`;
= FunctionDefinition.Symbol;

// ---------- Type Definitions
= TypeDefinition.*.ContainingSymbol() => Symbol;
= TypeDefinition.Symbol;

// ---------- Type Definition Parts
↓ ImplicitSelfDefinition.ContainingSymbol(): `TypeSymbol`;
= ImplicitSelfDefinition.Symbol;

// ---------- Type Member Definitions
↓ AlwaysTypeMemberDefinition.ContainingSymbol(): `OrdinaryTypeSymbol`;

// ---------- Type Definition Parts
↓ GenericParameter.ContainingSymbol(): `OrdinaryTypeSymbol`;
= GenericParameter.Symbol;

// ---------- Member Definitions
= MethodDefinition.Symbol;
= DefaultInitializerDefinition.Symbol;
= OrdinaryInitializerDefinition.Symbol;
= FieldDefinition.Symbol;
= AssociatedFunctionDefinition.Symbol;
= AssociatedTypeDefinition.Symbol;

// ---------- Attributes
// TODO do not use referenced symbols
↑ Attribute.ReferencedSymbol: `InvocableSymbol`?;
