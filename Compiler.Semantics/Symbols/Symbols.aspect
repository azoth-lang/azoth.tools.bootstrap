◊namespace Azoth.Tools.Bootstrap.Compiler.Semantics.Symbols;
◊name SymbolsAspect;
◊using Azoth.Tools.Bootstrap.Compiler.Symbols;

// ↓ ⟳ ↑ ⮡ ↗↖ →*← ✎

// ---------- Packages
= Package.Symbol;
↑ Package.PackageSymbols: `IPackageSymbols`;

↑ PackageReference.PackageSymbols:`IPackageSymbols`;
= StandardPackageReference.PackageSymbols => Syntax.Package;
= IntrinsicsPackageReference.PackageSymbols => IntrinsicPackageSymbol.Instance;

// ---------- Code Files
↑ CompilationUnit.ContainingSymbol: `PackageSymbol` => ContainingDeclaration.PackageSymbol;

// ---------- Definitions
↑ Definition.ContainingSymbol: `Symbol`? => ContainingDeclaration.Symbol;

// ---------- Namespace Definitions
↑ NamespaceBlockDefinition.ContainingSymbol: `NamespaceSymbol` => ContainingDeclaration.Symbol;
↑ NamespaceBlockDefinition.Symbol: `NamespaceSymbol` => Definition.Symbol;
= NamespaceDefinition.Symbol;

// ---------- Function Definition
↑ FunctionDefinition.ContainingSymbol: `NamespaceSymbol` => ContainingDeclaration.Symbol;
= FunctionDefinition.Symbol;

// ---------- Type Definitions
↑ TypeDefinition.ContainingSymbol: `Symbol` => ContainingDeclaration.Symbol!; // Never null because not a function/method
= TypeDefinition.Symbol;

// ---------- Type Definition Parts
↑ ImplicitSelfDefinition.ContainingSymbol: `TypeSymbol` => ContainingDeclaration.Symbol!; // Never null because not a function/method
= ImplicitSelfDefinition.Symbol;

// ---------- Type Member Definitions
↑ AlwaysTypeMemberDefinition.ContainingSymbol: `OrdinaryTypeSymbol` => ContainingDeclaration.Symbol;

// ---------- Type Definition Parts
↑ GenericParameter.ContainingSymbol: `OrdinaryTypeSymbol` => ContainingDeclaration.Symbol;
= GenericParameter.Symbol;
↑ SelfSymbol.ContainingSymbol: `TypeSymbol` => ContainingDeclaration.Symbol;

// ---------- Member Definitions
= MethodDefinition.Symbol;
= DefaultInitializerDefinition.Symbol;
= OrdinaryInitializerDefinition.Symbol;
= FieldDefinition.Symbol;
= AssociatedFunctionDefinition.Symbol;
= AssociatedTypeDefinition.Symbol;

// ---------- Attributes
↑ Attribute.ReferencedSymbol: `InvocableSymbol`?;
