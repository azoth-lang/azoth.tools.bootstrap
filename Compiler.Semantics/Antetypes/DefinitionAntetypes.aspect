◊namespace Azoth.Tools.Bootstrap.Compiler.Semantics.Antetypes;
◊name DefinitionAntetypesAspect;
◊using Azoth.Tools.Bootstrap.Compiler.Types.Constructors;
◊using Azoth.Tools.Bootstrap.Compiler.Types.Plain;

// ↓ ⟳ ↑ ⮡ ↗↖ →*← ✎

// ---------- Function Definition
// TODO it would be good to refactor to not depend on Type
= FunctionDefinition.Body.ExpectedAntetype => Type.Return.ToAntetype().ToNonLiteralType();

// ---------- Type Definitions
↑ TypeDefinition.DeclaredAntetype:`OrdinaryTypeConstructor`;
= TypeDefinition.DeclaredAntetype;
↑ TypeDefinition.SelfPlainType: `SelfPlainType`;
= TypeDefinition.SelfPlainType;

// ---------- Member Definitions
// TODO it would be good to refactor to not depend on Type
= MethodDefinition.Body.ExpectedAntetype
    => Self.ReturnType.ToAntetype();
= FieldDefinition.BindingAntetype;
// TODO it would be good to refactor to not depend on Type
= AssociatedFunctionDefinition.Body.ExpectedAntetype
    => Type.Return.ToAntetype().ToNonLiteralType();
