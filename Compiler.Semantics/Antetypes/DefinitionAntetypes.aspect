◊namespace Azoth.Tools.Bootstrap.Compiler.Semantics.Antetypes;
◊name DefinitionAntetypesAspect;
◊using Azoth.Tools.Bootstrap.Compiler.Antetypes;

// ↓ ⟳ ↑ ⮡ ↗↖ →*← ✎

// ---------- Function Definition
// TODO it would be good to refactor to not depend on Type
= FunctionDefinition.Body.ExpectedAntetype => Type.Return.ToAntetype().ToNonConstValueType();

// ---------- Member Definitions
= StandardMethodDefinition.Body.ExpectedAntetype
    => Self.MethodGroupType.Return.ToAntetype().ToNonConstValueType();
= FieldDefinition.BindingAntetype;
// TODO it would be good to refactor to not depend on Type
= AssociatedFunctionDefinition.Body.ExpectedAntetype
    => Type.Return.ToAntetype().ToNonConstValueType();
