◊namespace Azoth.Tools.Bootstrap.Compiler.Semantics.Antetypes;
◊name OverloadResolutionAspect;
◊using Azoth.Tools.Bootstrap.Compiler.Antetypes;
◊using Azoth.Tools.Bootstrap.Compiler.Core.Diagnostics;
◊using Azoth.Tools.Bootstrap.Framework;

// ↓ ⟳ ↑ ⮡ ↗↖ →*← ✎

// ---------- Expressions
↑ NewObjectExpression.CompatibleConstructors: {ConstructorDeclaration};
↑ NewObjectExpression.ReferencedConstructor: ConstructorDeclaration?;
= NewObjectExpression.↑.Diagnostics;

// ---------- Invocation Expressions
= UnknownInvocationExpression.Expression.ExpectedAntetype;
✎ UnknownInvocationExpression FunctionNameExpression;
✎ UnknownInvocationExpression MethodNameExpression;
✎ UnknownInvocationExpression TypeNameExpression;
✎ UnknownInvocationExpression InitializerGroupNameExpression;
✎ UnknownInvocationExpression FunctionReferenceExpression;
= UnknownInvocationExpression.↑.Diagnostics;

= MethodInvocationExpression.↑.Diagnostics;

↑ InitializerInvocationExpression.CompatibleDeclarations: {InitializerDeclaration};
↑ InitializerInvocationExpression.ReferencedDeclaration: InitializerDeclaration?;

// ---------- Name Expressions
↑ FunctionGroupName.CallCandidates: {`CallCandidate<IFunctionInvocableDeclarationNode>`};
↑ FunctionGroupName.CompatibleCallCandidates: {`CallCandidate<IFunctionInvocableDeclarationNode>`};
↑ FunctionGroupName.SelectedCallCandidate: `CallCandidate<IFunctionInvocableDeclarationNode>`?;
↑ FunctionGroupName.ReferencedDeclaration: FunctionInvocableDeclaration?;
= FunctionGroupName.↑.Diagnostics;
= FunctionName.↑.Diagnostics;
↑ MethodGroupName.CompatibleDeclarations: {StandardMethodDeclaration};
↑ MethodGroupName.ReferencedDeclaration: StandardMethodDeclaration?;
= MethodGroupName.↑.Diagnostics;
