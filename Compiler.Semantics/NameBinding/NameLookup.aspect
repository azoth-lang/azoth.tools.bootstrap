◊namespace Azoth.Tools.Bootstrap.Compiler.Semantics.NameBinding;
◊name NameLookupAspect;
◊using Azoth.Tools.Bootstrap.Compiler.Names;
◊using Azoth.Tools.Bootstrap.Framework;

// ↓ ↑ ⮡

// ---------- Namespace Declarations
↑ NamespaceDeclaration.MembersByName: `FixedDictionary<StandardName, IFixedSet<INamespaceMemberDeclarationNode>>`;
= NamespaceDeclaration.MembersByName;
↑ NamespaceDeclaration.NestedMembersByName: `FixedDictionary<StandardName, IFixedSet<INamespaceMemberDeclarationNode>>`;
= NamespaceDeclaration.NestedMembersByName;
+ NamespaceDeclaration.MembersNamed(StandardName named): `IEnumerable<INamespaceMemberDeclarationNode>`
    => MembersByName.GetValueOrDefault(named) ?? [];
+ NamespaceDeclaration.NestedMembersNamed(StandardName named): `IEnumerable<INamespaceMemberDeclarationNode>`
    => NestedMembersByName.GetValueOrDefault(named) ?? [];

// ---------- Type Declarations
↑ PrimitiveTypeDeclaration.InclusiveInstanceMembersByName: `FixedDictionary<StandardName, IFixedSet<IInstanceMemberDeclarationNode>>`;
= PrimitiveTypeDeclaration.InclusiveInstanceMembersByName;
↑ PrimitiveTypeDeclaration.AssociatedMembersByName: `FixedDictionary<StandardName, IFixedSet<IAssociatedMemberDeclarationNode>>`;
= PrimitiveTypeDeclaration.AssociatedMembersByName;
↑ UserTypeDeclaration.InclusiveInstanceMembersByName: `FixedDictionary<StandardName, IFixedSet<IInstanceMemberDeclarationNode>>`;
= UserTypeDeclaration.InclusiveInstanceMembersByName;
↑ UserTypeDeclaration.AssociatedMembersByName: `FixedDictionary<StandardName, IFixedSet<IAssociatedMemberDeclarationNode>>`;
= UserTypeDeclaration.AssociatedMembersByName;

/// <summary>
/// All members of the type with the given name along with inherited members with the given name
/// if they are not hidden by a member in the type itself.
/// </summary>
// + TypeDeclaration.InclusiveInstanceMembersNamed(StandardName named): `IEnumerable<IInstanceMemberDeclarationNode>`;
// + TypeDeclaration.AssociatedMembersNamed(StandardName named) `IEnumerable<IAssociatedMemberDeclarationNode>`;
