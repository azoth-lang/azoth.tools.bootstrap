◊namespace Azoth.Tools.Bootstrap.Compiler.Semantics.NameBinding;
◊name NameLookupAspect;
◊using Azoth.Tools.Bootstrap.Compiler.Names;
◊using Azoth.Tools.Bootstrap.Framework;

// ↓ ⟳ ↑ ⮡ ↗↖ →*← ✎

// ---------- Declarations
+ NamespaceOrTypeDeclaration.TypeMembersNamed(OrdinaryName name): IEnumerable<TypeDeclaration>;

// ---------- Namespace Declarations
↑ NamespaceDeclaration.MembersByName: `FixedDictionary<OrdinaryName, IFixedSet<INamespaceMemberDeclarationNode>>`;
= NamespaceDeclaration.MembersByName;
↑ NamespaceDeclaration.NestedMembersByName: `FixedDictionary<OrdinaryName, IFixedSet<INamespaceMemberDeclarationNode>>`;
= NamespaceDeclaration.NestedMembersByName;
+ NamespaceDeclaration.MembersNamed(OrdinaryName name): `IEnumerable<INamespaceMemberDeclarationNode>`
    => MembersByName.GetValueOrDefault(name) ?? [];
+ NamespaceDeclaration.NestedMembersNamed(OrdinaryName name): `IEnumerable<INamespaceMemberDeclarationNode>`
    => NestedMembersByName.GetValueOrDefault(name) ?? [];
= NamespaceDeclaration.TypeMembersNamed(OrdinaryName name)
    => MembersNamed(name).OfType<ITypeDeclarationNode>();

// ---------- Type Declarations
/// <summary>
/// All members of the type with the given name along with inherited members with the given name
/// if they are not hidden by a member in the type itself.
/// </summary>
+ TypeDeclaration.InclusiveInstanceMembersNamed(OrdinaryName name): IEnumerable<InstanceMemberDeclaration>;
+ TypeDeclaration.AssociatedMembersNamed(OrdinaryName name): IEnumerable<AssociatedMemberDeclaration>;
= TypeDeclaration.TypeMembersNamed(OrdinaryName name)
    => AssociatedMembersNamed(name).OfType<ITypeDeclarationNode>();
↑ BuiltInTypeDeclaration.InclusiveInstanceMembersByName: `FixedDictionary<OrdinaryName, IFixedSet<IInstanceMemberDeclarationNode>>`;
= BuiltInTypeDeclaration.InclusiveInstanceMembersByName;
↑ BuiltInTypeDeclaration.AssociatedMembersByName: `FixedDictionary<OrdinaryName, IFixedSet<IAssociatedMemberDeclarationNode>>`;
= BuiltInTypeDeclaration.AssociatedMembersByName;
= BuiltInTypeDeclaration.InclusiveInstanceMembersNamed(OrdinaryName name)
    => InclusiveInstanceMembersByName.GetValueOrDefault(name) ?? [];
= BuiltInTypeDeclaration.AssociatedMembersNamed(OrdinaryName name)
    => AssociatedMembersByName.GetValueOrDefault(name) ?? [];
↑ OrdinaryTypeDeclaration.InclusiveInstanceMembersByName: `FixedDictionary<OrdinaryName, IFixedSet<IInstanceMemberDeclarationNode>>`;
= OrdinaryTypeDeclaration.InclusiveInstanceMembersByName;
↑ OrdinaryTypeDeclaration.AssociatedMembersByName: `FixedDictionary<OrdinaryName, IFixedSet<IAssociatedMemberDeclarationNode>>`;
= OrdinaryTypeDeclaration.AssociatedMembersByName;
= OrdinaryTypeDeclaration.InclusiveInstanceMembersNamed(OrdinaryName name)
    => InclusiveInstanceMembersByName.GetValueOrDefault(name) ?? [];
= OrdinaryTypeDeclaration.AssociatedMembersNamed(OrdinaryName name)
    => AssociatedMembersByName.GetValueOrDefault(name) ?? [];

// ---------- Type Declaration Parts
// TODO should look up members based on generic constraints
= GenericParameterDeclaration.InclusiveInstanceMembersNamed(OrdinaryName name) => [];
// TODO should look up members based on generic constraints
= GenericParameterDeclaration.AssociatedMembersNamed(OrdinaryName name) => [];
= ImplicitSelfDeclaration.InclusiveInstanceMembersNamed(OrdinaryName name)
    => ContainingDeclaration.InclusiveInstanceMembersNamed(name);
= ImplicitSelfDeclaration.AssociatedMembersNamed(OrdinaryName name)
    => ContainingDeclaration.AssociatedMembersNamed(name);

// ---------- Member Declarations
// TODO should look up members based on constraints
= AssociatedTypeDeclaration.InclusiveInstanceMembersNamed(OrdinaryName name) => [];
// TODO should look up members based on constraints
= AssociatedTypeDeclaration.AssociatedMembersNamed(OrdinaryName name) => [];
