◊namespace Azoth.Tools.Bootstrap.Compiler.Semantics.NameBinding;
◊name NameLookupAspect;
◊using Azoth.Tools.Bootstrap.Compiler.Names;
◊using Azoth.Tools.Bootstrap.Framework;

// ↓ ⟳ ↑ ⮡ ↗↖ →*← ✎

// ---------- Namespace Declarations
↑ NamespaceDeclaration.MembersByName: `FixedDictionary<OrdinaryName, IFixedSet<INamespaceMemberDeclarationNode>>`;
= NamespaceDeclaration.MembersByName;
↑ NamespaceDeclaration.NestedMembersByName: `FixedDictionary<OrdinaryName, IFixedSet<INamespaceMemberDeclarationNode>>`;
= NamespaceDeclaration.NestedMembersByName;
+ NamespaceDeclaration.MembersNamed(OrdinaryName named): `IEnumerable<INamespaceMemberDeclarationNode>`
    => MembersByName.GetValueOrDefault(named) ?? [];
+ NamespaceDeclaration.NestedMembersNamed(OrdinaryName named): `IEnumerable<INamespaceMemberDeclarationNode>`
    => NestedMembersByName.GetValueOrDefault(named) ?? [];

// ---------- Type Declarations
/// <summary>
/// All members of the type with the given name along with inherited members with the given name
/// if they are not hidden by a member in the type itself.
/// </summary>
+ TypeDeclaration.InclusiveInstanceMembersNamed(OrdinaryName named): `IEnumerable<IInstanceMemberDeclarationNode>`;
+ TypeDeclaration.AssociatedMembersNamed(OrdinaryName named): `IEnumerable<IAssociatedMemberDeclarationNode>`;
↑ BuiltInTypeDeclaration.InclusiveInstanceMembersByName: `FixedDictionary<OrdinaryName, IFixedSet<IInstanceMemberDeclarationNode>>`;
= BuiltInTypeDeclaration.InclusiveInstanceMembersByName;
↑ BuiltInTypeDeclaration.AssociatedMembersByName: `FixedDictionary<OrdinaryName, IFixedSet<IAssociatedMemberDeclarationNode>>`;
= BuiltInTypeDeclaration.AssociatedMembersByName;
= BuiltInTypeDeclaration.InclusiveInstanceMembersNamed(OrdinaryName named)
    => InclusiveInstanceMembersByName.GetValueOrDefault(named) ?? [];
= BuiltInTypeDeclaration.AssociatedMembersNamed(OrdinaryName named)
    => AssociatedMembersByName.GetValueOrDefault(named) ?? [];
↑ UserTypeDeclaration.InclusiveInstanceMembersByName: `FixedDictionary<OrdinaryName, IFixedSet<IInstanceMemberDeclarationNode>>`;
= UserTypeDeclaration.InclusiveInstanceMembersByName;
↑ UserTypeDeclaration.AssociatedMembersByName: `FixedDictionary<OrdinaryName, IFixedSet<IAssociatedMemberDeclarationNode>>`;
= UserTypeDeclaration.AssociatedMembersByName;
= UserTypeDeclaration.InclusiveInstanceMembersNamed(OrdinaryName named)
    => InclusiveInstanceMembersByName.GetValueOrDefault(named) ?? [];
= UserTypeDeclaration.AssociatedMembersNamed(OrdinaryName named)
    => AssociatedMembersByName.GetValueOrDefault(named) ?? [];

// ---------- Type Declaration Parts
// TODO should look up members based on generic constraints
= GenericParameterDeclaration.InclusiveInstanceMembersNamed(OrdinaryName named) => [];
// TODO should look up members based on generic constraints
= GenericParameterDeclaration.AssociatedMembersNamed(OrdinaryName named) => [];
