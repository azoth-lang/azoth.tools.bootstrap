◊namespace Azoth.Tools.Bootstrap.Compiler.Semantics.Types;
◊name ValueIdsAspect;
◊using Azoth.Tools.Bootstrap.Compiler.Semantics.Types.Flow;

// ↓ ↑ ⮡

// Type Declarations
struct `ValueId`;

// ---------- Special Parts
↑ ElseClause.ValueId: `ValueId`;

// ---------- Bindings
↑ Binding.BindingValueId: `ValueId`;

// ---------- Definitions
↑ InvocableDefinition.ValueIdScope: `ValueIdScope`;
= InvocableDefinition.ValueIdScope;
↑ ExecutableDefinition.ValueIdScope: `ValueIdScope`;

// ---------- Parameters
⮡ Parameter.PreviousValueId(): `IPreviousValueId`;
↑ Parameter.BindingValueId: `ValueId`;
= Parameter.BindingValueId;

// ---------- Statements
⮡ Statement.PreviousValueId(): `IPreviousValueId`;
↑ Statement.ResultValueId: `ValueId`?;
= ResultStatement.ResultValueId => ValueId;
= ResultStatement.ValueId => Expression?.ValueId ?? default;
= VariableDeclarationStatement.ResultValueId => null;
= ExpressionStatement.ResultValueId => null;

// ---------- Patterns
⮡ Pattern.PreviousValueId(): `IPreviousValueId`;
↓ Pattern.MatchReferentValueId: `ValueId`?;

// ---------- Expressions
⮡ AmbiguousExpression.PreviousValueId(): `IPreviousValueId`;
↑ AmbiguousExpression.ValueId: `ValueId`;
= AmbiguousExpression.ValueId;
