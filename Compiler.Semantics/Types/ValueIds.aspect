◊namespace Azoth.Tools.Bootstrap.Compiler.Semantics.Types;
◊name ValueIdsAspect;
◊using Azoth.Tools.Bootstrap.Compiler.Semantics.Types.Flow;
◊using Azoth.Tools.Bootstrap.Compiler.Types.Flow;

// ↓ ⟳ ↑ ⮡ ↗↖ →*← ✎

// Type Declarations
struct `ValueId`;

// Necessary for "stable" because otherwise new ValueIds will be generated repeatedly beneath rewrites
↓ stable *.ValueIdScope <: `ValueIdScope`;

// ---------- Special Parts
↑ ElseClause.ValueId: `ValueId`;

// ---------- Bindings
↑ Binding.BindingValueId: `ValueId`;

// ---------- Definitions
↑ eager ExecutableDefinition.ValueIdScope: `ValueIdScope`;
= ExecutableDefinition.ValueIdScope;
= ExecutableDefinition.*.**.ValueIdScope => ValueIdScope;

// ---------- Parameters
// TODO inheriting this doesn't need to cause cycle with rewritten parent
↓ computed Parameter.ValueIdScope: `ValueIdScope`;
↑ Parameter.BindingValueId: `ValueId`;
= Parameter.BindingValueId;

// ---------- Statements
↑ Statement.ResultValueId: `ValueId`?;
= ResultStatement.ResultValueId => ValueId;
= ResultStatement.ValueId => Expression?.ValueId ?? default;
// TODO inheriting this doesn't need to cause cycle with rewritten parent
↓ computed VariableDeclarationStatement.ValueIdScope: `ValueIdScope`;
= VariableDeclarationStatement.ResultValueId => null;
= ExpressionStatement.ResultValueId => null;

// ---------- Patterns
↓ Pattern.MatchReferentValueId: `ValueId`?;
// TODO inheriting this doesn't need to cause cycle with rewritten parent
↓ computed BindingPattern.ValueIdScope: `ValueIdScope`;

// ---------- Expressions
// TODO inheriting this doesn't need to cause cycle with rewritten parent
↓ computed AmbiguousExpression.ValueIdScope: `ValueIdScope`;
↑ AmbiguousExpression.ValueId: `ValueId`;
= AmbiguousExpression.ValueId;

// ---------- Operator Expressions
= PatternMatchExpression.Pattern.**.MatchReferentValueId => Referent?.ValueId;
