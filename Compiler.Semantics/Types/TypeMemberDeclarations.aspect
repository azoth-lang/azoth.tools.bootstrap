◊namespace Azoth.Tools.Bootstrap.Compiler.Semantics.Types;
◊name TypeMemberDeclarationsAspect;
◊using Azoth.Tools.Bootstrap.Compiler.Core.Diagnostics;
◊using Azoth.Tools.Bootstrap.Compiler.Types.Decorated;
◊using Azoth.Tools.Bootstrap.Compiler.Types.Flow;
◊using AzothType = Azoth.Tools.Bootstrap.Compiler.Types.Decorated.Type;

// ↓ ⟳ ↑ ⮡ ↗↖ →*← ✎

// ---------- Definitions
↑ InvocableDefinition.FlowStateBefore(): `IFlowState`;
= InvocableDefinition.FlowStateBefore();
= ConcreteFunctionInvocableDefinition.Type;

// ---------- Member Definitions
= MethodDefinition.SelfParameterType => SelfParameter.ParameterType;
= MethodDefinition.SelfParameter.**.FlowStateBefore() => Self.FlowStateBefore();
= MethodDefinition.Parameters[0].**.FlowStateBefore()
    => SelfParameter.FlowStateAfter;
= MethodDefinition.Parameters[index].**.FlowStateBefore()
    => Parameters[index - 1].FlowStateAfter;
= MethodDefinition.Body.**.FlowStateBefore()
    => Parameters.LastOrDefault()?.FlowStateAfter ?? SelfParameter.FlowStateAfter;
= MethodDefinition.Body.**.ExpectedReturnType => Self.ReturnType;
= MethodDefinition.Body.ExpectedType => Self.ReturnType;
= MethodDefinition.ReturnType => Return?.NamedType ?? AzothType.Void;
= MethodDefinition.↑.Diagnostics;

// TODO this shouldn't use Symbol
= AbstractMethodDefinition.MethodGroupType => Symbol?.MethodGroupType ?? IMaybeFunctionType.Unknown;

// TODO this shouldn't use Symbol
= OrdinaryMethodDefinition.MethodGroupType => Symbol?.MethodGroupType ?? IMaybeFunctionType.Unknown;

// TODO this shouldn't use Symbol
= ConstructorDefinition.ReturnType => Symbol?.ReturnType ?? IMaybeType.Unknown;
= DefaultConstructorDefinition.SelfParameterType => Symbol!.SelfParameterType;
= OrdinaryConstructorDefinition.SelfParameterType => SelfParameter.ParameterType;
= OrdinaryConstructorDefinition.SelfParameter.**.FlowStateBefore() => Self.FlowStateBefore();
= OrdinaryConstructorDefinition.Parameters[0].**.FlowStateBefore()
    => SelfParameter.FlowStateAfter;
= OrdinaryConstructorDefinition.Parameters[index].**.FlowStateBefore()
    => Parameters[index - 1].FlowStateAfter;
= OrdinaryConstructorDefinition.Body.**.FlowStateBefore()
    => Parameters.LastOrDefault()?.FlowStateAfter ?? SelfParameter.FlowStateAfter;
= OrdinaryConstructorDefinition.Body.**.ExpectedReturnType => AzothType.Void;

// TODO this shouldn't use Symbol
= InitializerDefinition.ReturnType => Symbol?.ReturnType ?? IMaybeType.Unknown;
= DefaultInitializerDefinition.SelfParameterType => Symbol!.SelfParameterType;
= OrdinaryInitializerDefinition.SelfParameterType => SelfParameter.ParameterType;
= OrdinaryInitializerDefinition.SelfParameter.**.FlowStateBefore() => Self.FlowStateBefore();
= OrdinaryInitializerDefinition.Parameters[0].**.FlowStateBefore()
    => SelfParameter.FlowStateAfter;
= OrdinaryInitializerDefinition.Parameters[index].**.FlowStateBefore()
    => Parameters[index - 1].FlowStateAfter;
= OrdinaryInitializerDefinition.Body.**.FlowStateBefore()
    => Parameters.LastOrDefault()?.FlowStateAfter ?? SelfParameter.FlowStateAfter;
= OrdinaryInitializerDefinition.Body.**.ExpectedReturnType => AzothType.Void;

= FieldDefinition.↑.Diagnostics;
// Null is the signal that this is a field initializer and not a method body
= FieldDefinition.Initializer.**.ExpectedReturnType => null;

= AssociatedFunctionDefinition.Parameters[0].**.FlowStateBefore()
    => Self.FlowStateBefore();
= AssociatedFunctionDefinition.Parameters[index].**.FlowStateBefore()
    => Parameters[index - 1].FlowStateAfter;
= AssociatedFunctionDefinition.Body.**.FlowStateBefore()
    => Parameters.LastOrDefault()?.FlowStateAfter ?? Self.FlowStateBefore();
= AssociatedFunctionDefinition.Body.ExpectedType => Self.ReturnType;
= AssociatedFunctionDefinition.Body.**.ExpectedReturnType => Self.ReturnType;
