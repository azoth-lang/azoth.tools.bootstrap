◊namespace Azoth.Tools.Bootstrap.Compiler.Semantics.Types;
◊name DefinitionTypesAspect;
◊using Azoth.Tools.Bootstrap.Compiler.Types.Constructors;
◊using Azoth.Tools.Bootstrap.Compiler.Types.Decorated;
◊using Azoth.Tools.Bootstrap.Framework;
◊using AzothType = Azoth.Tools.Bootstrap.Compiler.Types.Decorated.Type;

// ↓ ⟳ ↑ ⮡ ↗↖ →*← ✎

// ---------- Special Parts
⟳ ElseClause.FlowStateAfter: `IFlowState` initial => IFlowState.Empty;
↑ BlockOrResult.Type: `IMaybeType`;

// ---------- Definitions
= InvocableDefinition.ParameterTypes;
= FunctionInvocableDefinition.ReturnType
    => Return?.NamedType ?? AzothType.Void;

// ---------- Function Definition
= FunctionDefinition.Parameters[0].**.FlowStateBefore()
    => Self.FlowStateBefore();
= FunctionDefinition.Parameters[index].**.FlowStateBefore()
    => Parameters[index - 1].FlowStateAfter;
= FunctionDefinition.Body.**.FlowStateBefore()
    => Parameters.LastOrDefault()?.FlowStateAfter ?? Self.FlowStateBefore();
= FunctionDefinition.Body.ExpectedType => Self.ReturnType;
= FunctionDefinition.Body.**.ExpectedReturnType => Self.ReturnType;

// ---------- Type Definitions
= TypeDefinition.*.**.ContainingTypeConstructor;
= TypeDefinition.*.**.ContainingSelfTypeConstructor;

// ---------- Type Definition Parts
↓ GenericParameter.ContainingTypeConstructor: `OrdinaryTypeConstructor`;

// ---------- Member Definitions
↓ MethodDefinition.ContainingTypeConstructor: `OrdinaryTypeConstructor`;

// ---------- Parameters
↓ SelfParameter.ContainingTypeConstructor: `OrdinaryTypeConstructor`;
↓ SelfParameter.ContainingSelfTypeConstructor: `SelfTypeConstructor`;

// ---------- Function Parts
⟳ Body.FlowStateAfter: `IFlowState` initial => IFlowState.Empty;
// TODO it would be better to have a way to specify that this inherits and not emit any code
= BlockBody.Statements[0].**.FlowStateBefore()
    => base.Inherited_FlowStateBefore(child, descendant, ctx);
= BlockBody.Statements[index].**.FlowStateBefore() => Statements[index - 1].FlowStateAfter;
↑ BlockBody.FlowStateAfter: `IFlowState` => throw new NotImplementedException();
↑ ExpressionBody.FlowStateAfter: `IFlowState` => throw new NotImplementedException();
