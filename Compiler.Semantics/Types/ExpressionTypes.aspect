◊namespace Azoth.Tools.Bootstrap.Compiler.Semantics.Types;
◊name ExpressionTypesAspect;
◊using Azoth.Tools.Bootstrap.Compiler.Core.Diagnostics;
◊using Azoth.Tools.Bootstrap.Compiler.Types.Decorated;
◊using Azoth.Tools.Bootstrap.Compiler.Types.Flow;
◊using AzothType = Azoth.Tools.Bootstrap.Compiler.Types.Decorated.Type;

// ↓ ⟳ ↑ ⮡ ↗↖ →*← ✎

// ---------- Function Parts
↓ ExpressionBody.ExpectedType: `IMaybeType`?;
= ExpressionBody.ResultStatement.ExpectedType => ExpectedType;
// It is really the expression inside the result statement that this should apply to, but the
// ResultStatement will forward it to the expression.
= ExpressionBody.ResultStatement.ImplicitRecoveryAllowed() => true;
// It is really the expression inside the result statement that this should apply to, but the
// ResultStatement will forward it to the expression.
= ExpressionBody.ResultStatement.ShouldPrepareToReturn() => true;

// ---------- Parameters
↓ Parameter.FlowStateBefore(): `IFlowState`;
⟳ Parameter.FlowStateAfter: `IFlowState` initial => IFlowState.Empty;
= SelfParameter.FlowStateAfter;
↑ FieldParameter.FlowStateAfter: `IFlowState` => FlowStateBefore();

// ---------- Statements
↑ Statement.ResultType: `IMaybeType`? => null;
⟳ Statement.FlowStateAfter: `IFlowState` initial => IFlowState.Empty;
// Forward ImplicitRecoveryAllowed() to the expression
↓ ResultStatement.ImplicitRecoveryAllowed(): `bool`;
= ResultStatement.Expression.ImplicitRecoveryAllowed() => ImplicitRecoveryAllowed();
// Forward ShouldPrepareToReturn() to the expression
↓ ResultStatement.ShouldPrepareToReturn(): `bool`;
= ResultStatement.Expression.ShouldPrepareToReturn() => ShouldPrepareToReturn();
↓ ResultStatement.ExpectedType: `IMaybeType`?;
= ResultStatement.Expression.ExpectedType => ExpectedType;
= ResultStatement.Type;
= ResultStatement.ResultType => Type;
↑ ResultStatement.FlowStateAfter: `IFlowState`
    => Expression?.FlowStateAfter ?? IFlowState.Empty;
↓ VariableDeclarationStatement.FlowStateBefore(): `IFlowState`;
// The expected type for the initializer is the binding type since it needs to have any
// Capability declared on the variable applied.
= VariableDeclarationStatement.Initializer.ExpectedType => BindingType;
= VariableDeclarationStatement.Initializer.ImplicitRecoveryAllowed() => true;
= VariableDeclarationStatement.Initializer.ShouldPrepareToReturn() => false;
= ExpressionStatement.Expression.ExpectedType => null;
= ExpressionStatement.Expression.ImplicitRecoveryAllowed() => false;
= ExpressionStatement.Expression.ShouldPrepareToReturn() => false;

// ---------- Patterns
⟳ Pattern.FlowStateAfter: `IFlowState` initial => IFlowState.Empty;
↑ BindingContextPattern.FlowStateAfter: `IFlowState` => Pattern.FlowStateAfter;
↓ BindingPattern.FlowStateBefore(): `IFlowState`;
↑ OptionalPattern.FlowStateAfter: `IFlowState` => Pattern.FlowStateAfter;

// ---------- Expressions
// By default, implicit recovery is not allowed. Avoiding broadcast ensures that this never requires
// traversing multiple layers up the tree (except for ResultStatement)
= AmbiguousExpression.*.ImplicitRecoveryAllowed() => false;
// By default, don't need to prepare to return. Avoiding broadcast ensures that this never requires
// traversing multiple layers up the tree (except for ResultStatement and recovery expressions)
= AmbiguousExpression.*.ShouldPrepareToReturn() => false;
// TODO remove once all nodes properly provide the expected type
= AmbiguousExpression.*.ExpectedType => null;
↓ Expression.ExpectedType:`IMaybeType`?;
/// <summary>
/// Whether an implicit recovery (i.e. move or freeze) is allowed to convert this expression to
/// the expected type.
/// </summary>
↓ Expression.ImplicitRecoveryAllowed(): `bool`;
/// <summary>
/// Whether this expression should be prepared for return.
/// </summary>
↓ Expression.ShouldPrepareToReturn(): `bool`;
↑ Expression.Type: `IMaybeType`;
⟳ Expression.FlowStateAfter: `IFlowState` initial => IFlowState.Empty;
= Expression.↑.Diagnostics;
✎ Expression ImplicitMove;
✎ Expression ImplicitFreeze;
✎ Expression PrepareToReturn;

↓ BlockExpression.FlowStateBefore(): `IFlowState`;
// TODO it would be better to have a way to specify that this inherits and not emit any code
= BlockExpression.Statements[0].**.FlowStateBefore()
    => base.Inherited_FlowStateBefore(child, descendant, ctx);
= BlockExpression.Statements[index].**.FlowStateBefore() => Statements[index - 1].FlowStateAfter;
↑ BlockExpression.Type: `IMaybeType`;
⟳ BlockExpression.FlowStateAfter: `IFlowState` initial => IFlowState.Empty;
↓ NewObjectExpression.FlowStateBefore(): `IFlowState`;
// TODO it would be better to have a way to specify that this inherits and not emit any code
= NewObjectExpression.Arguments[0].**.FlowStateBefore()
    => base.Inherited_FlowStateBefore(child, descendant, ctx);
= NewObjectExpression.Arguments[index].**.FlowStateBefore()
    => Arguments[index - 1]?.FlowStateAfter ?? IFlowState.Empty;
= NewObjectExpression.Arguments[index].ExpectedType
    => ContextualizedCall?.ParameterTypes[index].Type;
↑ NewObjectExpression.ContextualizedCall:`ContextualizedCall`?;
= NewObjectExpression.↑.Diagnostics;

↑ NeverTypedExpression.Type: `NeverType` => AzothType.Never;

// ---------- Literal Expressions
↓ LiteralExpression.FlowStateBefore(): `IFlowState`;
= LiteralExpression.FlowStateAfter;
↑ BoolLiteralExpression.Type: `CapabilityType`;
↑ IntegerLiteralExpression.Type: `CapabilityType`;
↑ NoneLiteralExpression.Type:`OptionalType`;
= StringLiteralExpression.↑.Diagnostics;

// ---------- Operator Expressions
= AssignmentExpression.RightOperand.**.FlowStateBefore
    => LeftOperand?.FlowStateAfter ?? IFlowState.Empty;
= AssignmentExpression.RightOperand.ExpectedType => LeftOperand?.Type;
= AssignmentExpression.↑.Diagnostics;
= BinaryOperatorExpression.RightOperand.**.FlowStateBefore
    => LeftOperand?.FlowStateAfter ?? IFlowState.Empty;
= BinaryOperatorExpression.↑.Diagnostics;
= ConversionExpression.↑.Diagnostics;
↑ eager ImplicitConversionExpression.Type: `IMaybeType`;
// No expected type for the referent. If one were given, it could cause another implicit conversion.
= ImplicitConversionExpression.Referent.ExpectedType => null;
= PatternMatchExpression.Pattern.**.FlowStateBefore => Referent?.FlowStateAfter ?? IFlowState.Empty;
= PatternMatchExpression.Type => AzothType.Bool;

// ---------- Control Flow Expressions
= IfExpression.ThenBlock.**.FlowStateBefore
    => Condition?.FlowStateAfter ?? IFlowState.Empty;
= IfExpression.ElseClause.**.FlowStateBefore
    => Condition?.FlowStateAfter ?? IFlowState.Empty;
= IfExpression.Condition.ExpectedType => AzothType.OptionalBool;
⟳ IfExpression.FlowStateAfter: `IFlowState` initial => IFlowState.Empty;
= IfExpression.↑.Diagnostics;
= WhileExpression.Block.**.FlowStateBefore
    => Condition?.FlowStateAfter ?? IFlowState.Empty;
= WhileExpression.Condition.ExpectedType => AzothType.OptionalBool;
↓ ReturnExpression.ExpectedReturnType: `IMaybeType`?;
= ReturnExpression.Value.ExpectedType => ExpectedReturnType;
= ReturnExpression.Value.ImplicitRecoveryAllowed() => true;
= ReturnExpression.Value.ShouldPrepareToReturn() => true;
= ReturnExpression.↑.Diagnostics;

// ---------- Invocation Expressions
= UnresolvedInvocationExpression.Expression.ExpectedType => null;
↓ UnresolvedInvocationExpression.FlowStateBefore(): `IFlowState`;
= UnresolvedInvocationExpression.Arguments[0].**.FlowStateBefore()
    => Expression?.FlowStateAfter ?? base.Inherited_FlowStateBefore(child, descendant, ctx);
= UnresolvedInvocationExpression.Arguments[index].**.FlowStateBefore()
    => Arguments[index - 1]?.FlowStateAfter ?? IFlowState.Empty;
= UnresolvedInvocationExpression.Type => AzothType.Unknown;
↓ FunctionInvocationExpression.FlowStateBefore(): `IFlowState`;
= FunctionInvocationExpression.Arguments[0].**.FlowStateBefore()
    => base.Inherited_FlowStateBefore(child, descendant, ctx);
= FunctionInvocationExpression.Arguments[index].**.FlowStateBefore()
    => Arguments[index - 1]?.FlowStateAfter ?? IFlowState.Empty;
↑ FunctionInvocationExpression.ContextualizedCall: `ContextualizedCall`?;
= FunctionInvocationExpression.Arguments[index].ExpectedType
    => ContextualizedCall?.ParameterTypes[index].Type;
= FunctionInvocationExpression.↑.Diagnostics;
= MethodInvocationExpression.Arguments[0].**.FlowStateBefore()
    => Method.FlowStateAfter;
= MethodInvocationExpression.Arguments[index].**.FlowStateBefore()
    => Arguments[index - 1]?.FlowStateAfter ?? IFlowState.Empty;
↑ MethodInvocationExpression.ContextualizedCall: `ContextualizedCall`?;
= MethodInvocationExpression.↑.Diagnostics;
↑ GetterInvocationExpression.ContextualizedCall: `ContextualizedCall`?;
= GetterInvocationExpression.Context.ExpectedType
    => ContextualizedCall?.SelfParameterType?.ToUpperBound();
= GetterInvocationExpression.FlowStateAfter;
= GetterInvocationExpression.↑.Diagnostics;
= SetterInvocationExpression.Value.**.FlowStateBefore() => Context.FlowStateAfter;
= SetterInvocationExpression.Context.ExpectedType
    => ContextualizedCall?.SelfParameterType?.ToUpperBound();
= SetterInvocationExpression.Value.ExpectedType
    => ContextualizedCall?.ParameterTypes[0].Type;
↑ SetterInvocationExpression.ContextualizedCall: `ContextualizedCall`?;
= SetterInvocationExpression.↑.Diagnostics;
= FunctionReferenceInvocationExpression.Arguments[0].**.FlowStateBefore()
    => base.Inherited_FlowStateBefore(child, descendant, ctx);
= FunctionReferenceInvocationExpression.Arguments[index].**.FlowStateBefore()
    => Arguments[index - 1]?.FlowStateAfter ?? Expression.FlowStateAfter;
↑ FunctionReferenceInvocationExpression.FunctionType: `FunctionType`;
= FunctionReferenceInvocationExpression.Arguments[index].ExpectedType
    => FunctionType.Parameters[index].Type;
= FunctionReferenceInvocationExpression.↑.Diagnostics;
↓ InitializerInvocationExpression.FlowStateBefore(): `IFlowState`;
= InitializerInvocationExpression.Arguments[0].**.FlowStateBefore()
    => base.Inherited_FlowStateBefore(child, descendant, ctx);
= InitializerInvocationExpression.Arguments[index].**.FlowStateBefore()
    => Arguments[index - 1]?.FlowStateAfter ?? IFlowState.Empty;
↑ InitializerInvocationExpression.ContextualizedCall: `ContextualizedCall`?;
= InitializerInvocationExpression.Arguments[index].ExpectedType
    => ContextualizedCall?.ParameterTypes[index].Type;
= NonInvocableInvocationExpression.Expression.ExpectedType => null;
↓ NonInvocableInvocationExpression.FlowStateBefore(): `IFlowState`;
= NonInvocableInvocationExpression.Arguments[0].**.FlowStateBefore()
    => Expression?.FlowStateAfter ?? base.Inherited_FlowStateBefore(child, descendant, ctx);
= NonInvocableInvocationExpression.Arguments[index].**.FlowStateBefore()
    => Arguments[index - 1]?.FlowStateAfter ?? IFlowState.Empty;
= NonInvocableInvocationExpression.Type => AzothType.Unknown;

// ---------- Name Expressions
↓ NameExpression.FlowStateBefore(): `IFlowState`;
// TODO delete once all name expressions implement FlowStateAfter
↑ NameExpression.FlowStateAfter: `IFlowState`
    => throw new NotImplementedException($"{GetType().GetFriendlyName()}.{nameof(FlowStateAfter)} not implemented.");
= UnresolvedMemberAccessExpression.FlowStateAfter;
↑ NamespaceName.Type: `UnknownType` => AzothType.Unknown;
↑ FunctionGroupName.Type: `UnknownType` => AzothType.Unknown;
= FunctionGroupName.FlowStateAfter => FlowStateBefore();
= FunctionName.FlowStateAfter;
= FunctionName.*.ExpectedType => null;
↑ MethodGroupName.Type: `UnknownType` => AzothType.Unknown;
= MethodGroupName.FlowStateAfter => Context.FlowStateAfter;
= MethodName.Context.ExpectedType;
= MethodName.Context.ImplicitRecoveryAllowed() => true;
= MethodName.FlowStateAfter => Context.FlowStateAfter;
= FieldAccessExpression.FlowStateAfter;
= FieldAccessExpression.↑.Diagnostics;
= VariableNameExpression.FlowStateAfter;
= TypeNameExpression.Type => AzothType.Unknown;
↑ InitializerGroupName.Type: `UnknownType` => AzothType.Unknown;
= InitializerName.FlowStateAfter;
↑ BuiltInTypeNameExpression.Type:`UnknownType` => AzothType.Unknown;
= SelfExpression.FlowStateAfter;
↑ MissingNameExpression.Type: `UnknownType` => AzothType.Unknown;
↑ UnknownNameExpression.Type: `UnknownType` => AzothType.Unknown;
= UnknownNameExpression.FlowStateAfter;
= AmbiguousMemberAccessExpression.FlowStateAfter;

// ---------- Capability Expressions
= MoveExpression.Type;
= MoveVariableExpression.↑.Diagnostics;
// Pass along should prepare to return to the referent if this is an implicit move.
= MoveValueExpression.Referent.ShouldPrepareToReturn()
    => IsImplicit ? ShouldPrepareToReturn() : false;
= MoveValueExpression.↑.Diagnostics;
= FreezeExpression.Type;
= FreezeVariableExpression.↑.Diagnostics;
// Pass along should prepare to return to the referent if this is an implicit move.
= FreezeValueExpression.Referent.ShouldPrepareToReturn()
    => IsImplicit ? ShouldPrepareToReturn() : false;
= FreezeValueExpression.↑.Diagnostics;
= PrepareToReturnExpression.Type => Value.Type;

// ---------- Async Expressions
= AsyncBlockExpression.Type => Block.Type;
↑ AsyncBlockExpression.FlowStateAfter: `IFlowState` => throw new NotImplementedException();
