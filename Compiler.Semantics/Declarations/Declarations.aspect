◊namespace Azoth.Tools.Bootstrap.Compiler.Semantics.Declarations;
◊name DeclarationsAspect;
◊using Azoth.Tools.Bootstrap.Framework;
◊using Azoth.Tools.Bootstrap.Compiler.Types.Constructors;

// ↓ ⟳ ↑ ⮡ ↗↖ →*← ✎

// TODO move symbol related attributes out of here and into a symbols aspect

↑ NamedDeclaration.Name: `UnqualifiedName`;
↑ SymbolDeclaration.Symbol: `Symbol`?;

// ---------- Bindings
↑ NamedBindingDeclaration.Name: `IdentifierName`;

// ---------- Package Declarations
↑ PackageDeclaration.Symbol: `PackageSymbol`;

// ---------- Facet Declarations
↑ PackageFacetDeclaration.PackageName: `IdentifierName` => PackageSymbol.Name;
↑ PackageFacetDeclaration.PackageSymbol: `PackageSymbol`;
// TODO "Rename" the inherited "Symbol" attribute to "PackageSymbol"?
↑ PackageFacetDeclaration.Symbol: `PackageSymbol` => PackageSymbol;
↑ child PackageFacetDeclaration.GlobalNamespace: NamespaceDeclaration;

// ---------- Declarations
↑ InvocableDeclaration.ParameterPlainTypes: `IMaybeNonVoidPlainType`*;
↑ InvocableDeclaration.ParameterTypes: `IMaybeParameterType`*;
↑ InvocableDeclaration.ReturnPlainType: `IMaybePlainType`;
↑ InvocableDeclaration.ReturnType: `IMaybeType`;
↑ InvocableDeclaration.Symbol: `InvocableSymbol`?;
↑ FunctionInvocableDeclaration.Symbol: `FunctionSymbol`?;
↑ FunctionInvocableDeclaration.PlainType: `IMaybeFunctionPlainType`;
↑ FunctionInvocableDeclaration.Type: `IMaybeFunctionType`;

// ---------- Namespace Declarations
↑ NamespaceDeclaration.NamespaceName: `NamespaceName`;
↑ NamespaceDeclaration.Name: `IdentifierName`?;
↑ NamespaceDeclaration.Symbol: `NamespaceSymbol`;
↑ NamespaceDeclaration.Members: NamespaceMemberDeclaration*;
↑ NamespaceDeclaration.NestedMembers: NamespaceMemberDeclaration*;
= NamespaceDeclaration.NestedMembers;

// ---------- Function Definition
↑ FunctionDeclaration.Symbol: `FunctionSymbol`?;

// ---------- Type Declarations
↑ TypeDeclaration.Supertypes: {`BareType`};
↑ TypeDeclaration.TypeConstructor: `ITypeConstructor`;
↑ TypeDeclaration.Symbol: `TypeSymbol`;
↑ TypeDeclaration.Members: {TypeMemberDeclaration};
/// Members including ones inherited from supertypes
↑ TypeDeclaration.InclusiveMembers: {TypeMemberDeclaration};
↑ NonVariableTypeDeclaration.TypeConstructor: `BareTypeConstructor`;
↑ NonVariableTypeDeclaration.ImplicitSelf: ImplicitSelfDeclaration;
↑ OrdinaryTypeDeclaration.Symbol: `OrdinaryTypeSymbol`;
↑ OrdinaryTypeDeclaration.InclusiveMembers: {TypeMemberDeclaration};
↑ ClassDeclaration.InclusiveMembers: {TypeMemberDeclaration};
↑ StructDeclaration.InclusiveMembers: {TypeMemberDeclaration};
↑ TraitDeclaration.InclusiveMembers: {TypeMemberDeclaration};

// ---------- Type Declaration Parts
= GenericParameterDeclaration.TypeConstructor;
↑ GenericParameterDeclaration.Symbol: `GenericParameterTypeSymbol`;
↑ ImplicitSelfDeclaration.Syntax: `ISyntax`? => null;
↑ ImplicitSelfDeclaration.Name: `BuiltInTypeName` => BuiltInTypeName.Self;
= ImplicitSelfDeclaration.Supertypes => [];
↑ ImplicitSelfDeclaration.TypeConstructor: `AssociatedTypeConstructor`;
↑ ImplicitSelfDeclaration.Symbol: `AssociatedTypeSymbol`;
= ImplicitSelfDeclaration.Members => [];
= ImplicitSelfDeclaration.InclusiveMembers => [];

// ---------- Member Declarations
↑ MethodDeclaration.SelfParameterPlainType: `IMaybeNonVoidPlainType`;
↑ MethodDeclaration.SelfParameterType: `IMaybeNonVoidType`;
↑ MethodDeclaration.Symbol: `MethodSymbol`?;
↑ OrdinaryMethodDeclaration.Arity: `int`;
↑ OrdinaryMethodDeclaration.MethodGroupPlainType: `IMaybeFunctionPlainType`;
↑ OrdinaryMethodDeclaration.MethodGroupType: `IMaybeFunctionType`;
↑ InitializerDeclaration.SelfParameterPlainType: `IMaybeNonVoidPlainType`;
↑ InitializerDeclaration.SelfParameterType: `IMaybeNonVoidType`;
↑ InitializerDeclaration.Symbol: `InitializerSymbol`?;
↑ FieldDeclaration.IsMutableBinding: `bool`;
↑ FieldDeclaration.BindingType: `IMaybeNonVoidType`;
↑ FieldDeclaration.Symbol: `FieldSymbol`?;
↑ AssociatedFunctionDeclaration.Symbol: `FunctionSymbol`?;
↑ AssociatedTypeDeclaration.Symbol: `AssociatedTypeSymbol`;
= AssociatedTypeDeclaration.Supertypes => [];
= AssociatedTypeDeclaration.Members => [];
= AssociatedTypeDeclaration.InclusiveMembers => [];
