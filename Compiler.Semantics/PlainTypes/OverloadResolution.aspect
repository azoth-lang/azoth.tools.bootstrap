◊namespace Azoth.Tools.Bootstrap.Compiler.Semantics.PlainTypes;
◊name OverloadResolutionAspect;
◊using Azoth.Tools.Bootstrap.Compiler.Core.Diagnostics;
◊using Azoth.Tools.Bootstrap.Compiler.Types.Plain;
◊using Azoth.Tools.Bootstrap.Framework;

// ↓ ⟳ ↑ ⮡ ↗↖ →*← ✎

// ---------- Expressions
↑ NewObjectExpression.CompatibleConstructors: {ConstructorDeclaration};
↑ NewObjectExpression.ReferencedConstructor: ConstructorDeclaration?;
= NewObjectExpression.↑.Diagnostics;

// ---------- Invocation Expressions
= UnresolvedInvocationExpression.Expression.ExpectedPlainType;
✎ UnresolvedInvocationExpression FunctionNameExpression;
✎ UnresolvedInvocationExpression MethodNameExpression;
✎ UnresolvedInvocationExpression TypeNameExpression;
✎ UnresolvedInvocationExpression InitializerGroupNameExpression;
✎ UnresolvedInvocationExpression FunctionReferenceExpression;
✎ UnresolvedInvocationExpression Unbound;
= UnresolvedInvocationExpression.↑.Diagnostics;

↑ FunctionInvocationExpression.SelectedCallCandidate: `CallCandidate<IFunctionInvocableDeclarationNode>`?
    => Function.SelectedCallCandidate;

↑ MethodInvocationExpression.SelectedCallCandidate: `CallCandidate<IOrdinaryMethodDeclarationNode>`?
    => Method.SelectedCallCandidate;
= MethodInvocationExpression.↑.Diagnostics;

↑ InitializerInvocationExpression.CompatibleDeclarations: {InitializerDeclaration};
↑ InitializerInvocationExpression.ReferencedDeclaration: InitializerDeclaration?;

// ---------- Name Expressions
↑ FunctionGroupName.CallCandidates: {`CallCandidate<IFunctionInvocableDeclarationNode>`};
↑ FunctionGroupName.CompatibleCallCandidates: {`CallCandidate<IFunctionInvocableDeclarationNode>`};
↑ FunctionGroupName.SelectedCallCandidate: `CallCandidate<IFunctionInvocableDeclarationNode>`?;
↑ FunctionGroupName.ReferencedDeclaration: FunctionInvocableDeclaration?;
= FunctionGroupName.↑.Diagnostics;
= FunctionName.↑.Diagnostics;
↑ MethodGroupName.CallCandidates: {`CallCandidate<IOrdinaryMethodDeclarationNode>`};
↑ MethodGroupName.CompatibleCallCandidates: {`CallCandidate<IOrdinaryMethodDeclarationNode>`};
↑ MethodGroupName.SelectedCallCandidate: `CallCandidate<IOrdinaryMethodDeclarationNode>`?;
↑ MethodGroupName.ReferencedDeclaration: OrdinaryMethodDeclaration?;
= MethodGroupName.↑.Diagnostics;
