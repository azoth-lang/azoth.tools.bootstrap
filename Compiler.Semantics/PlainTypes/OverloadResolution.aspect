◊namespace Azoth.Tools.Bootstrap.Compiler.Semantics.PlainTypes;
◊name OverloadResolutionAspect;
◊using Azoth.Tools.Bootstrap.Compiler.Core.Diagnostics;
◊using Azoth.Tools.Bootstrap.Compiler.Types.Plain;
◊using Azoth.Tools.Bootstrap.Framework;

// ↓ ⟳ ↑ ⮡ ↗↖ →*← ✎

// Note: `CompatibleCallCandidates` attributes are circular because they can have circular
// dependencies when passing a method/function/initializer group to an invocation. (e.g.
// `a.method(b.other_method)` resolving overloads of `a.method` and `b.method` has a circualr
// dependency). This is the apropriate attribute to make circular since it is a set the constricts.

// ---------- Instance Member Access Expressions
↑ MethodAccessExpression.CallCandidates: {`ICallCandidate<IOrdinaryMethodDeclarationNode>`};
⟳ MethodAccessExpression.CompatibleCallCandidates: {`ICallCandidate<IOrdinaryMethodDeclarationNode>`}
    initial => [];
↑ MethodAccessExpression.SelectedCallCandidate: `ICallCandidate<IOrdinaryMethodDeclarationNode>`?;
↑ MethodAccessExpression.ReferencedDeclaration: OrdinaryMethodDeclaration?
    => SelectedCallCandidate?.Declaration;
= MethodAccessExpression.↑.Diagnostics;

// ---------- Invocation Expressions
= UnresolvedInvocationExpression.Expression.ExpectedPlainType;
✎ UnresolvedInvocationExpression replace_with FunctionInvocationExpression;
✎ UnresolvedInvocationExpression replace_with MethodInvocationExpression;
✎ UnresolvedInvocationExpression TypeName rewrite;
✎ UnresolvedInvocationExpression replace_with InitializerInvocationExpression;
✎ UnresolvedInvocationExpression replace_with FunctionReferenceInvocationExpression;
✎ UnresolvedInvocationExpression replace_with NonInvocableInvocationExpression;
= UnresolvedInvocationExpression.↑.Diagnostics;

= FunctionInvocationExpression.Function.ExpectedPlainType;
↑ FunctionInvocationExpression.SelectedCallCandidate: `ICallCandidate<IFunctionInvocableDeclarationNode>`?
    => Function.SelectedCallCandidate;

= MethodInvocationExpression.Method.ExpectedPlainType;
↑ MethodInvocationExpression.SelectedCallCandidate: `ICallCandidate<IOrdinaryMethodDeclarationNode>`?
    => Method.SelectedCallCandidate;

↑ GetterInvocationExpression.CallCandidates: {`ICallCandidate<IPropertyAccessorDeclarationNode>`};
↑ GetterInvocationExpression.CompatibleCallCandidates: {`ICallCandidate<IGetterMethodDeclarationNode>`};
↑ GetterInvocationExpression.SelectedCallCandidate: `ICallCandidate<IGetterMethodDeclarationNode>`?
    => CompatibleCallCandidates.TrySingle();
↑ GetterInvocationExpression.ReferencedDeclaration: GetterMethodDeclaration?
    => SelectedCallCandidate?.Declaration;

↑ SetterInvocationExpression.CallCandidates: {`ICallCandidate<IPropertyAccessorDeclarationNode>`};
↑ SetterInvocationExpression.CompatibleCallCandidates: {`ICallCandidate<ISetterMethodDeclarationNode>`};
↑ SetterInvocationExpression.SelectedCallCandidate: `ICallCandidate<ISetterMethodDeclarationNode>`?
    => CompatibleCallCandidates.TrySingle();
↑ SetterInvocationExpression.ReferencedDeclaration: SetterMethodDeclaration?
    => SelectedCallCandidate?.Declaration;

↑ InitializerInvocationExpression.SelectedCallCandidate: `ICallCandidate<IInitializerDeclarationNode>`?
    => Initializer.SelectedCallCandidate;

// ---------- Name Expressions
↑ FunctionNameExpression.CallCandidates: {`ICallCandidate<IFunctionInvocableDeclarationNode>`};
⟳ FunctionNameExpression.CompatibleCallCandidates: {`ICallCandidate<IFunctionInvocableDeclarationNode>`}
    initial => [];
↑ FunctionNameExpression.SelectedCallCandidate: `ICallCandidate<IFunctionInvocableDeclarationNode>`?;
↑ FunctionNameExpression.ReferencedDeclaration: FunctionInvocableDeclaration?
    => SelectedCallCandidate?.Declaration;
= FunctionNameExpression.↑.Diagnostics;

↑ InitializerGroupName.CallCandidates: {`ICallCandidate<IInitializerDeclarationNode>`};
⟳ InitializerGroupName.CompatibleCallCandidates: {`ICallCandidate<IInitializerDeclarationNode>`}
    initial => [];
↑ InitializerGroupName.SelectedCallCandidate: `ICallCandidate<IInitializerDeclarationNode>`?;
↑ InitializerGroupName.ReferencedDeclaration: InitializerDeclaration?
    => SelectedCallCandidate?.Declaration;
= InitializerGroupName.↑.Diagnostics;
= InitializerNameExpression.↑.Diagnostics;
