◊namespace Azoth.Tools.Bootstrap.Compiler.Semantics.PlainTypes;
◊name OverloadResolutionAspect;
◊using Azoth.Tools.Bootstrap.Compiler.Core.Diagnostics;
◊using Azoth.Tools.Bootstrap.Compiler.Types.Plain;
◊using Azoth.Tools.Bootstrap.Framework;

// ↓ ⟳ ↑ ⮡ ↗↖ →*← ✎

// ---------- Expressions
↑ NewObjectExpression.CompatibleConstructors: {ConstructorDeclaration};
↑ NewObjectExpression.ReferencedConstructor: ConstructorDeclaration?;
= NewObjectExpression.↑.Diagnostics;

// ---------- Invocation Expressions
= UnresolvedInvocationExpression.Expression.ExpectedPlainType;
✎ UnresolvedInvocationExpression replace_with FunctionInvocationExpression;
✎ UnresolvedInvocationExpression replace_with MethodInvocationExpression;
✎ UnresolvedInvocationExpression TypeNameExpression rewrite;
✎ UnresolvedInvocationExpression replace_with InitializerInvocationExpression;
✎ UnresolvedInvocationExpression replace_with FunctionReferenceInvocationExpression;
✎ UnresolvedInvocationExpression replace_with NonInvocableInvocationExpression;
= UnresolvedInvocationExpression.↑.Diagnostics;

↑ FunctionInvocationExpression.SelectedCallCandidate: `ICallCandidate<IFunctionInvocableDeclarationNode>`?
    => Function.SelectedCallCandidate;

↑ MethodInvocationExpression.SelectedCallCandidate: `ICallCandidate<IOrdinaryMethodDeclarationNode>`?
    => Method.SelectedCallCandidate;
= MethodInvocationExpression.↑.Diagnostics;

↑ GetterInvocationExpression.CallCandidates: {`ICallCandidate<IPropertyAccessorDeclarationNode>`};
↑ GetterInvocationExpression.CompatibleCallCandidates: {`ICallCandidate<IGetterMethodDeclarationNode>`};
↑ GetterInvocationExpression.SelectedCallCandidate: `ICallCandidate<IGetterMethodDeclarationNode>`?
    => CompatibleCallCandidates.TrySingle();
↑ GetterInvocationExpression.ReferencedDeclaration: GetterMethodDeclaration?
    => SelectedCallCandidate?.Declaration;

↑ SetterInvocationExpression.CallCandidates: {`ICallCandidate<IPropertyAccessorDeclarationNode>`};
↑ SetterInvocationExpression.CompatibleCallCandidates: {`ICallCandidate<ISetterMethodDeclarationNode>`};
↑ SetterInvocationExpression.SelectedCallCandidate: `ICallCandidate<ISetterMethodDeclarationNode>`?
    => CompatibleCallCandidates.TrySingle();
↑ SetterInvocationExpression.ReferencedDeclaration: SetterMethodDeclaration?
    => SelectedCallCandidate?.Declaration;

↑ InitializerInvocationExpression.SelectedCallCandidate: `ICallCandidate<IInitializerDeclarationNode>`?
    => Initializer.SelectedCallCandidate;

// ---------- Name Expressions
↑ FunctionGroupName.CallCandidates: {`ICallCandidate<IFunctionInvocableDeclarationNode>`};
↑ FunctionGroupName.CompatibleCallCandidates: {`ICallCandidate<IFunctionInvocableDeclarationNode>`};
↑ FunctionGroupName.SelectedCallCandidate: `ICallCandidate<IFunctionInvocableDeclarationNode>`?;
↑ FunctionGroupName.ReferencedDeclaration: FunctionInvocableDeclaration?
    => SelectedCallCandidate?.Declaration;
= FunctionGroupName.↑.Diagnostics;
= FunctionName.↑.Diagnostics;
↑ MethodGroupName.CallCandidates: {`ICallCandidate<IOrdinaryMethodDeclarationNode>`};
↑ MethodGroupName.CompatibleCallCandidates: {`ICallCandidate<IOrdinaryMethodDeclarationNode>`};
↑ MethodGroupName.SelectedCallCandidate: `ICallCandidate<IOrdinaryMethodDeclarationNode>`?;
↑ MethodGroupName.ReferencedDeclaration: OrdinaryMethodDeclaration?
    => SelectedCallCandidate?.Declaration;
= MethodGroupName.↑.Diagnostics;
↑ InitializerGroupName.CallCandidates: {`ICallCandidate<IInitializerDeclarationNode>`};
↑ InitializerGroupName.CompatibleCallCandidates: {`ICallCandidate<IInitializerDeclarationNode>`};
↑ InitializerGroupName.SelectedCallCandidate: `ICallCandidate<IInitializerDeclarationNode>`?;
↑ InitializerGroupName.ReferencedDeclaration: InitializerDeclaration?
    => SelectedCallCandidate?.Declaration;
= InitializerGroupName.↑.Diagnostics;
