◊namespace Azoth.Tools.Bootstrap.Compiler.Semantics.PlainTypes;
◊name DefinitionPlainTypesAspect;
◊using Azoth.Tools.Bootstrap.Compiler.Types.Constructors;
◊using Azoth.Tools.Bootstrap.Compiler.Types.Plain;

// ↓ ⟳ ↑ ⮡ ↗↖ →*← ✎

// ---------- Function Definition
// TODO it would be good to refactor to not depend on Type
= FunctionDefinition.Body.ExpectedPlainType => Type.Return.ToPlainType();

// ---------- Type Definitions
↑ TypeDefinition.DeclaredPlainType:`OrdinaryTypeConstructor`;
= TypeDefinition.DeclaredPlainType;
↑ TypeDefinition.SelfPlainType: `SelfPlainType`;
= TypeDefinition.SelfPlainType;

// ---------- Member Definitions
// TODO it would be good to refactor to not depend on Type
= MethodDefinition.Body.ExpectedPlainType
    => Self.ReturnType.ToPlainType();
= FieldDefinition.BindingPlainType;
// TODO it would be good to refactor to not depend on Type
= AssociatedFunctionDefinition.Body.ExpectedPlainType
    => Type.Return.ToPlainType();
