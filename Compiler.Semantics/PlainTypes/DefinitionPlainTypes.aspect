◊namespace Azoth.Tools.Bootstrap.Compiler.Semantics.PlainTypes;
◊name DefinitionPlainTypesAspect;
◊using Azoth.Tools.Bootstrap.Compiler.Types;
◊using Azoth.Tools.Bootstrap.Compiler.Types.Constructors;
◊using Azoth.Tools.Bootstrap.Compiler.Types.Plain;
◊using Azoth.Tools.Bootstrap.Framework;

// ↓ ⟳ ↑ ⮡ ↗↖ →*← ✎

// ---------- Definitions
= InvocableDefinition.ParameterPlainTypes;
= ConcreteFunctionInvocableDefinition.ReturnPlainType
    => Return?.NamedPlainType ?? AzothPlainType.Void;
= ConcreteFunctionInvocableDefinition.PlainType;

// ---------- Function Definition
= FunctionDefinition.Body.ExpectedPlainType => Self.ReturnPlainType;
= FunctionDefinition.Body.**.ExpectedReturnPlainType => Self.ReturnPlainType;

// ---------- Type Definitions
// TODO move the definition of type factories to their own aspect
↑ TypeDefinition.TypeFactory: `OrdinaryTypeConstructor`;
↑ TypeDefinition.SelfPlainType: `ConstructedPlainType`;
= TypeDefinition.SelfPlainType;

// ---------- Type Definition Parts
= ImplicitSelfDefinition.TypeFactory;

// ---------- Member Definitions
= MethodDefinition.SelfParameterPlainType => SelfParameter.BindingPlainType;
= MethodDefinition.Body.**.ExpectedReturnPlainType => Self.ReturnPlainType;
= MethodDefinition.Body.ExpectedPlainType
    => Self.ReturnPlainType;

= MethodDefinition.ReturnPlainType => Return?.NamedPlainType ?? AzothPlainType.Void;
= FieldDefinition.BindingPlainType;
// TODO it would be good to refactor to not depend on Type
= AbstractMethodDefinition.MethodGroupPlainType => MethodGroupType.PlainType;
// TODO it would be good to refactor to not depend on Type
= OrdinaryMethodDefinition.MethodGroupPlainType => MethodGroupType.PlainType;
= ConstructorDefinition.ReturnPlainType
    => ContainingTypeDefinition.TypeFactory.ConstructWithParameterPlainTypes();
= DefaultConstructorDefinition.SelfParameterPlainType
    => ContainingTypeDefinition.TypeFactory.ConstructWithParameterPlainTypes();
= OrdinaryConstructorDefinition.SelfParameterPlainType => SelfParameter.BindingPlainType;
= OrdinaryConstructorDefinition.Body.**.ExpectedReturnPlainType => AzothPlainType.Void;
= InitializerDefinition.ReturnPlainType
    => ContainingTypeDefinition.TypeFactory.ConstructWithParameterPlainTypes();
= DefaultInitializerDefinition.SelfParameterPlainType
    => ContainingTypeDefinition.TypeFactory.ConstructWithParameterPlainTypes();
= OrdinaryInitializerDefinition.SelfParameterPlainType => SelfParameter.BindingPlainType;
= OrdinaryInitializerDefinition.Body.**.ExpectedReturnPlainType => AzothPlainType.Void;
// Null is the signal that this is a field initializer and not a method body
= FieldDefinition.Initializer.**.ExpectedReturnPlainType => null;
= AssociatedFunctionDefinition.Body.ExpectedPlainType => Self.ReturnPlainType;
= AssociatedFunctionDefinition.Body.**.ExpectedReturnPlainType => Self.ReturnPlainType;
