◊namespace Azoth.Tools.Bootstrap.Compiler.Semantics.PlainTypes;
◊name ExpressionPlainTypesAspect;
◊using Azoth.Tools.Bootstrap.Compiler.Core.Diagnostics;
◊using Azoth.Tools.Bootstrap.Compiler.Types.Plain;

// ↓ ⟳ ↑ ⮡ ↗↖ →*← ✎

// TODO ExpectedPlainType could really be INonVoidPlainType?, but regular types need to be made more strict first.

// ---------- Special Parts
↑ BlockOrResult.PlainType: `IMaybePlainType`;

// ---------- Function Parts
↓ ExpressionBody.ExpectedPlainType: `IMaybePlainType`?;
= ExpressionBody.ResultStatement.ExpectedPlainType => ExpectedPlainType;

// ---------- Statements
↑ Statement.ResultPlainType: `IMaybePlainType`? => null;
↓ ResultStatement.ExpectedPlainType: `IMaybePlainType`?;
= ResultStatement.Expression.ExpectedPlainType => ExpectedPlainType;
= ResultStatement.ResultPlainType => PlainType;
// The expected plain type for the initializer is the binding plain type since it needs to
// have any conversion (e.g. to non-const-value type) applied.
= VariableDeclarationStatement.Initializer.ExpectedPlainType => BindingPlainType;
= ExpressionStatement.Expression.ExpectedPlainType => null;

// ---------- Patterns
= OptionalPattern.↑.Diagnostics;

// ---------- Expressions
// TODO remove once all nodes properly provide the expected plain type
= AmbiguousExpression.*.ExpectedPlainType => null;
↓ Expression.ExpectedPlainType: `IMaybePlainType`?;
↑ Expression.PlainType: `IMaybePlainType`;
✎ Expression ImplicitConversion;
↑ BlockExpression.PlainType: `IMaybePlainType`;
// TODO it would be better if this didn't depend on types, but only on plain types
= NewObjectExpression.Arguments[index].ExpectedPlainType
    => ContextualizedCall?.ParameterTypes[index].Type.ToPlainType();
= NeverTypedExpression.PlainType => IPlainType.Never;

// ---------- Operator Expressions
= AssignmentExpression.RightOperand.ExpectedPlainType => LeftOperand?.PlainType;
↑ BinaryOperatorExpression.NumericOperatorCommonPlainType: `IPlainType`?;
= BinaryOperatorExpression.LeftOperand.ExpectedPlainType => NumericOperatorCommonPlainType;
= BinaryOperatorExpression.RightOperand.ExpectedPlainType => NumericOperatorCommonPlainType;
= UnaryOperatorExpression.↑.Diagnostics;
// No expected plain type for the referent. If one were given, it could cause another implicit conversion.
= ImplicitConversionExpression.Referent.ExpectedPlainType => null;
= PatternMatchExpression.PlainType => IPlainType.Bool;

// ---------- Control Flow Expressions
= IfExpression.Condition.ExpectedPlainType => IPlainType.OptionalBool;
= WhileExpression.Condition.ExpectedPlainType => IPlainType.OptionalBool;
= ReturnExpression.Value.ExpectedPlainType => ExpectedReturnType?.ToPlainType();

// ---------- Invocation Expressions
= UnknownInvocationExpression.PlainType => IPlainType.Unknown;
= FunctionInvocationExpression.Arguments[index].ExpectedPlainType
    => Self.SelectedCallCandidate?.ParameterPlainTypes[index];
= MethodInvocationExpression.Arguments[index].ExpectedPlainType
    => Self.SelectedCallCandidate?.ParameterPlainTypes[index];
// TODO it would be better if this didn't depend on types, but only on plain types
= GetterInvocationExpression.Context.ExpectedPlainType
    => ContextualizedCall?.SelfParameterType?.Type.ToPlainType();
// TODO it would be better if this didn't depend on types, but only on plain types
= SetterInvocationExpression.Context.ExpectedPlainType
    => ContextualizedCall?.SelfParameterType?.Type.ToPlainType();
// TODO it would be better if this didn't depend on types, but only on plain types
= SetterInvocationExpression.Value.ExpectedPlainType
    => ContextualizedCall?.ParameterTypes[0].Type.ToPlainType();
↑ FunctionReferenceInvocationExpression.FunctionPlainType: `FunctionPlainType`;
// TODO it would be better if this didn't depend on types, but only on plain types
= InitializerInvocationExpression.Arguments[index].ExpectedPlainType
    => ContextualizedCall?.ParameterTypes[index].Type.ToPlainType();

// ---------- Ambiguous Name Expressions

// ---------- Name Expressions
= UnresolvedMemberAccessExpression.*.ExpectedPlainType => null;
= NamespaceName.PlainType => IPlainType.Unknown;
= FunctionGroupName.PlainType => IPlainType.Unknown;
= FunctionGroupName.*.ExpectedPlainType => null;
= FunctionName.*.ExpectedPlainType => null;
= MethodGroupName.PlainType => IPlainType.Unknown;
= MethodGroupName.*.ExpectedPlainType => null;
= MethodName.Context.ExpectedPlainType;
= TypeNameExpression.PlainType => IPlainType.Unknown;
= InitializerGroupName.PlainType => IPlainType.Unknown;
↑ InitializerGroupName.InitializingPlainType: `IMaybePlainType` => Context.NamedPlainType;
= SpecialTypeNameExpression.PlainType => IPlainType.Unknown;
= MissingNameExpression.PlainType => IPlainType.Unknown;
= UnknownNameExpression.PlainType => IPlainType.Unknown;

// ---------- Capability Expressions
= MoveExpression.PlainType => Referent.PlainType;
= ImplicitTempMoveExpression.PlainType => Referent.PlainType;
= FreezeExpression.PlainType => Referent.PlainType;
= PrepareToReturnExpression.PlainType => Value.PlainType;

// ---------- Async Expressions
= AsyncBlockExpression.PlainType => Block.PlainType;
= AwaitExpression.↑.Diagnostics;
