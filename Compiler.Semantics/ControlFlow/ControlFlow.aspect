◊namespace Azoth.Tools.Bootstrap.Compiler.Semantics.ControlFlow;
◊name ControlFlowAspect;
◊using System.Collections.Generic;

// ↓ ⟳ ↑ ⮡ ↗↖ →*← ✎

// ---------- Definitions
↑ child eager ExecutableDefinition.Entry: Entry;
= ExecutableDefinition.Entry;
= ExecutableDefinition.*.**.ControlFlowEntry() => Entry;
↑ child eager ExecutableDefinition.Exit: Exit;
= ExecutableDefinition.Exit;
= ExecutableDefinition.*.**.ControlFlowExit() => Exit;
= InvocableDefinition.Entry.ControlFlowFollowing();
= InvocableDefinition.Body.**.ControlFlowFollowing()
    => ControlFlowSet.CreateNormal(Exit);
= ConcreteFunctionInvocableDefinition.Return.ControlFlowFollowing() => ControlFlowSet.Empty;

// ---------- Type Definitions
= TypeDefinition.SupertypeNames[*].ControlFlowFollowing() => ControlFlowSet.Empty;
= ClassDefinition.BaseTypeName.ControlFlowFollowing() => ControlFlowSet.Empty;

// ---------- Member Definitions
= MethodDefinition.Return.ControlFlowFollowing() => ControlFlowSet.Empty;
= FieldDefinition.TypeNode.ControlFlowFollowing() => ControlFlowSet.Empty;
= FieldDefinition.Entry.ControlFlowFollowing()
    => ControlFlowSet.CreateNormal(Initializer ?? (IControlFlowNode)Exit);
= FieldDefinition.Initializer.ControlFlowFollowing()
    => ControlFlowSet.CreateNormal(Exit);

// ---------- Attributes
= Attribute.TypeName.ControlFlowFollowing() => ControlFlowSet.Empty;

// ---------- Parameters
= NamedParameter.TypeNode.ControlFlowFollowing() => ControlFlowSet.Empty;

// ---------- Function Parts
// TODO it would be better to have a way to specify that the last statement inherits and not emit any code
// TODO supporting index from end (e.g. [^1]) would allow this to be split into two rules
= BlockBody.Statements[index].**.ControlFlowFollowing()
    => index < Statements.Count - 1 ? ControlFlowSet.CreateNormal(Statements[index + 1]) : base.Inherited_ControlFlowFollowing(child, descendant, ctx);

// ---------- Types
= Type.*.ControlFlowFollowing() => ControlFlowSet.Empty;
= ParameterType.Referent.ControlFlowFollowing() => ControlFlowSet.Empty;

// ---------- Control Flow
↓ ControlFlow.ControlFlowEntry(): Entry;
↑ ControlFlow.ControlFlowNext: `ControlFlowSet`;
→*← ControlFlow.ControlFlowPrevious: `ControlFlowSet`
    root ExecutableDefinition
    from `Dictionary<IControlFlowNode, ControlFlowKind>`
    done ToControlFlowSet;
= ControlFlow.→*.ControlFlow.ControlFlowPrevious for each Self.ControlFlowNext.Keys;
↑ Entry.ControlFlowEntry(): Entry => this;
= Exit.ControlFlowNext => ControlFlowSet.Empty;

/// <summary>
/// The control flow nodes that follow this node based on the context.
/// </summary>
/// <remarks>This is an inherited property.</remarks>
↓ ControlFlow.ControlFlowFollowing(): `ControlFlowSet`;

// ---------- Expressions
// TODO having this default means that newly added expressions do not report that they need control
// flow to be properly handled.
// Default for expressions is just whatever the context says is the following node.
= Expression.ControlFlowNext;
= BlockExpression.ControlFlowNext;
// TODO it would be better to have a way to specify that the last statement inherits and not emit any code
// TODO supporting index from end (e.g. [^1]) would allow this to be split into two rules
= BlockExpression.Statements[index].**.ControlFlowFollowing()
    => index < Statements.Count - 1 ? ControlFlowSet.CreateNormal(Statements[index + 1]) : base.Inherited_ControlFlowFollowing(child, descendant, ctx);
= UnsafeExpression.ControlFlowNext;

// ---------- Unresolved Expressions
= UnresolvedMemberAccessExpression.ControlFlowNext;

// ---------- Instance Member Access Expressions
= FieldAccessExpression.ControlFlowNext;
= MethodAccessExpression.ControlFlowNext;

// ---------- Operator Expressions
= AssignmentExpression.ControlFlowNext;
= AssignmentExpression.LeftOperand.**.ControlFlowFollowing()
    => ControlFlowSet.CreateNormal(RightOperand);
= RefAssignmentExpression.ControlFlowNext;
= RefAssignmentExpression.LeftOperand.**.ControlFlowFollowing()
    => ControlFlowSet.CreateNormal(RightOperand);
= BinaryOperatorExpression.ControlFlowNext;
= BinaryOperatorExpression.LeftOperand.**.ControlFlowFollowing()
    => ControlFlowSet.CreateNormal(RightOperand);
= UnaryOperatorExpression.ControlFlowNext;
= ConversionExpression.ControlFlowNext;
= ImplicitConversionExpression.ControlFlowNext;
= PatternMatchExpression.Referent.**.ControlFlowFollowing()
    => ControlFlowSet.CreateNormal(Pattern);
= PatternMatchExpression.ControlFlowNext;
= RefExpression.ControlFlowNext;
= ImplicitDerefExpression.ControlFlowNext;

// ---------- Control Flow Expressions
= IfExpression.Condition.**.ControlFlowFollowing()
    => CurrentElseClause is not null
        ? ControlFlowSet.CreateNormal(ThenBlock, ElseClause!)
        : ControlFlowSet.CreateNormal(ThenBlock).Union(ControlFlowFollowing());
= IfExpression.ControlFlowNext;
= LoopExpression.Block.**.ControlFlowFollowing()
    => ControlFlowSet.CreateLoop(CurrentBlock).Union(ControlFlowFollowing());
= LoopExpression.ControlFlowNext;
= WhileExpression.Condition.**.ControlFlowFollowing()
    => ControlFlowSet.CreateNormal(Block).Union(ControlFlowFollowing());
= WhileExpression.Block.**.ControlFlowFollowing()
    => ControlFlowSet.CreateLoop(Condition).Union(ControlFlowFollowing());
= WhileExpression.ControlFlowNext;
= ForeachExpression.InExpression.**.ControlFlowFollowing()
    => ControlFlowSet.CreateNormal(Block);
// Technically, `next()` is called on the iterator before the block is looped. But there
// is no node that corresponds to that and it has no effect on the control flow.
= ForeachExpression.Block.**.ControlFlowFollowing()
    => ControlFlowSet.CreateLoop(Block).Union(ControlFlowFollowing());
= ForeachExpression.ControlFlowNext;
= ReturnExpression.Value.**.ControlFlowFollowing()
    => ControlFlowSet.CreateNormal(ControlFlowExit());
↓ ReturnExpression.ControlFlowExit(): Exit;
= ReturnExpression.ControlFlowNext;

// ---------- Invocation Expressions
= UnresolvedInvocationExpression.Expression.**.ControlFlowFollowing()
    => !TempArguments.IsEmpty
        ? ControlFlowSet.CreateNormal(Arguments[0])
        : base.Inherited_ControlFlowFollowing(child, descendant, ctx);
= UnresolvedInvocationExpression.Arguments[index].**.ControlFlowFollowing()
    => index < Arguments.Count - 1
        ? ControlFlowSet.CreateNormal(Arguments[index + 1])
        : base.Inherited_ControlFlowFollowing(child, descendant, ctx);
= UnresolvedInvocationExpression.ControlFlowNext;
= FunctionInvocationExpression.Function.**.ControlFlowFollowing()
    => !TempArguments.IsEmpty
        ? ControlFlowSet.CreateNormal(Arguments[0])
        : base.Inherited_ControlFlowFollowing(child, descendant, ctx);
// TODO it would be better to have a way to specify that the last statement inherits and not emit any code
// TODO supporting index from end (e.g. [^1]) would allow this to be split into two rules
= FunctionInvocationExpression.Arguments[index].**.ControlFlowFollowing()
    => index < Arguments.Count - 1
        ? ControlFlowSet.CreateNormal(Arguments[index + 1])
        : base.Inherited_ControlFlowFollowing(child, descendant, ctx);
= FunctionInvocationExpression.ControlFlowNext;
= MethodInvocationExpression.Method.**.ControlFlowFollowing()
    => !TempArguments.IsEmpty
        ? ControlFlowSet.CreateNormal(Arguments[0])
        : base.Inherited_ControlFlowFollowing(child, descendant, ctx);
// TODO it would be better to have a way to specify that the last statement inherits and not emit any code
// TODO supporting index from end (e.g. [^1]) would allow this to be split into two rules
= MethodInvocationExpression.Arguments[index].**.ControlFlowFollowing()
    => index < Arguments.Count - 1 ? ControlFlowSet.CreateNormal(Arguments[index + 1])
                                   : base.Inherited_ControlFlowFollowing(child, descendant, ctx);
= MethodInvocationExpression.ControlFlowNext;
= GetterInvocationExpression.ControlFlowNext;
= SetterInvocationExpression.Context.**.ControlFlowFollowing()
    => ControlFlowSet.CreateNormal(Value);
= SetterInvocationExpression.ControlFlowNext;
= FunctionReferenceInvocationExpression.Expression.**.ControlFlowFollowing()
    => !TempArguments.IsEmpty
        ? ControlFlowSet.CreateNormal(Arguments[0])
        : base.Inherited_ControlFlowFollowing(child, descendant, ctx);
// TODO it would be better to have a way to specify that the last statement inherits and not emit any code
// TODO supporting index from end (e.g. [^1]) would allow this to be split into two rules
= FunctionReferenceInvocationExpression.Arguments[index].**.ControlFlowFollowing()
    => index < Arguments.Count - 1 ? ControlFlowSet.CreateNormal(Arguments[index + 1])
                                   : base.Inherited_ControlFlowFollowing(child, descendant, ctx);
= FunctionReferenceInvocationExpression.ControlFlowNext;
= InitializerInvocationExpression.Initializer.**.ControlFlowFollowing()
    => !TempArguments.IsEmpty
        ? ControlFlowSet.CreateNormal(Arguments[0])
        : base.Inherited_ControlFlowFollowing(child, descendant, ctx);
// TODO it would be better to have a way to specify that the last statement inherits and not emit any code
// TODO supporting index from end (e.g. [^1]) would allow this to be split into two rules
= InitializerInvocationExpression.Arguments[index].**.ControlFlowFollowing()
    => index < Arguments.Count - 1
        ? ControlFlowSet.CreateNormal(Arguments[index + 1])
        : base.Inherited_ControlFlowFollowing(child, descendant, ctx);
= InitializerInvocationExpression.ControlFlowNext;
= NonInvocableInvocationExpression.Expression.**.ControlFlowFollowing()
    => !TempArguments.IsEmpty
        ? ControlFlowSet.CreateNormal(Arguments[0])
        : base.Inherited_ControlFlowFollowing(child, descendant, ctx);
// TODO it would be better to have a way to specify that the last statement inherits and not emit any code
// TODO supporting index from end (e.g. [^1]) would allow this to be split into two rules
= NonInvocableInvocationExpression.Arguments[index].**.ControlFlowFollowing()
    => index < Arguments.Count - 1
        ? ControlFlowSet.CreateNormal(Arguments[index + 1])
        : base.Inherited_ControlFlowFollowing(child, descendant, ctx);
= NonInvocableInvocationExpression.ControlFlowNext;

// ---------- Capability Expressions
= RecoveryExpression.ControlFlowNext;
= ImplicitTempMoveExpression.ControlFlowNext;
= PrepareToReturnExpression.ControlFlowNext;

// ---------- Async Expressions
= AwaitExpression.ControlFlowNext;
