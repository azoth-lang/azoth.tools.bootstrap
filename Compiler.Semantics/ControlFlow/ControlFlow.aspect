◊namespace Azoth.Tools.Bootstrap.Compiler.Semantics.ControlFlow;
◊name ControlFlowAspect;

// ↓ ⟳ ↑ ⮡ ↗↖ →*← ✎

// ---------- Definitions
↑ child eager ExecutableDefinition.Entry: Entry;
= ExecutableDefinition.Entry;
= ExecutableDefinition.*.**.ControlFlowEntry() => Entry;
↑ child eager ExecutableDefinition.Exit: Exit;
= ExecutableDefinition.Exit;
= ExecutableDefinition.*.**.ControlFlowExit() => Exit;
= ConcreteInvocableDefinition.Entry.ControlFlowFollowing();
= ConcreteInvocableDefinition.Body.**.ControlFlowFollowing()
    => ControlFlowSet.CreateNormal(Exit);

// ---------- Member Definitions
= FieldDefinition.Entry.ControlFlowFollowing()
    => ControlFlowSet.CreateNormal(Initializer ?? (IControlFlowNode)Exit);
= FieldDefinition.Initializer.ControlFlowFollowing()
    => ControlFlowSet.CreateNormal(Exit);

// ---------- Control Flow
↓ ControlFlow.ControlFlowEntry(): Entry;
↑ ControlFlow.ControlFlowNext: `ControlFlowSet`;
// →*← ControlFlow.ControlFlowPrevious: `ControlFlowSet`
//    root ExecutableDefinition
//    from `Dictionary<IControlFlowNode, ControlFlowKind>`
//    done ToControlFlowSet;
// = ControlFlow.→*.ControlFlow.ControlFlowPrevious for each ControlFlowNext.Keys;
= Exit.ControlFlowNext => ControlFlowSet.Empty;

/// <summary>
/// The control flow nodes that follow this node based on the context.
/// </summary>
/// <remarks>This is an inherited property.</remarks>
↓ ControlFlow.ControlFlowFollowing(): `ControlFlowSet`;

// ---------- Expressions
// Default for expressions is just whatever the context says is the following node.
= Expression.ControlFlowNext;
= BlockExpression.ControlFlowNext;
= NewObjectExpression.ControlFlowNext;
= UnsafeExpression.ControlFlowNext;

// ---------- Operator Expressions
= AssignmentExpression.ControlFlowNext;
= BinaryOperatorExpression.ControlFlowNext;
= UnaryOperatorExpression.ControlFlowNext;
= IdExpression.ControlFlowNext;
= ConversionExpression.ControlFlowNext;
= ImplicitConversionExpression.ControlFlowNext;
= PatternMatchExpression.ControlFlowNext;

// ---------- Control Flow Expressions
= IfExpression.ControlFlowNext;
= LoopExpression.ControlFlowNext;
= WhileExpression.ControlFlowNext;
= ForeachExpression.ControlFlowNext;
↓ ReturnExpression.ControlFlowExit(): Exit;
= ReturnExpression.ControlFlowNext;

// ---------- Invocation Expressions
= FunctionInvocationExpression.ControlFlowNext;
= MethodInvocationExpression.ControlFlowNext;
= GetterInvocationExpression.ControlFlowNext;
= SetterInvocationExpression.ControlFlowNext;
= FunctionReferenceInvocationExpression.ControlFlowNext;

// ---------- Name Expressions
= MethodGroupName.ControlFlowNext;
= FieldAccessExpression.ControlFlowNext;

// ---------- Capability Expressions
= RecoveryExpression.ControlFlowNext;
= ImplicitTempMoveExpression.ControlFlowNext;
= PrepareToReturnExpression.ControlFlowNext;

// ---------- Async Expressions
= AwaitExpression.ControlFlowNext;
