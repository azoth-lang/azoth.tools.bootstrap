◊namespace Azoth.Tools.Bootstrap.Compiler.Semantics;
◊root-supertype Semantic;
◊prefix I;
◊suffix Node;
◊class-suffix Node;
◊using System.Collections.Generic;
◊using System.Numerics;
◊using Azoth.Tools.Bootstrap.Compiler.Antetypes;
◊using Azoth.Tools.Bootstrap.Compiler.Core;
◊using Azoth.Tools.Bootstrap.Compiler.Core.Attributes;
◊using Azoth.Tools.Bootstrap.Compiler.Core.Code;
◊using Azoth.Tools.Bootstrap.Compiler.Core.Diagnostics;
◊using Azoth.Tools.Bootstrap.Compiler.Core.Operators;
◊using Azoth.Tools.Bootstrap.Compiler.Names;
◊using Azoth.Tools.Bootstrap.Compiler.Semantics.ControlFlow;
◊using Azoth.Tools.Bootstrap.Compiler.Semantics.DataFlow;
◊using Azoth.Tools.Bootstrap.Compiler.Semantics.Types;
◊using Azoth.Tools.Bootstrap.Compiler.Semantics.Types.Flow;
◊using Azoth.Tools.Bootstrap.Compiler.Symbols;
◊using Azoth.Tools.Bootstrap.Compiler.Syntax;
◊using Azoth.Tools.Bootstrap.Compiler.Types;
◊using Azoth.Tools.Bootstrap.Compiler.Types.Bare;
◊using Azoth.Tools.Bootstrap.Compiler.Types.Capabilities;
◊using Azoth.Tools.Bootstrap.Compiler.Types.ConstValue;
◊using Azoth.Tools.Bootstrap.Compiler.Types.Declared;
◊using Azoth.Tools.Bootstrap.Compiler.Types.Parameters;
◊using Azoth.Tools.Bootstrap.Compiler.Types.Pseudotypes;
◊using Azoth.Tools.Bootstrap.Framework;

// ---------- Parent
Semantic <: `ITreeNode` = Syntax:`ISyntax`?;
// Parent and Package types quoted so that is is not treated as a child node
Child <: `IChildTreeNode<ISemanticNode>` = Parent:`ISemanticNode`;

// ---------- Special Parts
BodyOrBlock <: Code;
ElseClause <: ControlFlow = Syntax:`ICodeSyntax` FlowStateAfter:`IFlowState`;
BlockOrResult <: ElseClause = Antetype:`IMaybeAntetype` Type:`DataType`;

// ---------- Bindings
Binding <: Code, BindingDeclaration = IsLentBinding:`bool`
    BindingAntetype:`IMaybeAntetype` BindingType:`Pseudotype`;
NamedBinding <: Binding, NamedBindingDeclaration =
    IsMutableBinding:`bool` BindingType:`DataType`;
LocalBinding <: NamedBinding = Syntax:`ILocalBindingSyntax`;
VariableBinding <: LocalBinding, DataFlow;

// ---------- Packages
Package <: PackageDeclaration = Syntax:`IPackageSyntax`
    References:{PackageReference} IntrinsicsReference:`IPackageReferenceNode`
    PackageDeclarations:`FixedDictionary<IdentifierName,IPackageDeclarationNode>`
    MainFacet:PackageFacet TestingFacet:PackageFacet Diagnostics:`DiagnosticCollection`
    PrimitivesDeclarations:{TypeDeclaration} EntryPoint:`IFunctionDefinitionNode`?;

PackageReference <: Child = Syntax:`IPackageReferenceSyntax`? SymbolNode:`IPackageSymbolNode`
    AliasOrName:`IdentifierName` PackageSymbols:`IPackageSymbols` IsTrusted:`bool`;

// ---------- Facets
PackageFacet <: PackageFacetDeclaration = Syntax:`IPackageSyntax`
    PackageName:`IdentifierName` PackageSymbol:`PackageSymbol`
    CompilationUnits:{CompilationUnit} Definitions:`IFixedSet<IPackageMemberDefinitionNode>`
    GlobalNamespace:NamespaceDefinition;

// TODO rename to FacetMemberDefinition
PackageMemberDefinition <: NamespaceBlockMemberDefinition, NamespaceMemberDefinition
    = Attributes:Attribute* AccessModifier:`AccessModifier`;

// ---------- Code Files
Code <: Child = Syntax:`ICodeSyntax`?;

CompilationUnit <: Code = Syntax:`ICompilationUnitSyntax` ContainingSymbol:`PackageSymbol`
    ImplicitNamespaceName:`NamespaceName` ImplicitNamespace:`INamespaceDefinitionNode` ImplicitNamespaceSymbol:`NamespaceSymbol`
    UsingDirectives:UsingDirective* Definitions:NamespaceBlockMemberDefinition*
    Diagnostics:`DiagnosticCollection`;

UsingDirective <: Code = Syntax:`IUsingDirectiveSyntax` Name:`NamespaceName`;

// ---------- Definitions
Definition <: Code, PackageFacetChildDeclaration = Syntax:`IDefinitionSyntax`? ContainingSymbol:`Symbol`;
InvocableDefinition <: Definition = Parameters:ConstructorOrInitializerParameter* Symbol:`InvocableSymbol`;
ExecutableDefinition <: Definition = Entry Exit
    VariableBindingsMap:`FixedDictionary<IVariableBindingNode,int>`;
ConcreteInvocableDefinition <: InvocableDefinition, ExecutableDefinition
    = Parameters:ConstructorOrInitializerParameter* Body?;
ConcreteFunctionInvocableDefinition <: ConcreteInvocableDefinition
    = Name:`IdentifierName` Parameters:NamedParameter* Return:Type? Body
    Type:`FunctionType` Symbol:`FunctionSymbol`;

// ---------- Namespace Definitions
NamespaceBlockDefinition <: NamespaceBlockMemberDefinition = Syntax:`INamespaceDefinitionSyntax`
    IsGlobalQualified:`bool` DeclaredNames:`NamespaceName`
    UsingDirectives:UsingDirective* Members:NamespaceBlockMemberDefinition*
    Definition:`INamespaceDefinitionNode`
    ContainingNamespace:`INamespaceDefinitionNode` ContainingSymbol:`NamespaceSymbol`
    Symbol:`NamespaceSymbol`;
NamespaceBlockMemberDefinition <: Definition;
NamespaceDefinition <: NamespaceMemberDefinition, NamespaceDeclaration
    = MemberNamespaces:NamespaceDefinition* PackageMembers:`IPackageMemberDefinitionNode`*
    Members:`INamespaceMemberDefinitionNode`*;
NamespaceMemberDefinition <: NamespaceMemberDeclaration;

// ---------- Function Definition
FunctionDefinition <: PackageMemberDefinition, FunctionDeclaration, ConcreteFunctionInvocableDefinition
    = Syntax:`IFunctionDefinitionSyntax` ContainingSymbol:`NamespaceSymbol`
    Attributes:Attribute* Name:`IdentifierName` Parameters:NamedParameter* Return:Type?
    Entry Body Exit Type:`FunctionType`;

// ---------- Type Definitions
TypeDefinition <: PackageMemberDefinition, AssociatedMemberDefinition, UserTypeDeclaration
    = Syntax:`ITypeDefinitionSyntax` IsConst:`bool` Name:`StandardName`
    DeclaredType:`IDeclaredUserType`
    GenericParameters:GenericParameter*
    SupertypeNames:StandardTypeName* Supertypes:{`BareReferenceType`}
    Members:{TypeMemberDefinition};
ClassDefinition <: TypeDefinition, ClassDeclaration = Syntax:`IClassDefinitionSyntax`
    Attributes:Attribute* IsAbstract:`bool` GenericParameters:GenericParameter*
    BaseTypeName:StandardTypeName? SupertypeNames:StandardTypeName*
    DeclaredType:`ObjectType`
    SourceMembers:`IClassMemberDefinitionNode`* Members:{ClassMemberDefinition}
    DefaultConstructor:DefaultConstructorDefinition?;
StructDefinition <: TypeDefinition, StructDeclaration = Syntax:`IStructDefinitionSyntax`
    Attributes:Attribute* GenericParameters:GenericParameter*
    SupertypeNames:StandardTypeName*
    DeclaredType:`StructType`
    SourceMembers:`IStructMemberDefinitionNode`* Members:{StructMemberDefinition}
    DefaultInitializer:DefaultInitializerDefinition?;
TraitDefinition <: TypeDefinition, TraitDeclaration = Syntax:`ITraitDefinitionSyntax`
    Attributes:Attribute* GenericParameters:GenericParameter*
    SupertypeNames:StandardTypeName*
    DeclaredType:`ObjectType`
    Members:{TraitMemberDefinition};

// ---------- Type Definition Parts
GenericParameter <: Code, GenericParameterDeclaration = Syntax:`IGenericParameterSyntax`
    Constraint:CapabilityConstraint Name:`IdentifierName` Independence:`TypeParameterIndependence` Variance:`TypeParameterVariance`
    Parameter:`GenericParameter` ContainingDeclaredType:`IDeclaredUserType` DeclaredType:`GenericParameterType`
    ContainingSymbol:`UserTypeSymbol` Members:{TypeMemberDefinition};

// ---------- Type Member Definitions (i.e. definitions that can be contained in a type)
TypeMemberDefinition <: Definition, TypeMemberDeclaration = Syntax:`ITypeMemberDefinitionSyntax`? AccessModifier:`AccessModifier`;
ClassMemberDefinition <: TypeMemberDefinition, ClassMemberDeclaration;
TraitMemberDefinition <: TypeMemberDefinition, TraitMemberDeclaration;
StructMemberDefinition <: TypeMemberDefinition, StructMemberDeclaration;
AlwaysTypeMemberDefinition <: TypeMemberDefinition = ContainingSymbol:`UserTypeSymbol`;
AssociatedMemberDefinition <: ClassMemberDefinition, TraitMemberDefinition, StructMemberDefinition, NamedDeclaration
    = Name:`StandardName`;

// ---------- Member Definitions
MethodDefinition <: AlwaysTypeMemberDefinition, ClassMemberDefinition, TraitMemberDefinition, InvocableDefinition, MethodDeclaration
    = Syntax:`IMethodDefinitionSyntax` Kind:`MethodKind` Name:`IdentifierName`
    SelfParameter:MethodSelfParameter Parameters:NamedParameter* Return:Type?;
// TODO getters and setters can be abstract too
AbstractMethodDefinition <: MethodDefinition, StandardMethodDeclaration = Syntax:`IAbstractMethodDefinitionSyntax`
    SelfParameter:MethodSelfParameter Parameters:NamedParameter* Return:Type?
    ContainingDeclaredType:`ObjectType`;
ConcreteMethodDefinition <: MethodDefinition, StructMemberDefinition, ConcreteInvocableDefinition
    = Syntax:`IConcreteMethodDefinitionSyntax` SelfParameter:MethodSelfParameter Parameters:NamedParameter* Return:Type?
    Entry Body Exit;
// TODO rename to Ordinary or Normal
StandardMethodDefinition <: ConcreteMethodDefinition, StandardMethodDeclaration
    = Syntax:`IStandardMethodDefinitionSyntax`
    SelfParameter:MethodSelfParameter Parameters:NamedParameter*
    Return:Type? Entry Body Exit;
GetterMethodDefinition <: ConcreteMethodDefinition, GetterMethodDeclaration = Syntax:`IGetterMethodDefinitionSyntax`
    SelfParameter:MethodSelfParameter Parameters:NamedParameter* Return:Type Entry Body Exit;
SetterMethodDefinition <: ConcreteMethodDefinition, SetterMethodDeclaration = Syntax:`ISetterMethodDefinitionSyntax`
    SelfParameter:MethodSelfParameter Parameters:NamedParameter* Return:Type? Entry Body Exit;
ConstructorDefinition <: ConcreteInvocableDefinition, AlwaysTypeMemberDefinition, ClassMemberDefinition, ConstructorDeclaration
    = Syntax:`IConstructorDefinitionSyntax`? Name:`IdentifierName`? Parameters:ConstructorOrInitializerParameter*;
DefaultConstructorDefinition <: ConstructorDefinition
    = Parameters:ConstructorOrInitializerParameter* Entry Body? Exit;
SourceConstructorDefinition <: ConstructorDefinition
    = Syntax:`IConstructorDefinitionSyntax`
    SelfParameter:ConstructorSelfParameter Parameters:ConstructorOrInitializerParameter* Entry Body:BlockBody Exit;
InitializerDefinition <: ConcreteInvocableDefinition, AlwaysTypeMemberDefinition, StructMemberDefinition, InitializerDeclaration
    = Syntax:`IInitializerDefinitionSyntax`? Name:`IdentifierName`? Parameters:ConstructorOrInitializerParameter*;
DefaultInitializerDefinition <: InitializerDefinition
    = Parameters:ConstructorOrInitializerParameter* Entry Body? Exit;
SourceInitializerDefinition <: InitializerDefinition
    = Syntax:`IInitializerDefinitionSyntax`
    SelfParameter:InitializerSelfParameter Parameters:ConstructorOrInitializerParameter* Entry Body:BlockBody Exit;
FieldDefinition <: AlwaysTypeMemberDefinition, ClassMemberDefinition, StructMemberDefinition, NamedBinding, FieldDeclaration, ExecutableDefinition
    = Syntax:`IFieldDefinitionSyntax` IsMutableBinding:`bool` Name:`IdentifierName` TypeNode:Type BindingAntetype:`IMaybeAntetype` BindingType:`DataType`
    Entry Initializer:AmbiguousExpression? CurrentInitializer:`IAmbiguousExpressionNode`? Exit;
AssociatedFunctionDefinition <: ConcreteFunctionInvocableDefinition, AlwaysTypeMemberDefinition, AssociatedMemberDefinition, AssociatedFunctionDeclaration
    = Syntax:`IAssociatedFunctionDefinitionSyntax` Name:`IdentifierName` Parameters:NamedParameter* Return:Type?
    Type:`FunctionType` Entry Body Exit;

// ---------- Attributes
Attribute <: Code = Syntax:`IAttributeSyntax` TypeName:StandardTypeName;

// ---------- Capabilities
CapabilityConstraint <: Code = Syntax:`ICapabilityConstraintSyntax` Constraint:`ICapabilityConstraint`;
CapabilitySet <: CapabilityConstraint = Syntax:`ICapabilitySetSyntax` Constraint:`CapabilitySet`;
Capability <: CapabilityConstraint = Syntax:`ICapabilitySyntax` Capability:`Capability`;

// ---------- Parameters
Parameter <: Code = Syntax:`IParameterSyntax` Name:`IdentifierName`? Unused:`bool`
    BindingAntetype:`IMaybeAntetype` BindingType:`Pseudotype` FlowStateAfter:`IFlowState`;
/// A non-self parameter that can be declared in a constructor
ConstructorOrInitializerParameter <: Parameter = Syntax:`IConstructorOrInitializerParameterSyntax`
    BindingType:`DataType` ParameterType:`ParameterType`;
NamedParameter <: ConstructorOrInitializerParameter, LocalBinding = Syntax:`INamedParameterSyntax`
    IsMutableBinding:`bool` IsLentBinding:`bool` Name:`IdentifierName`
    TypeNode:Type;
SelfParameter <: Parameter, Binding = Syntax:`ISelfParameterSyntax` IsLentBinding:`bool`
    ContainingTypeDefinition:`ITypeDefinitionNode` ContainingDeclaredType:`IDeclaredUserType`
    // TODO remove parameter symbols
    ParameterType:`SelfParameterType`;
ConstructorSelfParameter <: SelfParameter = Syntax:`IConstructorSelfParameterSyntax`
    IsLentBinding:`bool` Capability BindingType:`CapabilityType` ContainingDeclaredType:`ObjectType`;
InitializerSelfParameter <: SelfParameter = Syntax:`IInitializerSelfParameterSyntax`
    IsLentBinding:`bool` Capability BindingType:`CapabilityType` ContainingDeclaredType:`StructType`;
MethodSelfParameter <: SelfParameter = Syntax:`IMethodSelfParameterSyntax` IsLentBinding:`bool`
    Capability:CapabilityConstraint ;
FieldParameter <: ConstructorOrInitializerParameter = Syntax:`IFieldParameterSyntax` Name:`IdentifierName`
    ContainingTypeDefinition:`ITypeDefinitionNode` ReferencedField:`IFieldDefinitionNode`?;

// ---------- Function Parts
Body <: BodyOrBlock = FlowStateAfter:`IFlowState`;
BlockBody <: Body = Syntax:`IBlockBodySyntax` Statements:BodyStatement*;
ExpressionBody <: Body = Syntax:`IExpressionBodySyntax` ResultStatement
    ExpectedAntetype:`IMaybeExpressionAntetype`? ExpectedType:`DataType`?;

// ---------- Types
Type <: Code = Syntax:`ITypeSyntax` NamedAntetype:`IMaybeAntetype` NamedType:`DataType`;
// TODO start from generalized names in syntax and rewrite to type names
TypeName <: Type = Syntax:`ITypeNameSyntax` Name:`TypeName`
    NamedBareType:`BareType`?;
StandardTypeName <: TypeName = Syntax:`IStandardTypeNameSyntax` IsAttributeType:`bool` Name:`StandardName` ReferencedDeclaration:`ITypeDeclarationNode`?;
SimpleTypeName <: TypeName = Syntax:`ISimpleTypeNameSyntax`;
IdentifierTypeName <: StandardTypeName, SimpleTypeName = Syntax:`IIdentifierTypeNameSyntax` Name:`IdentifierName`;
SpecialTypeName <: SimpleTypeName = Syntax:`ISpecialTypeNameSyntax` Name:`SpecialTypeName`;
GenericTypeName <: StandardTypeName = Syntax:`IGenericTypeNameSyntax` Name:`GenericName` TypeArguments:Type*;
QualifiedTypeName <: TypeName = Syntax:`IQualifiedTypeNameSyntax` Context:TypeName QualifiedName:StandardTypeName;
OptionalType <: Type = Syntax:`IOptionalTypeSyntax` Referent:Type;
CapabilityType <: Type = Syntax:`ICapabilityTypeSyntax` Capability Referent:Type;
FunctionType <: Type = Syntax:`IFunctionTypeSyntax` Parameters:ParameterType* Return:Type;
ParameterType <: Code = Syntax:`IParameterTypeSyntax` IsLent:`bool` Referent:Type Parameter:`ParameterType`;
ViewpointType <: Type = Syntax:`IViewpointTypeSyntax` Referent:Type;
CapabilityViewpointType <: ViewpointType = Syntax:`ICapabilityViewpointTypeSyntax` Capability Referent:Type;
SelfViewpointType <: ViewpointType = Syntax:`ISelfViewpointTypeSyntax` Referent:Type NamedSelfType:`Pseudotype`?;

// ---------- Control Flow
ControlFlow <: Code = ControlFlowNext:`ControlFlowSet` ControlFlowPrevious:`ControlFlowSet`;
Entry <: DataFlow;
Exit <: DataFlow;

// ---------- Data Flow
DataFlow <: ControlFlow = DataFlowPrevious:`IFixedSet<IDataFlowNode>`
    DefinitelyAssigned:`BindingFlags<IVariableBindingNode>` DefinitelyUnassigned:`BindingFlags<IVariableBindingNode>`;

// ---------- Statements
Statement <: ControlFlow = Syntax:`IStatementSyntax` ResultAntetype:`IMaybeAntetype`?
    ResultType:`DataType`? FlowStateAfter:`IFlowState`;
ResultStatement <: Statement, BlockOrResult = Syntax:`IResultStatementSyntax`
    Expression:AmbiguousExpression CurrentExpression:`IAmbiguousExpressionNode`
    ExpectedAntetype:`IMaybeExpressionAntetype`? ExpectedType:`DataType`?;
BodyStatement <: Statement = Syntax:`IBodyStatementSyntax`;
VariableDeclarationStatement <: BodyStatement, VariableBinding = Syntax:`IVariableDeclarationStatementSyntax`
    IsMutableBinding:`bool` Name:`IdentifierName` Capability? Type?
    Initializer:AmbiguousExpression? CurrentInitializer:`IAmbiguousExpressionNode`?;
ExpressionStatement <: BodyStatement = Syntax:`IExpressionStatementSyntax`
    Expression:AmbiguousExpression CurrentExpression:`IAmbiguousExpressionNode`;

// ---------- Patterns
Pattern <: ControlFlow = Syntax:`IPatternSyntax` FlowStateAfter:`IFlowState`;
BindingContextPattern <: Pattern = Syntax:`IBindingContextPatternSyntax` IsMutableBinding:`bool` Pattern Type?;
OptionalOrBindingPattern <: Pattern = Syntax:`IOptionalOrBindingPatternSyntax`;
BindingPattern <: OptionalOrBindingPattern, VariableBinding = Syntax:`IBindingPatternSyntax`
    IsMutableBinding:`bool` Name:`IdentifierName`;
OptionalPattern <: OptionalOrBindingPattern = Syntax:`IOptionalPatternSyntax` Pattern:OptionalOrBindingPattern;

// ---------- Expressions
// TODO rename Ambiguous to `Unresolved` or `Unbound` because it is not ambiguous, it is just not bound
temp AmbiguousExpression <: Code = Syntax:`IExpressionSyntax`;
temp AmbiguousAssignableExpression <: AmbiguousExpression = Syntax:`IAssignableExpressionSyntax`;
Expression <: AmbiguousExpression, ControlFlow = Syntax:`IExpressionSyntax`
    ExpectedAntetype:`IMaybeExpressionAntetype`? Antetype:`IMaybeExpressionAntetype`
    ExpectedType:`DataType`? Type:`DataType` FlowStateAfter:`IFlowState`;
AssignableExpression <: Expression, AmbiguousAssignableExpression = Syntax:`IAssignableExpressionSyntax`;
BlockExpression <: Expression, BlockOrResult, BodyOrBlock = Syntax:`IBlockExpressionSyntax` Statements:Statement*
    Antetype:`IMaybeAntetype`;
NewObjectExpression <: InvocationExpression = Syntax:`INewObjectExpressionSyntax`
    ConstructingType:TypeName ConstructorName:`IdentifierName`? Arguments:AmbiguousExpression*
    ConstructingAntetype:`IMaybeAntetype` ReferencedConstructors:{`IConstructorDeclarationNode`}
    CompatibleConstructors:{`IConstructorDeclarationNode`} ReferencedConstructor:`IConstructorDeclarationNode`?
    ContextualizedOverload:`ContextualizedOverload`?;
UnsafeExpression <: Expression = Syntax:`IUnsafeExpressionSyntax` Expression:AmbiguousExpression;
NeverTypedExpression <: Expression = Type:`NeverType`;

// ---------- Literal Expressions
LiteralExpression <: Expression = Syntax:`ILiteralExpressionSyntax`;
BoolLiteralExpression <: LiteralExpression = Syntax:`IBoolLiteralExpressionSyntax` Value:`bool` Type:`BoolConstValueType`;
IntegerLiteralExpression <: LiteralExpression = Syntax:`IIntegerLiteralExpressionSyntax` Value:`BigInteger` Type:`IntegerConstValueType`;
NoneLiteralExpression <: LiteralExpression = Syntax:`INoneLiteralExpressionSyntax` Type:`OptionalType`;
StringLiteralExpression <: LiteralExpression = Syntax:`IStringLiteralExpressionSyntax`
    Value:`string` Type:`DataType`;

// ---------- Operator Expressions
AssignmentExpression <: Expression, DataFlow = Syntax:`IAssignmentExpressionSyntax`
    LeftOperand:AmbiguousAssignableExpression CurrentLeftOperand:`IAmbiguousAssignableExpressionNode`
    Operator:`AssignmentOperator`
    RightOperand:AmbiguousExpression CurrentRightOperand:`IAmbiguousExpressionNode`;
BinaryOperatorExpression <: Expression = Syntax:`IBinaryOperatorExpressionSyntax`
    LeftOperand:AmbiguousExpression
    Operator:`BinaryOperator`
    RightOperand:AmbiguousExpression
    NumericOperatorCommonAntetype:`IAntetype`?;
UnaryOperatorExpression <: Expression = Syntax:`IUnaryOperatorExpressionSyntax` Fixity:`UnaryOperatorFixity`
    Operator:`UnaryOperator` Operand:AmbiguousExpression;
IdExpression <: Expression = Syntax:`IIdExpressionSyntax` Referent:AmbiguousExpression;
ConversionExpression <: Expression = Syntax:`IConversionExpressionSyntax`
    Referent:AmbiguousExpression Operator:`ConversionOperator` ConvertToType:Type;
ImplicitConversionExpression <: Expression = Referent:Expression CurrentReferent:`IExpressionNode`
    Antetype:`SimpleAntetype`;
PatternMatchExpression <: Expression = Syntax:`IPatternMatchExpressionSyntax`
    Referent:AmbiguousExpression Pattern;

// ---------- Control Flow Expressions
IfExpression <: Expression, ElseClause = Syntax:`IIfExpressionSyntax`
    Condition:AmbiguousExpression ThenBlock:BlockOrResult ElseClause?;
LoopExpression <: Expression = Syntax:`ILoopExpressionSyntax` Block:BlockExpression;
WhileExpression <: Expression = Syntax:`IWhileExpressionSyntax`
    Condition:AmbiguousExpression Block:BlockExpression;
ForeachExpression <: Expression, VariableBinding = Syntax:`IForeachExpressionSyntax`
    IsMutableBinding:`bool` VariableName:`IdentifierName` InExpression:AmbiguousExpression
    DeclaredType:Type? Block:BlockExpression
    ReferencedIterableDeclaration:`ITypeDeclarationNode`? ReferencedIterateMethod:`IStandardMethodDeclarationNode`?
    IteratorAntetype:`IMaybeExpressionAntetype` IteratorType:`DataType`
    ReferencedIteratorDeclaration:`ITypeDeclarationNode`? ReferencedNextMethod:`IStandardMethodDeclarationNode`?
    IteratedAntetype:`IMaybeAntetype` IteratedType:`DataType`
    FlowStateBeforeBlock:`IFlowState`;
BreakExpression <: NeverTypedExpression = Syntax:`IBreakExpressionSyntax`
    Value:AmbiguousExpression?;
NextExpression <: NeverTypedExpression = Syntax:`INextExpressionSyntax`;
ReturnExpression <: NeverTypedExpression = Syntax:`IReturnExpressionSyntax`
    Value:AmbiguousExpression? CurrentValue:`IAmbiguousExpressionNode`?;

// ---------- Invocation Expressions
temp UnresolvedInvocationExpression <: AmbiguousExpression = Syntax:`IInvocationExpressionSyntax`
    Expression:AmbiguousExpression CurrentExpression:`IAmbiguousExpressionNode`
    Arguments:AmbiguousExpression* CurrentArguments:`IAmbiguousExpressionNode`*;
InvocationExpression <: Expression =
    TempAllArguments:`IEnumerable<IAmbiguousExpressionNode>` AllArguments:`IEnumerable<IExpressionNode?>`;
FunctionInvocationExpression <: InvocationExpression = Syntax:`IInvocationExpressionSyntax`
    FunctionGroup:FunctionGroupName Arguments:AmbiguousExpression*
    CompatibleDeclarations:{`IFunctionLikeDeclarationNode`} ReferencedDeclaration:`IFunctionLikeDeclarationNode`?
    ContextualizedOverload:`ContextualizedOverload`?;
MethodInvocationExpression <: InvocationExpression = Syntax:`IInvocationExpressionSyntax`
    MethodGroup:MethodGroupName Arguments:AmbiguousExpression* CurrentArguments:`IAmbiguousExpressionNode`*
    CompatibleDeclarations:{`IStandardMethodDeclarationNode`} ReferencedDeclaration:`IStandardMethodDeclarationNode`?
    ContextualizedOverload:`ContextualizedOverload`?;
GetterInvocationExpression <: InvocationExpression = Syntax:`IMemberAccessExpressionSyntax`
    Context:Expression PropertyName:`StandardName`
    ReferencedPropertyAccessors:{`IPropertyAccessorDeclarationNode`} ReferencedDeclaration:`IGetterMethodDeclarationNode`?
    ContextualizedOverload:`ContextualizedOverload`?;
SetterInvocationExpression <: InvocationExpression = Syntax:`IAssignmentExpressionSyntax`
    Context:Expression PropertyName:`StandardName` Value:AmbiguousExpression
    ReferencedPropertyAccessors:{`IPropertyAccessorDeclarationNode`} ReferencedDeclaration:`ISetterMethodDeclarationNode`?
    ContextualizedOverload:`ContextualizedOverload`?;
FunctionReferenceInvocationExpression <: InvocationExpression = Syntax:`IInvocationExpressionSyntax`
    Expression:Expression Arguments:AmbiguousExpression*
    FunctionAntetype:`FunctionAntetype` FunctionType:`FunctionType`;
InitializerInvocationExpression <: InvocationExpression = Syntax:`IInvocationExpressionSyntax`
    InitializerGroup:InitializerGroupName Arguments:AmbiguousExpression*
    CompatibleDeclarations:{`IInitializerDeclarationNode`} ReferencedDeclaration:`IInitializerDeclarationNode`?
    ContextualizedOverload:`ContextualizedOverload`?;
UnknownInvocationExpression <: Expression = Syntax:`IInvocationExpressionSyntax`
    Expression:AmbiguousExpression Arguments:AmbiguousExpression*;

// ---------- Ambiguous Name Expressions
// TODO consider renaming to `UnboundNameExpression` because the final tree could have a bound name that is still ambigous (e.g. could not determine what it refers to)
temp AmbiguousNameExpression <: AmbiguousExpression = Syntax:`INameExpressionSyntax`;
temp AmbiguousName <: AmbiguousNameExpression;
temp UnresolvedSimpleName <: AmbiguousName = Syntax:`ISimpleNameSyntax`;
temp StandardNameExpression <: AmbiguousName = Syntax:`IStandardNameExpressionSyntax`
    Name:`StandardName` ReferencedDeclarations:`IDeclarationNode`*;
temp IdentifierNameExpression <: AmbiguousName, StandardNameExpression, UnresolvedSimpleName, AmbiguousAssignableExpression
    = Syntax:`IIdentifierNameExpressionSyntax` Name:`IdentifierName`;
temp GenericNameExpression <: AmbiguousName, StandardNameExpression
    = Syntax:`IGenericNameExpressionSyntax` Name:`GenericName` TypeArguments:Type*;
temp MemberAccessExpression <: AmbiguousName, AmbiguousAssignableExpression
    = Syntax:`IMemberAccessExpressionSyntax` Context:AmbiguousExpression MemberName:`StandardName` TypeArguments:Type*;
temp PropertyName <: AmbiguousName, AmbiguousAssignableExpression
    = Syntax:`IMemberAccessExpressionSyntax` Context:Expression PropertyName:`StandardName`
    ReferencedPropertyAccessors:{`IPropertyAccessorDeclarationNode`};

// ---------- Name Expressions
NameExpression <: Expression, AmbiguousNameExpression = Syntax:`INameExpressionSyntax`;
LocalBindingNameExpression <: NameExpression = ReferencedDefinition:`IBindingNode`?;
SimpleNameExpression <: NameExpression, UnresolvedSimpleName;
// TODO Name <: NameExpression
NamespaceName <: NameExpression = Type:`UnknownType` ReferencedDeclarations:`INamespaceDeclarationNode`*;
UnqualifiedNamespaceName <: NamespaceName = Syntax:`IIdentifierNameExpressionSyntax` Name:`IdentifierName`;
QualifiedNamespaceName <: NamespaceName = Syntax:`IMemberAccessExpressionSyntax` Context:NamespaceName Name:`IdentifierName`;
FunctionGroupName <: NameExpression = Context:NameExpression? FunctionName:`StandardName` TypeArguments:Type*
    ReferencedDeclarations:{`IFunctionLikeDeclarationNode`};
FunctionName <: NameExpression = FunctionGroup:FunctionGroupName FunctionName:`StandardName` TypeArguments:`ITypeNode`*
    ReferencedDeclaration:`IFunctionLikeDeclarationNode`?;
MethodGroupName <: NameExpression = Syntax:`IMemberAccessExpressionSyntax`
    Context:Expression CurrentContext:`IExpressionNode` MethodName:`StandardName` TypeArguments:Type*
    ReferencedDeclarations:{`IStandardMethodDeclarationNode`};
FieldAccessExpression <: NameExpression, AssignableExpression = Syntax:`IMemberAccessExpressionSyntax`
    Context:Expression FieldName:`IdentifierName` ReferencedDeclaration:`IFieldDeclarationNode`;
VariableNameExpression <: LocalBindingNameExpression, AssignableExpression, SimpleNameExpression
    = Syntax:`IIdentifierNameExpressionSyntax` Name:`IdentifierName` ReferencedDefinition:`ILocalBindingNode`
    DataFlowPrevious:`IFixedSet<IDataFlowNode>`;
TypeNameExpression <: NameExpression = Syntax:`INameExpressionSyntax`
    Name:`StandardName` TypeArguments:Type* ReferencedDeclaration:`ITypeDeclarationNode`
    NamedAntetype:`IMaybeAntetype` NamedBareType:`BareType`?;
StandardTypeNameExpression <: TypeNameExpression = Syntax:`IStandardNameExpressionSyntax` TypeArguments:Type*;
QualifiedTypeNameExpression <: TypeNameExpression = Syntax:`IMemberAccessExpressionSyntax`
    Context:NamespaceName TypeArguments:Type*;
InitializerGroupName <: NameExpression = Syntax:`INameExpressionSyntax`
    Context:TypeNameExpression InitializerName:`StandardName`? InitializingAntetype:`IMaybeAntetype`
    ReferencedDeclarations:{`IInitializerDeclarationNode`};
// TODO merge with SpecialTypeName and keep the name "SpecialTypeName" because it really isn't an expression
SpecialTypeNameExpression <: NameExpression
    = Syntax:`ISpecialTypeNameExpressionSyntax` Name:`SpecialTypeName` ReferencedSymbol:`TypeSymbol` Type:`UnknownType`;
InstanceExpression <: NameExpression, SimpleNameExpression = Syntax:`IInstanceExpressionSyntax`; // i.e. `self` or `base`
// TODO BaseExpression <: InstanceExpression
SelfExpression <: InstanceExpression, LocalBindingNameExpression
    = Syntax:`ISelfExpressionSyntax` IsImplicit:`bool` Pseudotype:`Pseudotype`
    ReferencedDefinition:`ISelfParameterNode`?;
MissingNameExpression <: NameExpression, SimpleNameExpression, AssignableExpression
    = Syntax:`IMissingNameSyntax` Type:`UnknownType`;
UnknownNameExpression <: NameExpression = Syntax:`INameExpressionSyntax` Type:`UnknownType`;
UnknownStandardNameExpression <: UnknownNameExpression
    = Syntax:`IStandardNameExpressionSyntax` Name:`StandardName` ReferencedDeclarations:{`IDeclarationNode`};
UnknownIdentifierNameExpression <: UnknownStandardNameExpression, SimpleNameExpression, AssignableExpression
    = Syntax:`IIdentifierNameExpressionSyntax` Name:`IdentifierName`;
UnknownGenericNameExpression <: UnknownStandardNameExpression
    = Syntax:`IGenericNameExpressionSyntax` Name:`GenericName` TypeArguments:Type*;
UnknownMemberAccessExpression <: UnknownNameExpression, AssignableExpression
    = Syntax:`IMemberAccessExpressionSyntax` Context:Expression MemberName:`StandardName` TypeArguments:Type*
    ReferencedMembers:{`IDeclarationNode`};

// ---------- Capability Expressions
temp AmbiguousMoveExpression <: AmbiguousExpression = Syntax:`IMoveExpressionSyntax` Referent:UnresolvedSimpleName;
RecoveryExpression <: Expression = IsImplicit:`bool`;
MoveExpression <: RecoveryExpression = Referent:Expression;
MoveVariableExpression <: MoveExpression = Referent:LocalBindingNameExpression;
MoveValueExpression <: MoveExpression = Referent:Expression;
ImplicitTempMoveExpression <: Expression = Referent:Expression;
temp AmbiguousFreezeExpression <: AmbiguousExpression = Syntax:`IFreezeExpressionSyntax` Referent:UnresolvedSimpleName;
FreezeExpression <: RecoveryExpression = Referent:Expression IsTemporary:`bool`;
FreezeVariableExpression <: FreezeExpression = Referent:LocalBindingNameExpression;
FreezeValueExpression <: FreezeExpression = Referent:Expression;
PrepareToReturnExpression <: Expression = Value:Expression CurrentValue:`IExpressionNode`;

// ---------- Async Expressions
AsyncBlockExpression <: Expression = Syntax:`IAsyncBlockExpressionSyntax` Block:BlockExpression;
AsyncStartExpression <: Expression = Syntax:`IAsyncStartExpressionSyntax` Scheduled:`bool`
    Expression:AmbiguousExpression;
AwaitExpression <: Expression = Syntax:`IAwaitExpressionSyntax`
    Expression:AmbiguousExpression;


// -------------------------------------------------------------------------------------------------
// Declarations
// -------------------------------------------------------------------------------------------------
// Declarations are the abstractions of both definitions and symbols. They are used to represent
// what a name can refer to.
// -------------------------------------------------------------------------------------------------
// TODO move into separate aspect

Declaration;
ChildDeclaration <: Declaration, Child;
NamedDeclaration <: ChildDeclaration = Name:`TypeName`;
SymbolDeclaration <: Declaration = Symbol:`Symbol`;
InvocableDeclaration <: SymbolDeclaration, ChildDeclaration = Symbol:`InvocableSymbol`;

// ---------- Bindings
BindingDeclaration <: ChildDeclaration;
NamedBindingDeclaration <: BindingDeclaration, NamedDeclaration = Name:`IdentifierName`;

// ---------- Packages
PackageDeclaration <: SymbolDeclaration = AliasOrName:`IdentifierName`? Name:`IdentifierName` Symbol:`PackageSymbol`
    MainFacet:PackageFacetDeclaration TestingFacet:PackageFacetDeclaration;

PackageMemberDeclaration <: NamespaceMemberDeclaration;

// ---------- Facets
/// Facets separate the testing and non-testing aspects of a package. They do no have their own symbol.
PackageFacetDeclaration <: ChildDeclaration, SymbolDeclaration
    = PackageAliasOrName:`IdentifierName`? PackageName:`IdentifierName`
    Symbol:`PackageSymbol` GlobalNamespace:NamespaceDeclaration;

PackageFacetChildDeclaration <: ChildDeclaration = Name:`StandardName`?;

// ---------- Namespace Declarations
NamespaceDeclaration <: NamespaceMemberDeclaration = Name:`IdentifierName` Symbol:`NamespaceSymbol`
    Members:`INamespaceMemberDeclarationNode`* NestedMembers:`INamespaceMemberDeclarationNode`*;
NamespaceMemberDeclaration <: PackageFacetChildDeclaration, NamedDeclaration, SymbolDeclaration
    = Name:`StandardName`;

// ---------- Function Declaration
// TODO better name for this or perhaps just merge AssociatedFunctionDeclaration into FunctionDeclaration
FunctionLikeDeclaration <: NamedDeclaration, InvocableDeclaration = Symbol:`FunctionSymbol` Type:`FunctionType`;
FunctionDeclaration <: PackageMemberDeclaration, FunctionLikeDeclaration;

// ---------- Type Declarations
PrimitiveTypeDeclaration <: TypeDeclaration = Name:`SpecialTypeName` Members:{TypeMemberDeclaration};
UserTypeDeclaration <: PackageMemberDeclaration, ClassMemberDeclaration, TraitMemberDeclaration, StructMemberDeclaration, TypeDeclaration, NamedDeclaration
    = Name:`StandardName` GenericParameters:GenericParameterDeclaration* Symbol:`UserTypeSymbol` Members:{TypeMemberDeclaration} InclusiveMembers:{`ITypeMemberDeclarationNode`};
ClassDeclaration <: UserTypeDeclaration = Members:{ClassMemberDeclaration} InclusiveMembers:{`IClassMemberDeclarationNode`};
StructDeclaration <: UserTypeDeclaration = Members:{StructMemberDeclaration} InclusiveMembers:{`IStructMemberDeclarationNode`};
TraitDeclaration <: UserTypeDeclaration = Members:{TraitMemberDeclaration} InclusiveMembers:{`ITraitMemberDeclarationNode`};

// ---------- Type Declaration Parts
GenericParameterDeclaration <: TypeDeclaration, AssociatedMemberDeclaration
    = Name:`IdentifierName` Symbol:`GenericParameterTypeSymbol` Members:{TypeMemberDeclaration};

// ---------- Type Member Declarations (i.e. declarations that can be contained in a type)
TypeMemberDeclaration <: PackageFacetChildDeclaration, SymbolDeclaration;
ClassMemberDeclaration <: TypeMemberDeclaration;
TraitMemberDeclaration <: TypeMemberDeclaration;
StructMemberDeclaration <: TypeMemberDeclaration;
AssociatedMemberDeclaration <: ClassMemberDeclaration, TraitMemberDeclaration, StructMemberDeclaration, SymbolDeclaration;
InstanceMemberDeclaration <: TypeMemberDeclaration;

// ---------- Member Declarations
MethodDeclaration <: ClassMemberDeclaration, TraitMemberDeclaration, StructMemberDeclaration, NamedDeclaration, InstanceMemberDeclaration, InvocableDeclaration
    = Name:`IdentifierName` Symbol:`MethodSymbol`;
StandardMethodDeclaration <: MethodDeclaration = Arity:`int` MethodGroupType:`FunctionType`;
PropertyAccessorDeclaration <: MethodDeclaration;
GetterMethodDeclaration <: PropertyAccessorDeclaration;
SetterMethodDeclaration <: PropertyAccessorDeclaration;
ConstructorDeclaration <: ClassMemberDeclaration, AssociatedMemberDeclaration, InvocableDeclaration
    = Name:`IdentifierName`? Symbol:`ConstructorSymbol`;
InitializerDeclaration <: StructMemberDeclaration, AssociatedMemberDeclaration, InvocableDeclaration
    = Name:`IdentifierName`? Symbol:`InitializerSymbol`;
FieldDeclaration <: NamedDeclaration, ClassMemberDeclaration, StructMemberDeclaration, InstanceMemberDeclaration
    = Name:`IdentifierName` BindingType:`DataType` Symbol:`FieldSymbol`;
AssociatedFunctionDeclaration <: AssociatedMemberDeclaration, FunctionLikeDeclaration, InvocableDeclaration
    = Name:`StandardName`;

// ---------- Can be Referenced by Type Name
TypeDeclaration <: NamedDeclaration, SymbolDeclaration
    = Symbol:`TypeSymbol` Supertypes:{`BareReferenceType`}
    Members:{TypeMemberDeclaration} InclusiveMembers:{`ITypeMemberDeclarationNode`};

// -------------------------------------------------------------------------------------------------
// Symbol Nodes
// -------------------------------------------------------------------------------------------------
// Implementations of declarations that are derived from symbols.
// -------------------------------------------------------------------------------------------------
// TODO move into separate aspect

// ---------- Packages
PackageSymbol <: PackageDeclaration = MainFacet:PackageFacetDeclaration TestingFacet:PackageFacetDeclaration;

// ---------- Facets
// Facets separate the testing and non-testing aspects of a package. They do no have their own symbol.
PackageFacetSymbol <: PackageFacetDeclaration = GlobalNamespace:NamespaceDeclaration;

// ---------- Namespace Declarations
NamespaceSymbol <: NamespaceDeclaration = Members:NamespaceMemberDeclaration*;

// ---------- Function Declaration
FunctionSymbol <: FunctionDeclaration;

// ---------- Type Declarations
PrimitiveTypeSymbol <: PrimitiveTypeDeclaration = Members:{TypeMemberDeclaration};
UserTypeSymbol <: UserTypeDeclaration = GenericParameters:GenericParameterDeclaration* Members:{TypeMemberDeclaration};
ClassSymbol <: ClassDeclaration = GenericParameters:GenericParameterDeclaration* Members:{ClassMemberDeclaration};
StructSymbol <: StructDeclaration = GenericParameters:GenericParameterDeclaration* Members:{StructMemberDeclaration};
TraitSymbol <: TraitDeclaration = GenericParameters:GenericParameterDeclaration* Members:{TraitMemberDeclaration};

// ---------- Type Declaration Parts
GenericParameterSymbol <: GenericParameterDeclaration = Members:{TypeMemberDeclaration};

// ---------- Member Declarations
MethodSymbol <: MethodDeclaration;
StandardMethodSymbol <: MethodSymbol, StandardMethodDeclaration;
GetterMethodSymbol <: MethodSymbol, GetterMethodDeclaration;
SetterMethodSymbol <: MethodSymbol, SetterMethodDeclaration;
ConstructorSymbol <: ConstructorDeclaration;
InitializerSymbol <: InitializerDeclaration;
FieldSymbol <: FieldDeclaration;
AssociatedFunctionSymbol <: AssociatedFunctionDeclaration;
