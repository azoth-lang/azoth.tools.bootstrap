◊namespace Azoth.Tools.Bootstrap.Compiler.Semantics;
◊root-supertype Semantic;
◊prefix I;
◊suffix Node;
◊class-suffix Node;
◊using System.Collections.Generic;
◊using System.Numerics;
◊using Azoth.Tools.Bootstrap.Compiler.Core;
◊using Azoth.Tools.Bootstrap.Compiler.Core.Attributes;
◊using Azoth.Tools.Bootstrap.Compiler.Core.Code;
◊using Azoth.Tools.Bootstrap.Compiler.Core.Operators;
◊using Azoth.Tools.Bootstrap.Compiler.Names;
◊using Azoth.Tools.Bootstrap.Compiler.Semantics.ControlFlow;
◊using Azoth.Tools.Bootstrap.Compiler.Semantics.DataFlow;
◊using Azoth.Tools.Bootstrap.Compiler.Semantics.Types;
◊using Azoth.Tools.Bootstrap.Compiler.Symbols;
◊using Azoth.Tools.Bootstrap.Compiler.Symbols.Trees;
◊using Azoth.Tools.Bootstrap.Compiler.Syntax;
◊using Azoth.Tools.Bootstrap.Compiler.Types.Capabilities;
◊using Azoth.Tools.Bootstrap.Compiler.Types.Plain;
◊using Azoth.Tools.Bootstrap.Framework;

// ---------- Parent
Semantic <: `ITreeNode` = Syntax:`ISyntax`?;
Child <: `IChildTreeNode<ISemanticNode>`;

// ---------- Special Parts
BodyOrBlock <: Code;
ElseClause <: Code, ControlFlow = Syntax:`ICodeSyntax`;
BlockOrResult <: ElseClause;

// ---------- Bindings
Binding <: Code, BindingDeclaration;
NamedBinding <: Binding, NamedBindingDeclaration;
LocalBinding <: NamedBinding = Syntax:`ILocalBindingSyntax`;
VariableBinding <: LocalBinding, DataFlow;

// ---------- Facets
PackageFacet <: PackageFacetDeclaration = Syntax:`IPackageFacetSyntax`
    CompilationUnits:{CompilationUnit} MainFacetReference:PackageMainFacetReference? References:{OrdinaryPackageFacetReference};

PackageFacetReference <: Child = Syntax:`IPackageReferenceSyntax`?;
OrdinaryPackageFacetReference <: PackageFacetReference
    = Syntax:`IPackageReferenceSyntax` Facet:`FacetKind` Symbols:`FixedSymbolTree`;
PackageMainFacetReference <: PackageFacetReference = AliasOrName:`IdentifierName` Symbols:`FixedSymbolTree`;
IntrinsicsPackageFacetReference <: PackageFacetReference;

FacetMemberDefinition <: NamespaceBlockMemberDefinition, NamespaceMemberDefinition
    = Attributes:Attribute*;

// ---------- Code Files
Code <: Child = Syntax:`ICodeSyntax`;

CompilationUnit <: Code = Syntax:`ICompilationUnitSyntax`
    ImportDirectives:ImportDirective* Definitions:NamespaceBlockMemberDefinition*;

ImportDirective <: Code = Syntax:`IImportDirectiveSyntax`;

// ---------- Definitions
Definition <: PackageFacetChildDeclaration = Syntax:`IDefinitionSyntax`?;
ExecutableDefinition <: Definition, SymbolDeclaration = /Entry/ /Exit/;
InvocableDefinition <: ExecutableDefinition, InvocableDeclaration
    = Name:`IdentifierName`? Parameters:InitializerParameter* /Entry/ Body? /Exit/;
FunctionInvocableDefinition <: Code, InvocableDefinition, FunctionInvocableDeclaration
    = Syntax:`IInvocableDefinitionSyntax` Name:`IdentifierName` Parameters:NamedParameter* Return:Type?;

// ---------- Namespace Definitions
NamespaceBlockDefinition <: NamespaceBlockMemberDefinition = Syntax:`INamespaceBlockDefinitionSyntax`
    ImportDirectives:ImportDirective* Members:NamespaceBlockMemberDefinition*;
NamespaceBlockMemberDefinition <: Definition;
NamespaceDefinition <: NamespaceMemberDefinition, NamespaceDeclaration
    = NamespaceName:`NamespaceName` MemberNamespaces:NamespaceDefinition* PackageMembers:`IFacetMemberDefinitionNode`*;
NamespaceMemberDefinition <: NamespaceMemberDeclaration;

// ---------- Function Definition
FunctionDefinition <: FacetMemberDefinition, FunctionDeclaration, FunctionInvocableDefinition
    = Syntax:`IFunctionDefinitionSyntax` /Attributes/ /Parameters/ /Return/ /Entry/ Body /Exit/;

// ---------- Type Definitions
TypeDefinition <: Code, FacetMemberDefinition, AssociatedMemberDefinition, OrdinaryTypeDeclaration
    = Syntax:`ITypeDefinitionSyntax`
    /Attributes/ GenericParameters:GenericParameter* SupertypeNames:TypeName*;
ClassDefinition <: Code, TypeDefinition, ClassDeclaration = Syntax:`IClassDefinitionSyntax`
    /Attributes/ /GenericParameters/ BaseTypeName:TypeName? /SupertypeNames/
    SourceMembers:TypeMemberDefinition*;
StructDefinition <: Code, TypeDefinition, StructDeclaration = Syntax:`IStructDefinitionSyntax`
    /Attributes/ /GenericParameters/ /SupertypeNames/
    SourceMembers:TypeMemberDefinition*;
ValueDefinition <: Code, TypeDefinition, ValueDeclaration = Syntax:`IValueDefinitionSyntax`
    /Attributes/ /GenericParameters/ /SupertypeNames/
    SourceMembers:TypeMemberDefinition*;
TraitDefinition <: Code, TypeDefinition, TraitDeclaration = Syntax:`ITraitDefinitionSyntax`
    /Attributes/ /GenericParameters/ /SupertypeNames/
    Members:{TypeMemberDefinition};

// ---------- Type Definition Parts
GenericParameter <: Code, GenericParameterDeclaration
    = Syntax:`IGenericParameterSyntax` Constraint:CapabilityConstraint;
ImplicitSelfDefinition <: ImplicitSelfDeclaration;

// ---------- Type Member Definitions (i.e. definitions that can be contained in a type)
TypeMemberDefinition <: Definition, TypeMemberDeclaration
    = Syntax:`IMemberDefinitionSyntax`? Attributes:Attribute*;
AlwaysTypeMemberDefinition <: TypeMemberDefinition, AlwaysTypeMemberDeclaration;
AssociatedMemberDefinition <: TypeMemberDefinition, NamedDeclaration, AssociatedMemberDeclaration
    = Name:`OrdinaryName`;

// ---------- Member Definitions
MethodDefinition <: Code, AlwaysTypeMemberDefinition, InvocableDefinition, MethodDeclaration
    = Syntax:`IMethodDefinitionSyntax` /Attributes/
    SelfParameter:MethodSelfParameter Parameters:NamedParameter* Return:Type? Body?;
OrdinaryMethodDefinition <: MethodDefinition, OrdinaryMethodDeclaration
    = Syntax:`IOrdinaryMethodDefinitionSyntax` /Attributes/ /SelfParameter/ /Parameters/ /Return/ /Entry/ /Body/ /Exit/;
GetterMethodDefinition <: MethodDefinition, GetterMethodDeclaration
    = Syntax:`IGetterMethodDefinitionSyntax` /Attributes/ /SelfParameter/ /Parameters/ Return:Type /Entry/ /Body/ /Exit/;
SetterMethodDefinition <: MethodDefinition, SetterMethodDeclaration
    = Syntax:`ISetterMethodDefinitionSyntax` /Attributes/ /SelfParameter/ /Parameters/ /Return/ /Entry/ /Body/ /Exit/;
InitializerDefinition <: InvocableDefinition, AlwaysTypeMemberDefinition, InitializerDeclaration
    = Syntax:`IInitializerDefinitionSyntax`? /Attributes/ Parameters:InitializerParameter*;
DefaultInitializerDefinition <: InitializerDefinition;
OrdinaryInitializerDefinition <: Code, InitializerDefinition
    = Syntax:`IInitializerDefinitionSyntax` /Attributes/
    SelfParameter:InitializerSelfParameter /Parameters/ /Entry/ Body:BlockBody /Exit/;
FieldDefinition <: Code, AlwaysTypeMemberDefinition, NamedBinding, FieldDeclaration, ExecutableDefinition
    = Syntax:`IFieldDefinitionSyntax` /Attributes/ TypeNode:Type /Entry/ Initializer:AmbiguousExpression? /Exit/;
AssociatedFunctionDefinition <: FunctionInvocableDefinition, AlwaysTypeMemberDefinition, AssociatedMemberDefinition, AssociatedFunctionDeclaration
    = Syntax:`IAssociatedFunctionDefinitionSyntax` /Attributes/ /Parameters/ /Return/ /Entry/ /Body/ /Exit/;
AssociatedTypeDefinition <: AssociatedMemberDefinition, AlwaysTypeMemberDefinition, AssociatedTypeDeclaration
    = Syntax:`IAssociatedTypeDefinitionSyntax` /Attributes/ Initializer:Type?;

// ---------- Attributes
Attribute <: Code = Syntax:`IAttributeSyntax` TypeName:TypeName;

// ---------- Capabilities
CapabilityConstraint <: Code = Syntax:`ICapabilityConstraintSyntax`;
CapabilitySet <: CapabilityConstraint = Syntax:`ICapabilitySetSyntax`;
Capability <: CapabilityConstraint = Syntax:`ICapabilitySyntax`;

// ---------- Parameters
Parameter <: Code = Syntax:`IParameterSyntax`;
/// A non-self parameter that can be declared in an initalizer
InitializerParameter <: Parameter = Syntax:`IInitializerParameterSyntax`;
NamedParameter <: InitializerParameter, LocalBinding
    = Syntax:`INamedParameterSyntax` TypeNode:Type;
SelfParameter <: Parameter, Binding = Syntax:`ISelfParameterSyntax`;
InitializerSelfParameter <: SelfParameter = Syntax:`IInitializerSelfParameterSyntax` Capability;
MethodSelfParameter <: SelfParameter = Syntax:`IMethodSelfParameterSyntax` Constraint:CapabilityConstraint;
FieldParameter <: InitializerParameter = Syntax:`IFieldParameterSyntax`;

// ---------- Function Parts
Body <: BodyOrBlock;
BlockBody <: Body = Syntax:`IBlockBodySyntax` Statements:BodyStatement*;
ExpressionBody <: Body = Syntax:`IExpressionBodySyntax` ResultStatement;

// ---------- Types
Type <: Code = Syntax:`ITypeSyntax`;
OptionalType <: Type = Syntax:`IOptionalTypeSyntax` Referent:Type;
CapabilityType <: Type = Syntax:`ICapabilityTypeSyntax` Capability Referent:Type;
CapabilitySetType <: Type = Syntax:`ICapabilitySetTypeSyntax` CapabilitySet Referent:Type;
FunctionType <: Type = Syntax:`IFunctionTypeSyntax` Parameters:ParameterType* Return:Type;
ParameterType <: Code = Syntax:`IParameterTypeSyntax` Referent:Type;
ViewpointType <: Type = Syntax:`IViewpointTypeSyntax` Referent:Type;
CapabilityViewpointType <: ViewpointType = Syntax:`ICapabilityViewpointTypeSyntax` Capability Referent:Type;
SelfViewpointType <: ViewpointType = Syntax:`ISelfViewpointTypeSyntax` Referent:Type;
RefType <: Type = Syntax:`IRefTypeSyntax` Referent:Type;

// ---------- Control Flow
ControlFlow <: Child;
Entry <: DataFlow;
Exit <: DataFlow;

// ---------- Data Flow
DataFlow <: ControlFlow;

// ---------- Statements
Statement <: Code, ControlFlow = Syntax:`IStatementSyntax`;
ResultStatement <: Statement, BlockOrResult
    = Syntax:`IResultStatementSyntax` Expression:AmbiguousExpression;
BodyStatement <: Statement = Syntax:`IBodyStatementSyntax`;
VariableDeclarationStatement <: BodyStatement, VariableBinding
    = Syntax:`IVariableDeclarationStatementSyntax` Capability? Type? Initializer:AmbiguousExpression?;
ExpressionStatement <: BodyStatement
    = Syntax:`IExpressionStatementSyntax` Expression:AmbiguousExpression;

// ---------- Patterns
Pattern <: Code, ControlFlow = Syntax:`IPatternSyntax`;
TypePattern <: Pattern = Syntax:`ITypePatternSyntax` Type;
BindingContextPattern <: Pattern = Syntax:`IBindingContextPatternSyntax` Pattern Type?;
OptionalOrBindingPattern <: Pattern = Syntax:`IOptionalOrBindingPatternSyntax`;
BindingPattern <: OptionalOrBindingPattern, VariableBinding = Syntax:`IBindingPatternSyntax`;
OptionalPattern <: OptionalOrBindingPattern = Syntax:`IOptionalPatternSyntax` Pattern:OptionalOrBindingPattern;

// ---------- Expressions
/// An ambiguous expression is one that could mean one of several things and will be rewritten out of
/// existence.
temp AmbiguousExpression <: Code = Syntax:`IExpressionSyntax`;
Expression <: AmbiguousExpression, ControlFlow = Syntax:`IExpressionSyntax`;
/// An expression whose type isn't an extrema type or always unknown. Used to restrict which
/// expressions rewrites apply to to reduce rewrites and have more nodes that cannot be rewritten.
/// Specifically, names and type names are not otherwise rewriteable and always have unknown type.
/// So if this was not separate from `Expression` then all type names would be rewriteable.
OrdinaryTypedExpression <: Expression;
BlockExpression <: OrdinaryTypedExpression, BlockOrResult, BodyOrBlock
    = Syntax:`IBlockExpressionSyntax` Statements:Statement*;
UnsafeExpression <: OrdinaryTypedExpression = Syntax:`IUnsafeExpressionSyntax` Expression:AmbiguousExpression;
NeverTypedExpression <: Expression;

// ---------- Unresolved Expressions
// An unresolved expression is one that hasn't yet or cannot have names or members resolved. Name
// resolution is not the same as name binding. Name resolution determines what kind of thing a name
// or member refers to. Name binding determines what specific thing a name refers to and associates
// that to the name. The two are interrelated, but somewhat distinct.
UnresolvedExpression <: Expression;
concrete UnresolvedMemberAccessExpression <: UnresolvedExpression
    = Syntax:`IMemberAccessExpressionSyntax` Context:AmbiguousExpression GenericArguments:Type*;

// ---------- Instance Member Access Expressions
// Resolved expressions that are some form of instance member access (i.e. something that may not
// be only a name syntactically).

// TODO should a MemberAccessExpression node be added?
FieldAccessExpression <: OrdinaryTypedExpression = Syntax:`IMemberAccessExpressionSyntax`
    Context:Expression ReferencedDeclaration:`IFieldDeclarationNode`;
MethodAccessExpression <: OrdinaryTypedExpression = Syntax:`IMemberAccessExpressionSyntax`
    Context:Expression GenericArguments:Type*
    ReferencedDeclarations:{`IOrdinaryMethodDeclarationNode`};

// ---------- Literal Expressions
LiteralExpression <: OrdinaryTypedExpression = Syntax:`ILiteralExpressionSyntax`;
BoolLiteralExpression <: LiteralExpression = Syntax:`IBoolLiteralExpressionSyntax`;
IntegerLiteralExpression <: LiteralExpression = Syntax:`IIntegerLiteralExpressionSyntax`;
NoneLiteralExpression <: LiteralExpression = Syntax:`INoneLiteralExpressionSyntax`;
StringLiteralExpression <: LiteralExpression = Syntax:`IStringLiteralExpressionSyntax`;

// ---------- Operator Expressions
AssignmentExpression <: OrdinaryTypedExpression, DataFlow = Syntax:`IAssignmentExpressionSyntax`
    LeftOperand:AmbiguousExpression RightOperand:AmbiguousExpression;
RefAssignmentExpression <: OrdinaryTypedExpression = Syntax:`IAssignmentExpressionSyntax`
    LeftOperand:AmbiguousExpression RightOperand:AmbiguousExpression;
BinaryOperatorExpression <: OrdinaryTypedExpression = Syntax:`IBinaryOperatorExpressionSyntax`
    LeftOperand:AmbiguousExpression RightOperand:AmbiguousExpression;
UnaryOperatorExpression <: OrdinaryTypedExpression = Syntax:`IUnaryOperatorExpressionSyntax`
     Operand:AmbiguousExpression;
ConversionExpression <: OrdinaryTypedExpression = Syntax:`IConversionExpressionSyntax`
    Referent:AmbiguousExpression ConvertToType:Type;
// TODO rename to StandardImplicitConversionExpression?
ImplicitConversionExpression <: OrdinaryTypedExpression = Referent:Expression PlainType:`BarePlainType`;
OptionalConversionExpression <: OrdinaryTypedExpression = Referent:Expression Depth:`uint`;
// TODO eventually add nodes for implicit and explicit user defined conversions. Separate nodes because they need overload resolution etc.
PatternMatchExpression <: OrdinaryTypedExpression
    = Syntax:`IPatternMatchExpressionSyntax` Referent:AmbiguousExpression Pattern;
RefExpression <: OrdinaryTypedExpression = Syntax:`IRefExpressionSyntax` Referent:AmbiguousExpression;
ImplicitDerefExpression <: OrdinaryTypedExpression = Referent:Expression;

// ---------- Control Flow Expressions
IfExpression <: OrdinaryTypedExpression, ElseClause = Syntax:`IIfExpressionSyntax`
    Condition:AmbiguousExpression ThenBlock:BlockOrResult ElseClause?;
LoopExpression <: OrdinaryTypedExpression = Syntax:`ILoopExpressionSyntax` Block:BlockExpression;
WhileExpression <: OrdinaryTypedExpression = Syntax:`IWhileExpressionSyntax`
    Condition:AmbiguousExpression Block:BlockExpression;
ForeachExpression <: OrdinaryTypedExpression, VariableBinding = Syntax:`IForeachExpressionSyntax`
    InExpression:AmbiguousExpression DeclaredType:Type? Block:BlockExpression;
BreakExpression <: NeverTypedExpression = Syntax:`IBreakExpressionSyntax`
    Value:AmbiguousExpression?;
NextExpression <: NeverTypedExpression = Syntax:`INextExpressionSyntax`;
ReturnExpression <: NeverTypedExpression
    = Syntax:`IReturnExpressionSyntax` Value:AmbiguousExpression?;

// ---------- Invocation Expressions
InvocationExpression <: OrdinaryTypedExpression;
// TODO maybe this shouldn't be an OrdinaryTypedExpression
UnresolvedInvocationExpression <: InvocationExpression, UnresolvedExpression
    = Syntax:`IInvocationExpressionSyntax`
    Expression:AmbiguousExpression Arguments:AmbiguousExpression*;
FunctionInvocationExpression <: InvocationExpression = Syntax:`IInvocationExpressionSyntax`
    Function:FunctionNameExpression Arguments:AmbiguousExpression*;
MethodInvocationExpression <: InvocationExpression = Syntax:`IInvocationExpressionSyntax`
    Method:MethodAccessExpression Arguments:AmbiguousExpression*;
GetterInvocationExpression <: InvocationExpression
    = Syntax:`IMemberAccessExpressionSyntax` Context:Expression
    ReferencedDeclarations:{`IPropertyAccessorDeclarationNode`};
SetterInvocationExpression <: InvocationExpression = Syntax:`IAssignmentExpressionSyntax`
    Context:Expression PropertyName:`OrdinaryName` Value:AmbiguousExpression
    ReferencedDeclarations:{`IPropertyAccessorDeclarationNode`};
FunctionReferenceInvocationExpression <: InvocationExpression = Syntax:`IInvocationExpressionSyntax`
    Expression:Expression Arguments:AmbiguousExpression*;
InitializerInvocationExpression <: InvocationExpression = Syntax:`IInvocationExpressionSyntax`
    Initializer:InitializerNameExpression Arguments:AmbiguousExpression*;
// TODO maybe this shouldn't be an OrdinaryTypedExpression
NonInvocableInvocationExpression <: InvocationExpression = Syntax:`IInvocationExpressionSyntax`
    Expression:AmbiguousExpression Arguments:AmbiguousExpression*;

// ---------- Name Expressions
// Name expressions are expressions that correspond to name syntax (i.e. it is apparent from the
// syntax that something is a name). However, in the semantic tree name nodes are for namespace and
// type names. Name expressions are more inclusive than just names since there is name syntax that
// can occur in an expression that don't occur in type and namespace names.
// Note: a major part of the reason for name expressions is so that unresolved name expressions can
// preserve the name syntax types and produce namespace and type names with proper syntax types.

NameExpression <: Expression = Syntax:`INameExpressionSyntax`;
OrdinaryTypedNameExpression <: NameExpression, OrdinaryTypedExpression;
// See the names section for more nodes that are name expressions
LocalBindingNameExpression <: OrdinaryTypedNameExpression = ReferencedDefinition:`IBindingNode`?;
VariableNameExpression <: LocalBindingNameExpression, OrdinaryTypedNameExpression
    = Syntax:`IIdentifierNameSyntax` ReferencedDefinition:`ILocalBindingNode`;
InstanceExpression <: OrdinaryTypedNameExpression, LocalBindingNameExpression
    = Syntax:`IInstanceExpressionSyntax`; // i.e. `self` or `base`
SelfExpression <: InstanceExpression
    = Syntax:`ISelfExpressionSyntax`;
BaseExpression <: InstanceExpression
    = Syntax:`IBaseExpressionSyntax`;
FunctionNameExpression <: OrdinaryTypedNameExpression
    = Syntax:`INameExpressionSyntax` Context:Name? FunctionName:`OrdinaryName` GenericArguments:Type*
    ReferencedDeclarations:{`IFunctionInvocableDeclarationNode`};
InitializerNameExpression <: OrdinaryTypedNameExpression = Syntax:`INameExpressionSyntax`
    Context:TypeName InitializerName:`OrdinaryName`?
    ReferencedDeclarations:{`IInitializerDeclarationNode`};
MissingNameExpression <: NameExpression
    = Syntax:`IMissingNameExpressionSyntax`;

// ---------- Unresolved Name Expressions
// Unresolved name expressions are name expressions which have not yet or cannot be determined to be
// a more specific kind of name expression (or name).

UnresolvedNameExpression <: NameExpression, UnresolvedExpression = Syntax:`INameExpressionSyntax`;
UnresolvedOrdinaryNameExpression <: UnresolvedNameExpression
    = Syntax:`IOrdinaryNameSyntax`;
UnresolvedIdentifierNameExpression <: UnresolvedOrdinaryNameExpression
    = Syntax:`IIdentifierNameSyntax`;
UnresolvedGenericNameExpression <: UnresolvedOrdinaryNameExpression
    = Syntax:`IGenericNameSyntax` GenericArguments:Type*;
/// Note: `Context` must be `Expression` instead of `NameExpression` because there are cases where a
/// `NameExpression` can be rewritten to an `Expression`.
UnresolvedQualifiedNameExpression <: UnresolvedNameExpression, UnresolvedMemberAccessExpression
    = Syntax:`IQualifiedNameSyntax` Context:Expression /GenericArguments/;
/// This is distinct from UnresolvedQualifiedNameExpression because the rewrites on this should not
/// be inherited by all UnresolvedQualifiedNameExpressions.
concrete UnresolvedNameExpressionQualifiedNameExpression <: UnresolvedQualifiedNameExpression;
// These reify the Context and ReferencedDeclarations to make diagnostic reporting eaiser
UnresolvedNamespaceQualifiedNameExpression <: UnresolvedQualifiedNameExpression
    = /Syntax/ Context:NamespaceName /GenericArguments/ ReferencedDeclarations:{`INamespaceMemberDeclarationNode`};
UnresolvedTypeQualifiedNameExpression <: UnresolvedQualifiedNameExpression
    = /Syntax/ Context:TypeName /GenericArguments/ ReferencedDeclarations:{`IAssociatedMemberDeclarationNode`};

// ---------- Names
// Names are reserved for things that syntactically can only be names. They are used as part of the
// resolution for type names since that needs to be applied the same way for types and expressions.
// As such these nodes are both types and name expressions.

Name <: NameExpression;
NamespaceName <: Name = ReferencedDeclaration:`INamespaceDeclarationNode`;
UnqualifiedNamespaceName <: NamespaceName
    = Syntax:`IIdentifierNameSyntax` /ReferencedDeclaration/;
QualifiedNamespaceName <: NamespaceName
    = Syntax:`IQualifiedNameSyntax` Context:NamespaceName /ReferencedDeclaration/;

// ---------- Unresolved Names
// Unresolved names are names that are known from context to only resolve to type or namespace
// names. These must be distinct from `UnresolvedNameExpression`s because those could resolve to
// `Expression`s which would violate the requirement that a `Name` not be rewritten to an
// `Expression`. On the other hand, `UnresolvedNameExpression`s can be rewritten to `Name`s.

UnresolvedName <: Name, UnresolvedNameExpression = Syntax:`INameExpressionSyntax`;
UnresolvedOrdinaryName <: UnresolvedName
    = Syntax:`IOrdinaryNameSyntax`;
UnresolvedIdentifierName <: UnresolvedOrdinaryName
    = Syntax:`IIdentifierNameSyntax`;
UnresolvedGenericName <: UnresolvedOrdinaryName
    = Syntax:`IGenericNameSyntax` GenericArguments:Type*;
UnresolvedQualifiedName <: UnresolvedName
    = Syntax:`IQualifiedNameSyntax` Context:Name GenericArguments:Type*;
/// This is distinct from UnresolvedQualifiedName because the rewrites on this should not
/// be inherited by all UnresolvedQualifiedName.
concrete UnresolvedNameQualifiedName <: UnresolvedQualifiedName;
// These reify the Context and ReferencedDeclarations to make diagnostic reporting eaiser
UnresolvedNamespaceQualifiedName <: UnresolvedQualifiedName
    = /Syntax/ Context:NamespaceName /GenericArguments/ ReferencedDeclarations:{`INamespaceMemberDeclarationNode`};
UnresolvedTypeQualifiedName <: UnresolvedQualifiedName
    = /Syntax/ Context:TypeName /GenericArguments/ ReferencedDeclarations:{`IAssociatedMemberDeclarationNode`};

// ---------- Type Names
// Type names are both types and expressions since they can occur in both.

TypeName <: Type, Name = Syntax:`INameSyntax`;
UnqualifiedTypeName <: TypeName = Syntax:`IUnqualifiedNameSyntax`;
BuiltInTypeName <: UnqualifiedTypeName = Syntax:`IBuiltInTypeNameSyntax`;
OrdinaryTypeName <: UnqualifiedTypeName = Syntax:`IOrdinaryNameSyntax`;
IdentifierTypeName <: OrdinaryTypeName = Syntax:`IIdentifierNameSyntax`;
GenericTypeName <: OrdinaryTypeName = Syntax:`IGenericNameSyntax` GenericArguments:Type*;
QualifiedTypeName <: TypeName = Syntax:`IQualifiedNameSyntax` Context:Name GenericArguments:Type*;

// ---------- Capability Expressions
temp AmbiguousMoveExpression <: AmbiguousExpression = Syntax:`IMoveExpressionSyntax` Referent:AmbiguousExpression;
RecoveryExpression <: OrdinaryTypedExpression = Referent:Expression IsImplicit:`bool`;
MoveExpression <: RecoveryExpression = Referent:Expression;
// TODO why is move variable expression needed? Shouldn't moving a value just change any variables in the sharing set to `id`?
MoveVariableExpression <: MoveExpression = Referent:LocalBindingNameExpression /IsImplicit/;
MoveValueExpression <: MoveExpression = /Referent/ /IsImplicit/;
ImplicitTempMoveExpression <: OrdinaryTypedExpression = Referent:Expression;
temp AmbiguousFreezeExpression <: AmbiguousExpression = Syntax:`IFreezeExpressionSyntax` Referent:AmbiguousExpression;
FreezeExpression <: RecoveryExpression = Referent:Expression IsTemporary:`bool`;
FreezeVariableExpression <: FreezeExpression = Referent:LocalBindingNameExpression /IsTemporary/ /IsImplicit/;
FreezeValueExpression <: FreezeExpression = /Referent/ /IsTemporary/ /IsImplicit/;
PrepareToReturnExpression <: OrdinaryTypedExpression = Value:Expression;

// ---------- Async Expressions
AsyncBlockExpression <: OrdinaryTypedExpression = Syntax:`IAsyncBlockExpressionSyntax` Block:BlockExpression;
AsyncStartExpression <: OrdinaryTypedExpression
    = Syntax:`IAsyncStartExpressionSyntax` Expression:AmbiguousExpression;
AwaitExpression <: OrdinaryTypedExpression = Syntax:`IAwaitExpressionSyntax` Expression:AmbiguousExpression;

// -------------------------------------------------------------------------------------------------
// Declarations
// -------------------------------------------------------------------------------------------------
// Declarations are the abstractions of both definitions and symbols. They are used to represent
// what a name can refer to.
// -------------------------------------------------------------------------------------------------
// TODO move into separate aspect

Declaration;
/// A declaration that may have an associated symbol. (Symbol attribute added in aspect.)
SymbolDeclaration <: Declaration;
/// A declaration that is definitely a child node. Note, this is not a `SymbolDeclaration` because
/// bindings don't have symbols.
ChildDeclaration <: Declaration, Child;
/// A declaration that has a name.
NamedDeclaration <: ChildDeclaration;

// ---------- Bindings
BindingDeclaration <: ChildDeclaration;
NamedBindingDeclaration <: BindingDeclaration, NamedDeclaration;

// ---------- Facet Declarations
/// Facets separate the testing and non-testing aspects of a package. They do no have their own
/// symbol. They use the package symbol.
PackageFacetDeclaration <: SymbolDeclaration;

// TODO better name for this
// Any child declaration node of a facet (not just members)
PackageFacetChildDeclaration <: ChildDeclaration;

// ---------- Declarations
/// A declaration that can be invoked (e.g. a function, initializer etc.)
InvocableDeclaration <: SymbolDeclaration, ChildDeclaration;
/// A declaration that is some form of function (i.e. it is invocable and has a name).
FunctionInvocableDeclaration <: NamedDeclaration, InvocableDeclaration;
/// A declaration that is either a namespace or a type declaration. This is used as part of name
/// resolution where it is known that certain names are either namespaces or types.
NamespaceOrTypeDeclaration <: SymbolDeclaration;

// ---------- Namespace Declarations
NamespaceDeclaration <: NamespaceMemberDeclaration, NamespaceOrTypeDeclaration;
NamespaceMemberDeclaration <: PackageFacetChildDeclaration, SymbolDeclaration
    = Name:`OrdinaryName`?;

// ---------- Function Declaration
FunctionDeclaration <: NamespaceMemberDeclaration, FunctionInvocableDeclaration
    = Name:`OrdinaryName`;

// ---------- Type Declarations
TypeDeclaration <: NamedDeclaration, SymbolDeclaration, NamespaceOrTypeDeclaration;
// TODO this needs a better name
NonVariableTypeDeclaration <: TypeDeclaration;
BuiltInTypeDeclaration <: NonVariableTypeDeclaration = Name:`BuiltInTypeName` Members:{TypeMemberDeclaration};
OrdinaryTypeDeclaration <: NamespaceMemberDeclaration, TypeMemberDeclaration, NonVariableTypeDeclaration
    = Name:`OrdinaryName` GenericParameters:GenericParameterDeclaration* Members:{TypeMemberDeclaration};
ClassDeclaration <: OrdinaryTypeDeclaration = Members:{TypeMemberDeclaration};
StructDeclaration <: OrdinaryTypeDeclaration = Members:{TypeMemberDeclaration};
ValueDeclaration <: OrdinaryTypeDeclaration = Members:{TypeMemberDeclaration};
TraitDeclaration <: OrdinaryTypeDeclaration = Members:{TypeMemberDeclaration};

// ---------- Type Declaration Parts
GenericParameterDeclaration <: TypeDeclaration, AssociatedMemberDeclaration
    = Name:`IdentifierName` Members:{TypeMemberDeclaration};
ImplicitSelfDeclaration <: TypeDeclaration;

// ---------- Type Member Declarations (i.e. declarations that can be contained in a type)
TypeMemberDeclaration <: PackageFacetChildDeclaration, SymbolDeclaration;
AlwaysTypeMemberDeclaration <: TypeMemberDeclaration;
AssociatedMemberDeclaration <: TypeMemberDeclaration, SymbolDeclaration;
InstanceMemberDeclaration <: TypeMemberDeclaration;

// ---------- Member Declarations
MethodDeclaration <: NamedDeclaration, InstanceMemberDeclaration, InvocableDeclaration, AlwaysTypeMemberDeclaration
    = Name:`IdentifierName`;
OrdinaryMethodDeclaration <: MethodDeclaration;
PropertyAccessorDeclaration <: MethodDeclaration;
GetterMethodDeclaration <: PropertyAccessorDeclaration;
SetterMethodDeclaration <: PropertyAccessorDeclaration;
InitializerDeclaration <: AssociatedMemberDeclaration, InvocableDeclaration, AlwaysTypeMemberDeclaration
    = Name:`IdentifierName`?;
FieldDeclaration <: NamedDeclaration, InstanceMemberDeclaration, NamedBindingDeclaration, AlwaysTypeMemberDeclaration
    = Name:`IdentifierName`;
AssociatedFunctionDeclaration <: AssociatedMemberDeclaration, FunctionInvocableDeclaration, AlwaysTypeMemberDeclaration
    = Name:`OrdinaryName`;
AssociatedTypeDeclaration <: AssociatedMemberDeclaration, TypeDeclaration
    = Name:`IdentifierName`;

// -------------------------------------------------------------------------------------------------
// Symbol Nodes
// -------------------------------------------------------------------------------------------------
// Implementations of declarations that are derived from symbols.
// -------------------------------------------------------------------------------------------------
// TODO move into separate aspect

Symbol <: SymbolDeclaration;

// ---------- Parent Symbol Nodes
ChildSymbol <: Symbol, SymbolDeclaration, ChildDeclaration;

// ---------- Facet Symbol Nodes
// Facets separate the testing and non-testing aspects of a package. They do no have their own symbol.
PackageFacetSymbol <: Symbol, PackageFacetDeclaration = SymbolTree:`FixedSymbolTree`;

// ---------- Namespace Symbol Nodes
NamespaceSymbol <: NamespaceDeclaration, NamespaceMemberSymbol = Symbol:`NamespaceSymbol`;
NamespaceMemberSymbol <: NamespaceMemberDeclaration, ChildSymbol;

// ---------- Function Symbol Nodes
FunctionSymbol <: FunctionDeclaration, NamespaceMemberSymbol = Symbol:`FunctionSymbol`;

// ---------- Type Symbol Nodes
TypeSymbol <: TypeDeclaration, ChildSymbol = Symbol:`TypeSymbol`;
NonVariableTypeSymbol <: NonVariableTypeDeclaration, TypeSymbol;
BuiltInTypeSymbol <: BuiltInTypeDeclaration, NonVariableTypeSymbol = Symbol:`BuiltInTypeSymbol`;
VoidTypeSymbol <: TypeSymbol = Symbol:`VoidTypeSymbol`;
NeverTypeSymbol <: TypeSymbol = Symbol:`NeverTypeSymbol`;
OrdinaryTypeSymbol <: OrdinaryTypeDeclaration, NonVariableTypeSymbol, NamespaceMemberSymbol = Symbol:`OrdinaryTypeSymbol`;
ClassSymbol <: ClassDeclaration, OrdinaryTypeSymbol = /GenericParameters/ /Members/;
StructSymbol <: StructDeclaration, OrdinaryTypeSymbol = /GenericParameters/ /Members/;
ValueSymbol <: ValueDeclaration, OrdinaryTypeSymbol = /GenericParameters/ /Members/;
TraitSymbol <: TraitDeclaration, OrdinaryTypeSymbol = /GenericParameters/ /Members/;

// ---------- Type Declaration Parts
GenericParameterSymbol <: GenericParameterDeclaration, TypeSymbol = Symbol:`GenericParameterTypeSymbol`;
SelfSymbol <: ImplicitSelfDeclaration = Symbol:`AssociatedTypeSymbol`;

// ---------- Type Member Declarations (i.e. declarations that can be contained in a type)
TypeMemberSymbol <: TypeMemberDeclaration, ChildSymbol;
AssociatedMemberSymbol <: AssociatedMemberDeclaration, TypeMemberSymbol;

// ---------- Member Symbol Nodes
MethodSymbol <: MethodDeclaration, TypeMemberSymbol
    = Symbol:`MethodSymbol`;
OrdinaryMethodSymbol <: OrdinaryMethodDeclaration, MethodSymbol;
GetterMethodSymbol <: GetterMethodDeclaration, MethodSymbol;
SetterMethodSymbol <: SetterMethodDeclaration, MethodSymbol;
InitializerSymbol <: InitializerDeclaration, TypeMemberSymbol = Symbol:`InitializerSymbol`;
FieldSymbol <: FieldDeclaration, TypeMemberSymbol = Symbol:`FieldSymbol`;
AssociatedFunctionSymbol <: AssociatedFunctionDeclaration, AssociatedMemberSymbol
    = Symbol:`FunctionSymbol`;
AssociatedTypeSymbol <: AssociatedTypeDeclaration, TypeMemberSymbol
    = Symbol:`AssociatedTypeSymbol`;
