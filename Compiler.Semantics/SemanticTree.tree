◊namespace Azoth.Tools.Bootstrap.Compiler.Semantics;
◊root-supertype Semantic;
◊prefix I;
◊suffix Node;
◊class-suffix Node;
◊using System.Collections.Generic;
◊using System.Numerics;
◊using Azoth.Tools.Bootstrap.Compiler.Antetypes;
◊using Azoth.Tools.Bootstrap.Compiler.Core;
◊using Azoth.Tools.Bootstrap.Compiler.Core.Attributes;
◊using Azoth.Tools.Bootstrap.Compiler.Core.Code;
◊using Azoth.Tools.Bootstrap.Compiler.Core.Operators;
◊using Azoth.Tools.Bootstrap.Compiler.Names;
◊using Azoth.Tools.Bootstrap.Compiler.Semantics.ControlFlow;
◊using Azoth.Tools.Bootstrap.Compiler.Semantics.DataFlow;
◊using Azoth.Tools.Bootstrap.Compiler.Semantics.Types;
◊using Azoth.Tools.Bootstrap.Compiler.Semantics.Types.Flow;
◊using Azoth.Tools.Bootstrap.Compiler.Symbols;
◊using Azoth.Tools.Bootstrap.Compiler.Symbols.Trees;
◊using Azoth.Tools.Bootstrap.Compiler.Syntax;
◊using Azoth.Tools.Bootstrap.Compiler.Types;
◊using Azoth.Tools.Bootstrap.Compiler.Types.Bare;
◊using Azoth.Tools.Bootstrap.Compiler.Types.Capabilities;
◊using Azoth.Tools.Bootstrap.Compiler.Types.ConstValue;
◊using Azoth.Tools.Bootstrap.Compiler.Types.Declared;
◊using Azoth.Tools.Bootstrap.Compiler.Types.Parameters;
◊using Azoth.Tools.Bootstrap.Compiler.Types.Pseudotypes;
◊using Azoth.Tools.Bootstrap.Framework;

// ---------- Parent
Semantic <: `ITreeNode` = Syntax:`ISyntax`?;
Child <: `IChildTreeNode<ISemanticNode>`;

// ---------- Special Parts
BodyOrBlock <: Code;
ElseClause <: ControlFlow = Syntax:`ICodeSyntax`;
BlockOrResult <: ElseClause;

// ---------- Bindings
Binding <: Code, BindingDeclaration;
NamedBinding <: Binding, NamedBindingDeclaration;
LocalBinding <: NamedBinding = Syntax:`ILocalBindingSyntax`;
VariableBinding <: LocalBinding, DataFlow;

// ---------- Packages
Package <: PackageDeclaration = Syntax:`IPackageSyntax` References:{PackageReference}
    MainFacet:PackageFacet TestingFacet:PackageFacet;

PackageReference <: Child = Syntax:`IPackageReferenceSyntax`?;
StandardPackageReference <: PackageReference = Syntax:`IPackageReferenceSyntax`;
IntrinsicsPackageReference <: PackageReference;

// ---------- Facets
PackageFacet <: PackageFacetDeclaration = Syntax:`IPackageSyntax` CompilationUnits:{CompilationUnit};

FacetMemberDefinition <: NamespaceBlockMemberDefinition, NamespaceMemberDefinition
    = Attributes:Attribute*;

// ---------- Code Files
Code <: Child = Syntax:`ICodeSyntax`?;

CompilationUnit <: Code = Syntax:`ICompilationUnitSyntax`
    UsingDirectives:UsingDirective* Definitions:NamespaceBlockMemberDefinition*;

UsingDirective <: Code = Syntax:`IUsingDirectiveSyntax`;

// ---------- Definitions
Definition <: Code, PackageFacetChildDeclaration = Syntax:`IDefinitionSyntax`?;
InvocableDefinition <: Definition, InvocableDeclaration
    = Parameters:ConstructorOrInitializerParameter*;
ExecutableDefinition <: Definition, SymbolDeclaration = /Entry/ /Exit/;
ConcreteInvocableDefinition <: InvocableDefinition, ExecutableDefinition
    = Parameters:ConstructorOrInitializerParameter* Body?;
ConcreteFunctionInvocableDefinition <: ConcreteInvocableDefinition, FunctionInvocableDeclaration
    = Name:`IdentifierName` Parameters:NamedParameter* Return:Type? Body;

// ---------- Namespace Definitions
NamespaceBlockDefinition <: NamespaceBlockMemberDefinition = Syntax:`INamespaceBlockDefinitionSyntax`
    UsingDirectives:UsingDirective* Members:NamespaceBlockMemberDefinition*;
NamespaceBlockMemberDefinition <: Definition;
NamespaceDefinition <: NamespaceMemberDefinition, NamespaceDeclaration
    = Symbol:`NamespaceSymbol` MemberNamespaces:NamespaceDefinition* PackageMembers:`IFacetMemberDefinitionNode`*;
NamespaceMemberDefinition <: NamespaceMemberDeclaration;

// ---------- Function Definition
FunctionDefinition <: FacetMemberDefinition, FunctionDeclaration, ConcreteFunctionInvocableDefinition
    = Syntax:`IFunctionDefinitionSyntax` Attributes:Attribute* /Parameters/ /Return/ /Entry/ Body /Exit/;

// ---------- Type Definitions
TypeDefinition <: FacetMemberDefinition, AssociatedMemberDefinition, UserTypeDeclaration
    = Syntax:`ITypeDefinitionSyntax`
    GenericParameters:GenericParameter*
    SupertypeNames:StandardTypeName*;
ClassDefinition <: TypeDefinition, ClassDeclaration = Syntax:`IClassDefinitionSyntax`
    Attributes:Attribute* GenericParameters:GenericParameter*
    BaseTypeName:StandardTypeName? SupertypeNames:StandardTypeName*
    SourceMembers:ClassMemberDefinition*;
StructDefinition <: TypeDefinition, StructDeclaration = Syntax:`IStructDefinitionSyntax`
    Attributes:Attribute* GenericParameters:GenericParameter*
    SupertypeNames:StandardTypeName*
    SourceMembers:StructMemberDefinition*;
TraitDefinition <: TypeDefinition, TraitDeclaration = Syntax:`ITraitDefinitionSyntax`
    Attributes:Attribute* GenericParameters:GenericParameter*
    SupertypeNames:StandardTypeName*
    Members:{TraitMemberDefinition};

// ---------- Type Definition Parts
GenericParameter <: Code, GenericParameterDeclaration
    = Syntax:`IGenericParameterSyntax` Constraint:CapabilityConstraint;

// ---------- Type Member Definitions (i.e. definitions that can be contained in a type)
TypeMemberDefinition <: Definition, TypeMemberDeclaration = Syntax:`ITypeMemberDefinitionSyntax`?;
ClassMemberDefinition <: TypeMemberDefinition, ClassMemberDeclaration;
TraitMemberDefinition <: TypeMemberDefinition, TraitMemberDeclaration;
StructMemberDefinition <: TypeMemberDefinition, StructMemberDeclaration;
AlwaysTypeMemberDefinition <: TypeMemberDefinition;
AssociatedMemberDefinition <: ClassMemberDefinition, TraitMemberDefinition, StructMemberDefinition, NamedDeclaration
    = Name:`StandardName`;

// ---------- Member Definitions
MethodDefinition <: AlwaysTypeMemberDefinition, ClassMemberDefinition, TraitMemberDefinition, InvocableDefinition, MethodDeclaration
    = Syntax:`IMethodDefinitionSyntax`
    SelfParameter:MethodSelfParameter Parameters:NamedParameter* Return:Type?;
// TODO getters and setters can be abstract too
AbstractMethodDefinition <: MethodDefinition, StandardMethodDeclaration
    = Syntax:`IAbstractMethodDefinitionSyntax` /SelfParameter/ /Parameters/ /Return/;
ConcreteMethodDefinition <: MethodDefinition, StructMemberDefinition, ConcreteInvocableDefinition
    = Syntax:`IConcreteMethodDefinitionSyntax` /SelfParameter/ /Parameters/ /Return/ /Entry/ Body /Exit/;
// TODO rename to Ordinary or Normal
StandardMethodDefinition <: ConcreteMethodDefinition, StandardMethodDeclaration
    = Syntax:`IStandardMethodDefinitionSyntax` /SelfParameter/ /Parameters/ /Return/ /Entry/ Body /Exit/;
GetterMethodDefinition <: ConcreteMethodDefinition, GetterMethodDeclaration
    = Syntax:`IGetterMethodDefinitionSyntax` /SelfParameter/ /Parameters/ Return:Type /Entry/ Body /Exit/;
SetterMethodDefinition <: ConcreteMethodDefinition, SetterMethodDeclaration
    = Syntax:`ISetterMethodDefinitionSyntax` /SelfParameter/ /Parameters/ /Return/ /Entry/ Body /Exit/;
ConstructorDefinition <: ConcreteInvocableDefinition, AlwaysTypeMemberDefinition, ClassMemberDefinition, ConstructorDeclaration
    = Syntax:`IConstructorDefinitionSyntax`? Parameters:ConstructorOrInitializerParameter*;
DefaultConstructorDefinition <: ConstructorDefinition;
SourceConstructorDefinition <: ConstructorDefinition
    = Syntax:`IConstructorDefinitionSyntax`
    SelfParameter:ConstructorSelfParameter /Parameters/ /Entry/ Body:BlockBody /Exit/;
InitializerDefinition <: ConcreteInvocableDefinition, AlwaysTypeMemberDefinition, StructMemberDefinition, InitializerDeclaration
    = Syntax:`IInitializerDefinitionSyntax`? Name:`IdentifierName`? Parameters:ConstructorOrInitializerParameter*;
DefaultInitializerDefinition <: InitializerDefinition;
SourceInitializerDefinition <: InitializerDefinition
    = Syntax:`IInitializerDefinitionSyntax`
    SelfParameter:InitializerSelfParameter /Parameters/ /Entry/ Body:BlockBody /Exit/;
FieldDefinition <: AlwaysTypeMemberDefinition, ClassMemberDefinition, StructMemberDefinition, NamedBinding, FieldDeclaration, ExecutableDefinition
    = Syntax:`IFieldDefinitionSyntax` TypeNode:Type /Entry/ Initializer:AmbiguousExpression? /Exit/;
AssociatedFunctionDefinition <: ConcreteFunctionInvocableDefinition, AlwaysTypeMemberDefinition, AssociatedMemberDefinition, AssociatedFunctionDeclaration
    = Syntax:`IAssociatedFunctionDefinitionSyntax` /Parameters/ /Return/ /Entry/ /Body/ /Exit/;

// ---------- Attributes
Attribute <: Code = Syntax:`IAttributeSyntax` TypeName:StandardTypeName;

// ---------- Capabilities
CapabilityConstraint <: Code = Syntax:`ICapabilityConstraintSyntax` Constraint:`ICapabilityConstraint`;
CapabilitySet <: CapabilityConstraint = Syntax:`ICapabilitySetSyntax` Constraint:`CapabilitySet`;
Capability <: CapabilityConstraint = Syntax:`ICapabilitySyntax` Capability:`Capability`;

// ---------- Parameters
Parameter <: Code = Syntax:`IParameterSyntax`;
/// A non-self parameter that can be declared in a constructor
ConstructorOrInitializerParameter <: Parameter = Syntax:`IConstructorOrInitializerParameterSyntax`;
NamedParameter <: ConstructorOrInitializerParameter, LocalBinding
    = Syntax:`INamedParameterSyntax` TypeNode:Type;
SelfParameter <: Parameter, Binding = Syntax:`ISelfParameterSyntax`;
ConstructorSelfParameter <: SelfParameter = Syntax:`IConstructorSelfParameterSyntax` Capability;
InitializerSelfParameter <: SelfParameter = Syntax:`IInitializerSelfParameterSyntax` Capability;
MethodSelfParameter <: SelfParameter = Syntax:`IMethodSelfParameterSyntax` Capability:CapabilityConstraint;
FieldParameter <: ConstructorOrInitializerParameter = Syntax:`IFieldParameterSyntax`;

// ---------- Function Parts
Body <: BodyOrBlock;
BlockBody <: Body = Syntax:`IBlockBodySyntax` Statements:BodyStatement*;
ExpressionBody <: Body = Syntax:`IExpressionBodySyntax` ResultStatement;

// ---------- Types
Type <: Code = Syntax:`ITypeSyntax`;
// TODO start from generalized names in syntax and rewrite to type names
TypeName <: Type = Syntax:`ITypeNameSyntax` Name:`TypeName`;
StandardTypeName <: TypeName = Syntax:`IStandardTypeNameSyntax` Name:`StandardName`;
SimpleTypeName <: TypeName = Syntax:`ISimpleTypeNameSyntax`;
IdentifierTypeName <: StandardTypeName, SimpleTypeName = Syntax:`IIdentifierTypeNameSyntax` Name:`IdentifierName`;
SpecialTypeName <: SimpleTypeName = Syntax:`ISpecialTypeNameSyntax` Name:`SpecialTypeName`;
GenericTypeName <: StandardTypeName = Syntax:`IGenericTypeNameSyntax` Name:`GenericName` TypeArguments:Type*;
QualifiedTypeName <: TypeName = Syntax:`IQualifiedTypeNameSyntax` Context:TypeName QualifiedName:StandardTypeName;
OptionalType <: Type = Syntax:`IOptionalTypeSyntax` Referent:Type;
CapabilityType <: Type = Syntax:`ICapabilityTypeSyntax` Capability Referent:Type;
FunctionType <: Type = Syntax:`IFunctionTypeSyntax` Parameters:ParameterType* Return:Type;
ParameterType <: Code = Syntax:`IParameterTypeSyntax` IsLent:`bool` Referent:Type Parameter:`ParameterType`;
ViewpointType <: Type = Syntax:`IViewpointTypeSyntax` Referent:Type;
CapabilityViewpointType <: ViewpointType = Syntax:`ICapabilityViewpointTypeSyntax` Capability Referent:Type;
SelfViewpointType <: ViewpointType = Syntax:`ISelfViewpointTypeSyntax` Referent:Type;

// ---------- Control Flow
ControlFlow <: Code = ControlFlowPrevious:`ControlFlowSet`;
Entry <: DataFlow;
Exit <: DataFlow;

// ---------- Data Flow
DataFlow <: ControlFlow;

// ---------- Statements
Statement <: ControlFlow = Syntax:`IStatementSyntax` ResultAntetype:`IMaybeAntetype`? ResultType:`DataType`?;
ResultStatement <: Statement, BlockOrResult
    = Syntax:`IResultStatementSyntax` Expression:AmbiguousExpression;
BodyStatement <: Statement = Syntax:`IBodyStatementSyntax`;
VariableDeclarationStatement <: BodyStatement, VariableBinding
    = Syntax:`IVariableDeclarationStatementSyntax` Capability? Type? Initializer:AmbiguousExpression?;
ExpressionStatement <: BodyStatement
    = Syntax:`IExpressionStatementSyntax` Expression:AmbiguousExpression;

// ---------- Patterns
Pattern <: ControlFlow = Syntax:`IPatternSyntax`;
BindingContextPattern <: Pattern = Syntax:`IBindingContextPatternSyntax` IsMutableBinding:`bool` Pattern Type?;
OptionalOrBindingPattern <: Pattern = Syntax:`IOptionalOrBindingPatternSyntax`;
BindingPattern <: OptionalOrBindingPattern, VariableBinding = Syntax:`IBindingPatternSyntax` Name:`IdentifierName`;
OptionalPattern <: OptionalOrBindingPattern = Syntax:`IOptionalPatternSyntax` Pattern:OptionalOrBindingPattern;

// ---------- Expressions
// TODO rename Ambiguous to `Unresolved` or `Unbound` because it is not ambiguous, it is just not bound
temp AmbiguousExpression <: Code = Syntax:`IExpressionSyntax`;
temp AmbiguousAssignableExpression <: AmbiguousExpression = Syntax:`IAssignableExpressionSyntax`;
Expression <: AmbiguousExpression, ControlFlow = Syntax:`IExpressionSyntax`;
AssignableExpression <: Expression, AmbiguousAssignableExpression = Syntax:`IAssignableExpressionSyntax`;
BlockExpression <: Expression, BlockOrResult, BodyOrBlock
    = Syntax:`IBlockExpressionSyntax` Statements:Statement*;
NewObjectExpression <: InvocationExpression = Syntax:`INewObjectExpressionSyntax`
    ConstructingType:TypeName ConstructorName:`IdentifierName`? Arguments:AmbiguousExpression*;
UnsafeExpression <: Expression = Syntax:`IUnsafeExpressionSyntax` Expression:AmbiguousExpression;
NeverTypedExpression <: Expression;

// ---------- Literal Expressions
LiteralExpression <: Expression = Syntax:`ILiteralExpressionSyntax`;
BoolLiteralExpression <: LiteralExpression = Syntax:`IBoolLiteralExpressionSyntax` Value:`bool`;
IntegerLiteralExpression <: LiteralExpression = Syntax:`IIntegerLiteralExpressionSyntax` Value:`BigInteger`;
NoneLiteralExpression <: LiteralExpression = Syntax:`INoneLiteralExpressionSyntax`;
StringLiteralExpression <: LiteralExpression = Syntax:`IStringLiteralExpressionSyntax` Value:`string`;

// ---------- Operator Expressions
AssignmentExpression <: Expression, DataFlow = Syntax:`IAssignmentExpressionSyntax`
    LeftOperand:AmbiguousAssignableExpression
    Operator:`AssignmentOperator`
    RightOperand:AmbiguousExpression;
BinaryOperatorExpression <: Expression = Syntax:`IBinaryOperatorExpressionSyntax`
    LeftOperand:AmbiguousExpression
    Operator:`BinaryOperator`
    RightOperand:AmbiguousExpression;
UnaryOperatorExpression <: Expression = Syntax:`IUnaryOperatorExpressionSyntax` Fixity:`UnaryOperatorFixity`
    Operator:`UnaryOperator` Operand:AmbiguousExpression;
IdExpression <: Expression = Syntax:`IIdExpressionSyntax` Referent:AmbiguousExpression;
ConversionExpression <: Expression = Syntax:`IConversionExpressionSyntax`
    Referent:AmbiguousExpression Operator:`ConversionOperator` ConvertToType:Type;
ImplicitConversionExpression <: Expression = Referent:Expression Antetype:`SimpleAntetype` Type:`DataType`;
PatternMatchExpression <: Expression
    = Syntax:`IPatternMatchExpressionSyntax` Referent:AmbiguousExpression Pattern;

// ---------- Control Flow Expressions
IfExpression <: Expression, ElseClause = Syntax:`IIfExpressionSyntax`
    Condition:AmbiguousExpression ThenBlock:BlockOrResult ElseClause?;
LoopExpression <: Expression = Syntax:`ILoopExpressionSyntax` Block:BlockExpression;
WhileExpression <: Expression = Syntax:`IWhileExpressionSyntax`
    Condition:AmbiguousExpression Block:BlockExpression;
ForeachExpression <: Expression, VariableBinding = Syntax:`IForeachExpressionSyntax`
    IsMutableBinding:`bool` VariableName:`IdentifierName` InExpression:AmbiguousExpression
    DeclaredType:Type? Block:BlockExpression
    ReferencedIterableDeclaration:`ITypeDeclarationNode`? ReferencedIterateMethod:`IStandardMethodDeclarationNode`?
    IteratorAntetype:`IMaybeExpressionAntetype` IteratorType:`DataType`
    ReferencedIteratorDeclaration:`ITypeDeclarationNode`? ReferencedNextMethod:`IStandardMethodDeclarationNode`?
    IteratedAntetype:`IMaybeAntetype` IteratedType:`DataType`
    FlowStateBeforeBlock:`IFlowState`;
BreakExpression <: NeverTypedExpression = Syntax:`IBreakExpressionSyntax`
    Value:AmbiguousExpression?;
NextExpression <: NeverTypedExpression = Syntax:`INextExpressionSyntax`;
ReturnExpression <: NeverTypedExpression
    = Syntax:`IReturnExpressionSyntax` Value:AmbiguousExpression?;

// ---------- Invocation Expressions
temp UnresolvedInvocationExpression <: AmbiguousExpression = Syntax:`IInvocationExpressionSyntax`
    Expression:AmbiguousExpression Arguments:AmbiguousExpression*;
InvocationExpression <: Expression =
    TempAllArguments:`IEnumerable<IAmbiguousExpressionNode>` AllArguments:`IEnumerable<IExpressionNode?>`;
FunctionInvocationExpression <: InvocationExpression = Syntax:`IInvocationExpressionSyntax`
    FunctionGroup:FunctionGroupName Arguments:AmbiguousExpression*;
MethodInvocationExpression <: InvocationExpression = Syntax:`IInvocationExpressionSyntax`
    MethodGroup:MethodGroupName Arguments:AmbiguousExpression*;
GetterInvocationExpression <: InvocationExpression = Syntax:`IMemberAccessExpressionSyntax`
    Context:Expression PropertyName:`StandardName`
    ReferencedPropertyAccessors:{`IPropertyAccessorDeclarationNode`} ReferencedDeclaration:`IGetterMethodDeclarationNode`?;
SetterInvocationExpression <: InvocationExpression = Syntax:`IAssignmentExpressionSyntax`
    Context:Expression PropertyName:`StandardName` Value:AmbiguousExpression
    ReferencedPropertyAccessors:{`IPropertyAccessorDeclarationNode`} ReferencedDeclaration:`ISetterMethodDeclarationNode`?;
FunctionReferenceInvocationExpression <: InvocationExpression = Syntax:`IInvocationExpressionSyntax`
    Expression:Expression Arguments:AmbiguousExpression*
    FunctionAntetype:`FunctionAntetype`;
InitializerInvocationExpression <: InvocationExpression = Syntax:`IInvocationExpressionSyntax`
    InitializerGroup:InitializerGroupName Arguments:AmbiguousExpression*;
UnknownInvocationExpression <: Expression = Syntax:`IInvocationExpressionSyntax`
    Expression:AmbiguousExpression Arguments:AmbiguousExpression*;

// ---------- Ambiguous Name Expressions
// TODO consider renaming to `UnboundNameExpression` because the final tree could have a bound name that is still ambigous (e.g. could not determine what it refers to)
temp AmbiguousNameExpression <: AmbiguousExpression = Syntax:`INameExpressionSyntax`;
temp AmbiguousName <: AmbiguousNameExpression;
temp UnresolvedSimpleName <: AmbiguousName = Syntax:`ISimpleNameSyntax`;
temp StandardNameExpression <: AmbiguousName = Syntax:`IStandardNameExpressionSyntax`
    Name:`StandardName` ReferencedDeclarations:`IDeclarationNode`*;
temp IdentifierNameExpression <: AmbiguousName, StandardNameExpression, UnresolvedSimpleName, AmbiguousAssignableExpression
    = Syntax:`IIdentifierNameExpressionSyntax` Name:`IdentifierName`;
temp GenericNameExpression <: AmbiguousName, StandardNameExpression
    = Syntax:`IGenericNameExpressionSyntax` Name:`GenericName` TypeArguments:Type*;
temp MemberAccessExpression <: AmbiguousName, AmbiguousAssignableExpression
    = Syntax:`IMemberAccessExpressionSyntax` Context:AmbiguousExpression MemberName:`StandardName` TypeArguments:Type*;
temp PropertyName <: AmbiguousName, AmbiguousAssignableExpression
    = Syntax:`IMemberAccessExpressionSyntax` Context:Expression PropertyName:`StandardName`
    ReferencedPropertyAccessors:{`IPropertyAccessorDeclarationNode`};

// ---------- Name Expressions
NameExpression <: Expression, AmbiguousNameExpression = Syntax:`INameExpressionSyntax`;
LocalBindingNameExpression <: NameExpression = ReferencedDefinition:`IBindingNode`?;
SimpleNameExpression <: NameExpression, UnresolvedSimpleName;
// TODO Name <: NameExpression
NamespaceName <: NameExpression = ReferencedDeclarations:`INamespaceDeclarationNode`*;
UnqualifiedNamespaceName <: NamespaceName = Syntax:`IIdentifierNameExpressionSyntax` Name:`IdentifierName`;
QualifiedNamespaceName <: NamespaceName = Syntax:`IMemberAccessExpressionSyntax` Context:NamespaceName Name:`IdentifierName`;
FunctionGroupName <: NameExpression = Context:NameExpression? FunctionName:`StandardName` TypeArguments:Type*
    ReferencedDeclarations:{`IFunctionInvocableDeclarationNode`};
FunctionName <: NameExpression = FunctionGroup:FunctionGroupName FunctionName:`StandardName` TypeArguments:`ITypeNode`*
    ReferencedDeclaration:`IFunctionInvocableDeclarationNode`?;
MethodGroupName <: NameExpression = Syntax:`IMemberAccessExpressionSyntax`
    Context:Expression MethodName:`StandardName` TypeArguments:Type*
    ReferencedDeclarations:{`IStandardMethodDeclarationNode`};
FieldAccessExpression <: NameExpression, AssignableExpression = Syntax:`IMemberAccessExpressionSyntax`
    Context:Expression FieldName:`IdentifierName` ReferencedDeclaration:`IFieldDeclarationNode`;
VariableNameExpression <: LocalBindingNameExpression, AssignableExpression, SimpleNameExpression
    = Syntax:`IIdentifierNameExpressionSyntax` Name:`IdentifierName` ReferencedDefinition:`ILocalBindingNode`;
TypeNameExpression <: NameExpression = Syntax:`INameExpressionSyntax`
    Name:`StandardName` TypeArguments:Type* ReferencedDeclaration:`ITypeDeclarationNode`;
StandardTypeNameExpression <: TypeNameExpression = Syntax:`IStandardNameExpressionSyntax` TypeArguments:Type*;
QualifiedTypeNameExpression <: TypeNameExpression = Syntax:`IMemberAccessExpressionSyntax`
    Context:NamespaceName TypeArguments:Type*;
InitializerGroupName <: NameExpression = Syntax:`INameExpressionSyntax`
    Context:TypeNameExpression InitializerName:`StandardName`? InitializingAntetype:`IMaybeAntetype`
    ReferencedDeclarations:{`IInitializerDeclarationNode`};
// TODO merge with SpecialTypeName and keep the name "SpecialTypeName" because it really isn't an expression
SpecialTypeNameExpression <: NameExpression
    = Syntax:`ISpecialTypeNameExpressionSyntax` Name:`SpecialTypeName` ReferencedSymbol:`TypeSymbol`;
InstanceExpression <: NameExpression, SimpleNameExpression = Syntax:`IInstanceExpressionSyntax`; // i.e. `self` or `base`
// TODO BaseExpression <: InstanceExpression
SelfExpression <: InstanceExpression, LocalBindingNameExpression
    = Syntax:`ISelfExpressionSyntax` IsImplicit:`bool`;
MissingNameExpression <: NameExpression, SimpleNameExpression, AssignableExpression
    = Syntax:`IMissingNameSyntax`;
UnknownNameExpression <: NameExpression = Syntax:`INameExpressionSyntax`;
UnknownStandardNameExpression <: UnknownNameExpression
    = Syntax:`IStandardNameExpressionSyntax` Name:`StandardName` ReferencedDeclarations:{`IDeclarationNode`};
UnknownIdentifierNameExpression <: UnknownStandardNameExpression, SimpleNameExpression, AssignableExpression
    = Syntax:`IIdentifierNameExpressionSyntax` Name:`IdentifierName`;
UnknownGenericNameExpression <: UnknownStandardNameExpression
    = Syntax:`IGenericNameExpressionSyntax` Name:`GenericName` TypeArguments:Type*;
UnknownMemberAccessExpression <: UnknownNameExpression, AssignableExpression
    = Syntax:`IMemberAccessExpressionSyntax` Context:Expression MemberName:`StandardName` TypeArguments:Type*
    ReferencedMembers:{`IDeclarationNode`};

// ---------- Capability Expressions
temp AmbiguousMoveExpression <: AmbiguousExpression = Syntax:`IMoveExpressionSyntax` Referent:UnresolvedSimpleName;
RecoveryExpression <: Expression = Referent:Expression IsImplicit:`bool`;
MoveExpression <: RecoveryExpression = Referent:Expression;
MoveVariableExpression <: MoveExpression = Referent:LocalBindingNameExpression;
MoveValueExpression <: MoveExpression = Referent:Expression;
ImplicitTempMoveExpression <: Expression = Referent:Expression;
temp AmbiguousFreezeExpression <: AmbiguousExpression = Syntax:`IFreezeExpressionSyntax` Referent:UnresolvedSimpleName;
FreezeExpression <: RecoveryExpression = Referent:Expression IsTemporary:`bool`;
FreezeVariableExpression <: FreezeExpression = Referent:LocalBindingNameExpression;
FreezeValueExpression <: FreezeExpression = Referent:Expression;
PrepareToReturnExpression <: Expression = Value:Expression;

// ---------- Async Expressions
AsyncBlockExpression <: Expression = Syntax:`IAsyncBlockExpressionSyntax` Block:BlockExpression;
AsyncStartExpression <: Expression = Syntax:`IAsyncStartExpressionSyntax` Scheduled:`bool`
    Expression:AmbiguousExpression;
AwaitExpression <: Expression = Syntax:`IAwaitExpressionSyntax`
    Expression:AmbiguousExpression;

// -------------------------------------------------------------------------------------------------
// Declarations
// -------------------------------------------------------------------------------------------------
// Declarations are the abstractions of both definitions and symbols. They are used to represent
// what a name can refer to.
// -------------------------------------------------------------------------------------------------
// TODO move into separate aspect

Declaration;
ChildDeclaration <: Declaration, Child;
NamedDeclaration <: ChildDeclaration;
SymbolDeclaration <: Declaration;

// ---------- Bindings
BindingDeclaration <: ChildDeclaration;
NamedBindingDeclaration <: BindingDeclaration, NamedDeclaration;

// ---------- Package Declarations
PackageDeclaration <: SymbolDeclaration = AliasOrName:`IdentifierName`? Name:`IdentifierName`
    MainFacet:PackageFacetDeclaration TestingFacet:PackageFacetDeclaration;

// ---------- Facet Declarations
/// Facets separate the testing and non-testing aspects of a package. They do no have their own
/// symbol. They use the package symbol.
PackageFacetDeclaration <: ChildDeclaration, SymbolDeclaration;

// TODO better name for this
// Any child declaration node of a facet (not just members)
PackageFacetChildDeclaration <: ChildDeclaration;

// ---------- Declarations
InvocableDeclaration <: SymbolDeclaration, ChildDeclaration;
FunctionInvocableDeclaration <: NamedDeclaration, InvocableDeclaration;

// ---------- Namespace Declarations
NamespaceDeclaration <: NamespaceMemberDeclaration;
NamespaceMemberDeclaration <: PackageFacetChildDeclaration, NamedDeclaration, SymbolDeclaration
    = Name:`StandardName`;

// ---------- Function Declaration
FunctionDeclaration <: NamespaceMemberDeclaration, FunctionInvocableDeclaration;

// ---------- Type Declarations
TypeDeclaration <: NamedDeclaration, SymbolDeclaration;
BuiltInTypeDeclaration <: TypeDeclaration = Name:`SpecialTypeName` Members:{TypeMemberDeclaration};
UserTypeDeclaration <: NamespaceMemberDeclaration, ClassMemberDeclaration, TraitMemberDeclaration, StructMemberDeclaration, TypeDeclaration, NamedDeclaration
    = Name:`StandardName` GenericParameters:GenericParameterDeclaration* Members:{TypeMemberDeclaration};
ClassDeclaration <: UserTypeDeclaration = Members:{ClassMemberDeclaration};
StructDeclaration <: UserTypeDeclaration = Members:{StructMemberDeclaration};
TraitDeclaration <: UserTypeDeclaration = Members:{TraitMemberDeclaration};

// ---------- Type Declaration Parts
GenericParameterDeclaration <: TypeDeclaration, AssociatedMemberDeclaration
    = Name:`IdentifierName` Members:{TypeMemberDeclaration};

// ---------- Type Member Declarations (i.e. declarations that can be contained in a type)
TypeMemberDeclaration <: PackageFacetChildDeclaration, SymbolDeclaration;
ClassMemberDeclaration <: TypeMemberDeclaration;
TraitMemberDeclaration <: TypeMemberDeclaration;
StructMemberDeclaration <: TypeMemberDeclaration;
AssociatedMemberDeclaration <: ClassMemberDeclaration, TraitMemberDeclaration, StructMemberDeclaration, SymbolDeclaration;
InstanceMemberDeclaration <: TypeMemberDeclaration;

// ---------- Member Declarations
MethodDeclaration <: ClassMemberDeclaration, TraitMemberDeclaration, StructMemberDeclaration, NamedDeclaration, InstanceMemberDeclaration, InvocableDeclaration
    = Name:`IdentifierName`;
StandardMethodDeclaration <: MethodDeclaration;
PropertyAccessorDeclaration <: MethodDeclaration;
GetterMethodDeclaration <: PropertyAccessorDeclaration;
SetterMethodDeclaration <: PropertyAccessorDeclaration;
ConstructorDeclaration <: ClassMemberDeclaration, AssociatedMemberDeclaration, InvocableDeclaration
    = Name:`IdentifierName`?;
InitializerDeclaration <: StructMemberDeclaration, AssociatedMemberDeclaration, InvocableDeclaration
    = Name:`IdentifierName`?;
FieldDeclaration <: NamedDeclaration, ClassMemberDeclaration, StructMemberDeclaration, InstanceMemberDeclaration, NamedBindingDeclaration
    = Name:`IdentifierName`;
AssociatedFunctionDeclaration <: AssociatedMemberDeclaration, FunctionInvocableDeclaration, InvocableDeclaration
    = Name:`StandardName`;

// -------------------------------------------------------------------------------------------------
// Symbol Nodes
// -------------------------------------------------------------------------------------------------
// Implementations of declarations that are derived from symbols.
// -------------------------------------------------------------------------------------------------
// TODO move into separate aspect

// ---------- Parent Symbol Nodes
ChildSymbol <: SymbolDeclaration, ChildDeclaration;

// ---------- Package Symbol Nodes
PackageSymbol <: PackageDeclaration, ChildSymbol
    = PackageReference:`IPackageReferenceNode` /MainFacet/ /TestingFacet/;

// ---------- Facet Symbol Nodes
// Facets separate the testing and non-testing aspects of a package. They do no have their own symbol.
PackageFacetSymbol <: PackageFacetDeclaration, ChildSymbol = SymbolTree:`FixedSymbolTree`;

// ---------- Namespace Symbol Nodes
NamespaceSymbol <: NamespaceDeclaration, NamespaceMemberSymbol = Symbol:`NamespaceSymbol`;
NamespaceMemberSymbol <: NamespaceMemberDeclaration, ChildSymbol;

// ---------- Function Symbol Nodes
FunctionSymbol <: FunctionDeclaration, NamespaceMemberSymbol = Symbol:`FunctionSymbol`;

// ---------- Type Symbol Nodes
TypeSymbol <: TypeDeclaration, ChildSymbol = Symbol:`TypeSymbol`;
BuiltInTypeSymbol <: BuiltInTypeDeclaration, TypeSymbol;
EmptyTypeSymbol <: BuiltInTypeSymbol = Symbol:`EmptyTypeSymbol`;
PrimitiveTypeSymbol <: BuiltInTypeSymbol = Symbol:`PrimitiveTypeSymbol`;
UserTypeSymbol <: UserTypeDeclaration, TypeSymbol, NamespaceMemberSymbol = Symbol:`UserTypeSymbol`;
ClassSymbol <: ClassDeclaration, UserTypeSymbol = /GenericParameters/ /Members/;
StructSymbol <: StructDeclaration, UserTypeSymbol = /GenericParameters/ /Members/;
TraitSymbol <: TraitDeclaration, UserTypeSymbol = /GenericParameters/ /Members/;

// ---------- Type Declaration Parts
GenericParameterSymbol <: GenericParameterDeclaration, ChildSymbol = Symbol:`GenericParameterTypeSymbol`;

// ---------- Type Member Declarations (i.e. declarations that can be contained in a type)
TypeMemberSymbol <: TypeMemberDeclaration, ChildSymbol;
ClassMemberSymbol <: ClassMemberDeclaration, TypeMemberSymbol;
TraitMemberSymbol <: TraitMemberDeclaration, TypeMemberSymbol;
StructMemberSymbol <: StructMemberDeclaration, TypeMemberSymbol;
AssociatedMemberSymbol <: AssociatedMemberDeclaration, ClassMemberSymbol, TraitMemberSymbol, StructMemberSymbol;

// ---------- Member Symbol Nodes
MethodSymbol <: MethodDeclaration, ClassMemberSymbol, TraitMemberSymbol, StructMemberSymbol
    = Symbol:`MethodSymbol`;
StandardMethodSymbol <: StandardMethodDeclaration, MethodSymbol;
GetterMethodSymbol <: GetterMethodDeclaration, MethodSymbol;
SetterMethodSymbol <: SetterMethodDeclaration, MethodSymbol;
ConstructorSymbol <: ConstructorDeclaration, ClassMemberSymbol = Symbol:`ConstructorSymbol`;
InitializerSymbol <: InitializerDeclaration, StructMemberSymbol = Symbol:`InitializerSymbol`;
FieldSymbol <: FieldDeclaration, ClassMemberSymbol, StructMemberSymbol = Symbol:`FieldSymbol`;
AssociatedFunctionSymbol <: AssociatedFunctionDeclaration, AssociatedMemberSymbol
    = Symbol:`FunctionSymbol`;
