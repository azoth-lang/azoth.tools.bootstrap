◊namespace Azoth.Tools.Bootstrap.Compiler.Semantics.Structure;
◊name ContextAspect;
◊using Azoth.Tools.Bootstrap.Compiler.Core.Code;

// ↓ ↑ ⮡ ✎

// Attribute supertype needed because of the conflict between types of inherited attributes
↓ *.ContainingDeclaration <: SymbolDeclaration;

// ---------- Parent
↓ computed Child.Package: PackageDeclaration;

// ---------- Facets
= PackageFacet.*.**.Facet => this;
= PackageFacet.*.ContainingDeclaration => this;

// ---------- Code Files
↓ computed Code.File: `CodeFile`;
↑ CompilationUnit.File: `CodeFile` => Syntax.File;
= CompilationUnit.*.**.File;
↓ computed CompilationUnit.ContainingDeclaration: PackageFacet;

// ---------- Definitions
↓ Definition.Facet: PackageFacet;
↓ computed Definition.ContainingDeclaration: SymbolDeclaration;

// ---------- Namespace Definitions
↓ computed NamespaceBlockDefinition.ContainingDeclaration: NamespaceDefinition;

// ---------- Function Definition
↓ computed FunctionDefinition.ContainingDeclaration: NamespaceDeclaration;

// ---------- Type Definition Parts
= TypeDefinition.*.**.ContainingTypeDefinition => this;
↓ computed GenericParameter.ContainingDeclaration: UserTypeDeclaration;

// ---------- Parameters
↓ SelfParameter.ContainingTypeDefinition: TypeDefinition;
↓ FieldParameter.ContainingTypeDefinition: TypeDefinition;

// ---------- Name Expressions
↓ SelfExpression.ContainingDeclaration: ExecutableDefinition;

// -------------------------------------------------------------------------------------------------
// Declarations
// -------------------------------------------------------------------------------------------------

// ---------- Packages
= PackageDeclaration.*.**.Package => this;

// ---------- Facets
↓ computed PackageFacetChildDeclaration.Facet: PackageFacetDeclaration;

// -------------------------------------------------------------------------------------------------
// Symbol Nodes
// -------------------------------------------------------------------------------------------------

// ---------- Facets
= PackageFacetSymbol.*.**.Facet => this;
