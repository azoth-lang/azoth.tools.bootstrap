◊namespace Azoth.Tools.Bootstrap.Compiler.Semantics.Structure;
◊name DefinitionsAspect;
◊using Azoth.Tools.Bootstrap.Compiler.Core.Diagnostics;
◊using Azoth.Tools.Bootstrap.Framework;

// ↓ ⟳ ↑ ⮡ ↗↖ →*← ✎

↗↖ *.Diagnostics:`DiagnosticCollection` from `DiagnosticCollectionBuilder` done Build;

// ---------- Bindings
↑ Binding.IsLentBinding: `bool`;
↑ NamedBinding.IsMutableBinding: `bool`;

// ---------- Packages
/// <remarks>Implements <see cref="IPackageDeclarationNode.AliasOrName"/> which
/// should be <see langword="null"/> for the current package.</remarks>
↑ Package.AliasOrName: `IdentifierName`? => null;
↑ Package.Name: `IdentifierName` => Syntax.Name;
↑ Package.EntryPoint: FunctionDefinition?;
↗↖ Package.Diagnostics;
↑ PackageReference.AliasOrName: `IdentifierName`;
↑ PackageReference.IsTrusted: `bool`;
= StandardPackageReference.AliasOrName => Syntax.AliasOrName;
= StandardPackageReference.IsTrusted => Syntax.IsTrusted;
= IntrinsicsPackageReference.AliasOrName => PackageSymbols.PackageSymbol.Name;
= IntrinsicsPackageReference.IsTrusted => true;
↑ IntrinsicsPackageReference.Syntax: `IPackageReferenceSyntax`? => null;

// ---------- Facets
↑ PackageFacet.Definitions: {FacetMemberDefinition};

// ---------- Code Files
↗↖ CompilationUnit.Diagnostics;
= CompilationUnit.↑.Diagnostics;
↑ CompilationUnit.ImplicitNamespaceName: `NamespaceName` => Syntax.ImplicitNamespaceName;
↑ CompilationUnit.ImplicitNamespaceSymbol: `NamespaceSymbol` => ImplicitNamespace.Symbol;
↑ UsingDirective.Name:`NamespaceName` => Syntax.Name;

// ---------- Namespace Definitions
↑ NamespaceBlockDefinition.DeclaredNames: `NamespaceName` => Syntax.DeclaredNames;
↑ NamespaceBlockDefinition.IsGlobalQualified: `bool` => Syntax.IsGlobalQualified;
= NamespaceBlockDefinition.Name => DeclaredNames.Segments.LastOrDefault();
↑ NamespaceDefinition.Syntax: `ISyntax`? => null;
↑ eager NamespaceDefinition.Members: NamespaceMemberDefinition*;

// ---------- Function Definition
↑ FunctionDefinition.Name: `IdentifierName` => Syntax.Name;

// ---------- Type Definitions
↑ TypeDefinition.IsConst: `bool` => Syntax.ConstModifier is not null;
↑ TypeDefinition.Name:`StandardName` => Syntax.Name;
↑ ClassDefinition.IsAbstract: `bool` => Syntax.AbstractModifier is not null;

// ---------- Type Definition Parts
↑ GenericParameter.Name: `IdentifierName` => Syntax.Name;
↑ GenericParameter.Independence: `TypeParameterIndependence` => Syntax.Independence;
↑ GenericParameter.Variance: `TypeParameterVariance` => Syntax.Variance;

// ---------- Member Definitions
↑ MethodDefinition.Name:`IdentifierName` => Syntax.Name;
↑ MethodDefinition.Kind: `MethodKind`;
= AbstractMethodDefinition.Kind => MethodKind.Standard;
= AbstractMethodDefinition.Arity => Parameters.Count;
= StandardMethodDefinition.Kind => MethodKind.Standard;
= StandardMethodDefinition.Arity => Parameters.Count;
= GetterMethodDefinition.Kind => MethodKind.Getter;
= SetterMethodDefinition.Kind => MethodKind.Setter;
↑ ConstructorDefinition.Name: `IdentifierName`? => Syntax?.Name;
↑ DefaultConstructorDefinition.Syntax: `IConstructorDefinitionSyntax`? => null;
↑ DefaultConstructorDefinition.Parameters: ConstructorOrInitializerParameter*
    => FixedList.Empty<IConstructorOrInitializerParameterNode>();
↑ DefaultConstructorDefinition.Body: Body? => null;
↑ InitializerDefinition.Name: `IdentifierName`? => Syntax?.Name;
↑ DefaultInitializerDefinition.Syntax: `IInitializerDefinitionSyntax`? => null;
↑ DefaultInitializerDefinition.Parameters: ConstructorOrInitializerParameter*
    => FixedList.Empty<IConstructorOrInitializerParameterNode>();
↑ DefaultInitializerDefinition.Body: Body? => null;
= FieldDefinition.IsLentBinding => false;
= FieldDefinition.IsMutableBinding => Syntax.IsMutableBinding;
↑ FieldDefinition.Name: `IdentifierName` => Syntax.Name;
↑ AssociatedFunctionDefinition.Name:`IdentifierName` => Syntax.Name;

// ---------- Capabilities
↑ CapabilityConstraint.Constraint: `ICapabilityConstraint`;
↑ CapabilitySet.Constraint: `CapabilitySet` => Syntax.Constraint;
↑ Capability.Capability: `Capability` => Syntax.Capability;
= Capability.Constraint => Syntax.Capability;

// ---------- Parameters
↑ Parameter.Name: `IdentifierName`?;
↑ Parameter.Unused: `bool` => Name?.Text.StartsWith('_') ?? false;
↑ ConstructorOrInitializerParameter.Name: `IdentifierName`;

// TODO I don't think NamedParameter.Name should have to be an attribute, an equation should be enough
//= NamedParameter.Name => Syntax.Name;
= NamedParameter.IsLentBinding => Syntax.IsLentBinding;
= NamedParameter.IsMutableBinding => Syntax.IsMutableBinding;
↑ NamedParameter.Name: `IdentifierName` => Syntax.Name;

= SelfParameter.Name => null;
= SelfParameter.IsLentBinding => Syntax.IsLentBinding;
= FieldParameter.Name => Syntax.Name;

// ---------- Control Flow
↑ Entry.Syntax: `ICodeSyntax`? => null;
↑ Exit.Syntax: `ICodeSyntax`? => null;

// ---------- Statements
= VariableDeclarationStatement.IsLentBinding => false;
= VariableDeclarationStatement.IsMutableBinding => Syntax.IsMutableBinding;
= VariableDeclarationStatement.Name => Syntax.Name;

// ---------- Patterns
↑ BindingContextPattern.IsMutableBinding: `bool` => Syntax.IsMutableBinding;
= BindingPattern.IsLentBinding => false;
= BindingPattern.IsMutableBinding => Syntax.IsMutableBinding;
= BindingPattern.Name => Syntax.Name;

// ---------- Types
↑ TypeName.Name: `TypeName` => Syntax.Name;
↑ StandardTypeName.Name: `StandardName` => Syntax.Name;
↑ IdentifierTypeName.Name: `IdentifierName` => Syntax.Name;
↑ SpecialTypeName.Name: `SpecialTypeName` => Syntax.Name;
↑ GenericTypeName.Name: `GenericName` => Syntax.Name;
↑ ParameterType.IsLent: `bool` => Syntax.IsLent;

// ---------- Control Flow Expressions
= ForeachExpression.IsLentBinding => false;
= ForeachExpression.Name => VariableName;

// ---------- Ambiguous Name Expressions
↑ StandardNameExpression.Name: `StandardName` => Syntax.Name;
↑ IdentifierNameExpression.Name: `IdentifierName` => Syntax.Name;
↑ GenericNameExpression.Name: `GenericName` => Syntax.Name;

// ---------- Name Expressions
↑ SelfExpression.IsImplicit:`bool` => Syntax.IsImplicit;

// -------------------------------------------------------------------------------------------------
// Declarations
// -------------------------------------------------------------------------------------------------

// ---------- Facets
↑ PackageFacetChildDeclaration.Name: `StandardName`?;
