◊namespace Azoth.Tools.Bootstrap.Compiler.Semantics.Structure;
◊name DefinitionsAspect;
◊using Azoth.Tools.Bootstrap.Compiler.Core.Diagnostics;
◊using Azoth.Tools.Bootstrap.Framework;

// ↓ ↑ ⮡ ✎ ↗↖

↗↖ *.Diagnostics:`DiagnosticCollection` from `DiagnosticCollectionBuilder` done Build;

// ---------- Packages

/// <remarks>Implements <see cref="IPackageDeclarationNode.AliasOrName"/> which
/// should be <see langword="null"/> for the current package.</remarks>
↑ Package.AliasOrName: `IdentifierName`? => null;
↑ Package.Name: `IdentifierName` => Syntax.Name;
↑ Package.EntryPoint: FunctionDefinition?;
↗↖ Package.Diagnostics;
↑ PackageReference.AliasOrName: `IdentifierName`;
↑ PackageReference.IsTrusted: `bool`;
= StandardPackageReference.AliasOrName => Syntax.AliasOrName;
= StandardPackageReference.IsTrusted => Syntax.IsTrusted;
= IntrinsicsPackageReference.AliasOrName => PackageSymbols.PackageSymbol.Name;
= IntrinsicsPackageReference.IsTrusted => true;
↑ IntrinsicsPackageReference.Syntax: `IPackageReferenceSyntax`? => null;

// ---------- Facets
↑ PackageFacet.Definitions: {FacetMemberDefinition};

// ---------- Code Files
↗↖ CompilationUnit.Diagnostics;
= CompilationUnit.↑.Diagnostics;
↑ CompilationUnit.ImplicitNamespaceName: `NamespaceName` => Syntax.ImplicitNamespaceName;
↑ CompilationUnit.ImplicitNamespaceSymbol: `NamespaceSymbol` => ImplicitNamespace.Symbol;
↑ UsingDirective.Name:`NamespaceName` => Syntax.Name;

// ---------- Namespace Definitions
↑ NamespaceBlockDefinition.DeclaredNames: `NamespaceName` => Syntax.DeclaredNames;
↑ NamespaceBlockDefinition.IsGlobalQualified: `bool` => Syntax.IsGlobalQualified;
= NamespaceBlockDefinition.Name => DeclaredNames.Segments.LastOrDefault();
↑ NamespaceDefinition.Syntax: `ISyntax`? => null;
↑ eager NamespaceDefinition.Members: NamespaceMemberDefinition*;

// ---------- Function Definition
↑ FunctionDefinition.Name: `IdentifierName` => Syntax.Name;

// ---------- Type Definitions
↑ TypeDefinition.IsConst: `bool` => Syntax.ConstModifier is not null;
↑ TypeDefinition.Name:`StandardName` => Syntax.Name;
↑ ClassDefinition.IsAbstract: `bool` => Syntax.AbstractModifier is not null;

// ---------- Type Definition Parts
↑ GenericParameter.Name: `IdentifierName` => Syntax.Name;
↑ GenericParameter.Independence: `TypeParameterIndependence` => Syntax.Independence;
↑ GenericParameter.Variance: `TypeParameterVariance` => Syntax.Variance;

// ---------- Member Definitions
↑ MethodDefinition.Name:`IdentifierName` => Syntax.Name;
↑ MethodDefinition.Kind: `MethodKind`;
= AbstractMethodDefinition.Kind => MethodKind.Standard;
= AbstractMethodDefinition.Arity => Parameters.Count;
= StandardMethodDefinition.Kind => MethodKind.Standard;
= StandardMethodDefinition.Arity => Parameters.Count;
= GetterMethodDefinition.Kind => MethodKind.Getter;
= SetterMethodDefinition.Kind => MethodKind.Setter;

// -------------------------------------------------------------------------------------------------
// Declarations
// -------------------------------------------------------------------------------------------------

// ---------- Facets
↑ PackageFacetChildDeclaration.Name: `StandardName`?;
