◊namespace Azoth.Tools.Bootstrap.Compiler.Semantics.Structure;
◊name DefinitionsAspect;
◊using Azoth.Tools.Bootstrap.Compiler.Core.Diagnostics;
◊using Azoth.Tools.Bootstrap.Compiler.Core.Types;
◊using Azoth.Tools.Bootstrap.Framework;

// ↓ ⟳ ↑ ⮡ ↗↖ →*← ✎

↗↖ *.Diagnostics:`DiagnosticCollection` from `DiagnosticCollectionBuilder` done Build;

// ---------- Bindings
↑ Binding.IsLentBinding: `bool`;
↑ NamedBinding.IsMutableBinding: `bool`;

// ---------- Packages
/// <remarks>Implements <see cref="IPackageDeclarationNode.AliasOrName"/> which
/// should be <see langword="null"/> for the current package.</remarks>
↑ Package.AliasOrName: `IdentifierName`? => null;
↑ Package.Name: `IdentifierName` => Syntax.Name;
↑ Package.EntryPoint: FunctionDefinition?;
↗↖ Package.Diagnostics;
↑ PackageReference.AliasOrName: `IdentifierName`;
↑ PackageReference.IsTrusted: `bool`;
= StandardPackageReference.AliasOrName => Syntax.AliasOrName;
= StandardPackageReference.IsTrusted => Syntax.IsTrusted;
= IntrinsicsPackageReference.AliasOrName => PackageSymbols.PackageSymbol.Name;
= IntrinsicsPackageReference.IsTrusted => true;
↑ IntrinsicsPackageReference.Syntax: `IPackageReferenceSyntax`? => null;

// ---------- Facets
↑ PackageFacet.Definitions: {FacetMemberDefinition};

// ---------- Code Files
↗↖ CompilationUnit.Diagnostics;
= CompilationUnit.↑.Diagnostics;
↑ CompilationUnit.ImplicitNamespaceName: `NamespaceName` => Syntax.ImplicitNamespaceName;
↑ CompilationUnit.ImplicitNamespaceSymbol: `NamespaceSymbol` => ImplicitNamespace.Symbol;
↑ ImportDirective.Name:`NamespaceName` => Syntax.Name;

// ---------- Namespace Definitions
↑ NamespaceBlockDefinition.DeclaredNames: `NamespaceName` => Syntax.DeclaredNames;
↑ NamespaceBlockDefinition.IsGlobalQualified: `bool` => Syntax.IsGlobalQualified;
= NamespaceBlockDefinition.Name => DeclaredNames.Segments.LastOrDefault();
↑ NamespaceDefinition.Syntax: `ISyntax`? => null;
↑ eager NamespaceDefinition.Members: NamespaceMemberDefinition*;

// ---------- Function Definition
↑ FunctionDefinition.Name: `IdentifierName` => Syntax.Name;

// ---------- Type Definitions
↑ TypeDefinition.IsConst: `bool` => Syntax.ConstModifier is not null;
↑ TypeDefinition.Name: `OrdinaryName` => Syntax.Name;
↑ ClassDefinition.IsAbstract: `bool` => Syntax.AbstractModifier is not null;

// ---------- Type Definition Parts
↑ GenericParameter.Name: `IdentifierName` => Syntax.Name;
↑ GenericParameter.Independence: `TypeParameterIndependence` => Syntax.Independence;
↑ GenericParameter.Variance: `TypeParameterVariance` => Syntax.Variance;

// ---------- Member Definitions
↑ MethodDefinition.Name:`IdentifierName` => Syntax.Name;
↑ MethodDefinition.Kind: `MethodKind`;
↑ MethodDefinition.IsAbstract: `bool` => Body is null;
= OrdinaryMethodDefinition.Kind => MethodKind.Standard;
= OrdinaryMethodDefinition.Arity => Parameters.Count;
= GetterMethodDefinition.Kind => MethodKind.Getter;
= SetterMethodDefinition.Kind => MethodKind.Setter;
↑ InitializerDefinition.Name: `IdentifierName`? => Syntax?.Name;
↑ DefaultInitializerDefinition.Syntax: `IInitializerDefinitionSyntax`? => null;
↑ DefaultInitializerDefinition.Parameters: InitializerParameter*
    => FixedList.Empty<IInitializerParameterNode>();
↑ DefaultInitializerDefinition.Body: Body? => null;
= FieldDefinition.IsLentBinding => false;
↑ FieldDefinition.IsMutableBinding: `bool` => Syntax.IsMutableBinding;
↑ FieldDefinition.Name: `IdentifierName` => Syntax.Name;
↑ AssociatedFunctionDefinition.Name:`IdentifierName` => Syntax.Name;
↑ AssociatedTypeDefinition.Name:`IdentifierName` => Syntax.Name;
↑ eager AssociatedTypeDefinition.Variance: `TypeVariance`;

// ---------- Capabilities
↑ CapabilitySet.CapabilitySet: `CapabilitySet` => Syntax.CapabilitySet;
↑ Capability.DeclaredCapability: `DeclaredCapability` => Syntax.Capability;

// ---------- Parameters
↑ Parameter.Name: `IdentifierName`?;
↑ Parameter.Unused: `bool` => Name?.Text.StartsWith('_') ?? false;
↑ InitializerParameter.Name: `IdentifierName`;

// TODO I don't think NamedParameter.Name should have to be an attribute, an equation should be enough
//= NamedParameter.Name => Syntax.Name;
= NamedParameter.IsLentBinding => Syntax.IsLentBinding;
= NamedParameter.IsMutableBinding => Syntax.IsMutableBinding;
↑ NamedParameter.Name: `IdentifierName` => Syntax.Name;

= SelfParameter.Name => null;
= SelfParameter.IsLentBinding => Syntax.IsLentBinding;
= FieldParameter.Name => Syntax.Name;

// ---------- Types
↑ ParameterType.IsLent: `bool` => Syntax.IsLent;
↑ RefType.IsInternal: `bool` => Syntax.IsInternal;
↑ RefType.IsMutableBinding: `bool` => Syntax.IsMutableBinding;

// ---------- Control Flow
↑ Entry.Syntax: `ICodeSyntax`? => null;
↑ Exit.Syntax: `ICodeSyntax`? => null;

// ---------- Statements
= VariableDeclarationStatement.IsLentBinding => false;
= VariableDeclarationStatement.IsMutableBinding => Syntax.IsMutableBinding;
= VariableDeclarationStatement.Name => Syntax.Name;

// ---------- Patterns
↑ BindingContextPattern.IsMutableBinding: `bool` => Syntax.IsMutableBinding;
= BindingPattern.IsLentBinding => false;
= BindingPattern.IsMutableBinding => Syntax.IsMutableBinding;
= BindingPattern.Name => Syntax.Name;

// ---------- Control Flow Expressions
= ForeachExpression.IsLentBinding => false;
= ForeachExpression.IsMutableBinding => Syntax.IsMutableBinding;
= ForeachExpression.Name => VariableName;
↑ ForeachExpression.VariableName: `IdentifierName` => Syntax.VariableName;

// ---------- Unresolved Expressions
↑ UnresolvedMemberAccessExpression.MemberName: `OrdinaryName` => Syntax.MemberName;

// ---------- Instance Member Access Expressions
↑ FieldAccessExpression.FieldName: `IdentifierName` => (IdentifierName)Syntax.MemberName;
↑ MethodAccessExpression.MethodName: `OrdinaryName` => Syntax.MemberName;

// ---------- Literal Expressions
↑ BoolLiteralExpression.Value: `bool` => Syntax.Value;
↑ IntegerLiteralExpression.Value: `BigInteger` => Syntax.Value;
↑ StringLiteralExpression.Value: `string` => Syntax.Value;

// ---------- Operator Expressions
↑ AssignmentExpression.Operator: `AssignmentOperator` => Syntax.Operator;
↑ BinaryOperatorExpression.Operator: `BinaryOperator` => Syntax.Operator;
↑ UnaryOperatorExpression.Operator: `UnaryOperator` => Syntax.Operator;
↑ UnaryOperatorExpression.Fixity: `UnaryOperatorFixity` => Syntax.Fixity;
↑ ConversionExpression.Operator: `ConversionOperator` => Syntax.Operator;
↑ ImplicitConversionExpression.Syntax: `IExpressionSyntax` => Referent.Syntax;
↑ RefExpression.IsInternal: `bool` => Syntax.IsInternal;
↑ RefExpression.IsMutableBinding: `bool` => Syntax.IsMutableBinding;
↑ ImplicitDerefExpression.Syntax: `IExpressionSyntax` => Referent.Syntax;

// ---------- Invocation Expressions
↑ InvocationExpression.TempAllArguments: IEnumerable<AmbiguousExpression>;
↑ InvocationExpression.AllArguments: IEnumerable<Expression?>;
= UnresolvedInvocationExpression.TempAllArguments => TempArguments;
= UnresolvedInvocationExpression.AllArguments => Arguments;
= FunctionInvocationExpression.TempAllArguments => TempArguments;
= FunctionInvocationExpression.AllArguments => Arguments;
= MethodInvocationExpression.TempAllArguments => TempArguments.Prepend(Method.Context);
= MethodInvocationExpression.AllArguments => Arguments.Prepend(Method.Context);
↑ GetterInvocationExpression.PropertyName: `OrdinaryName` => Syntax.MemberName;
= GetterInvocationExpression.TempAllArguments => [Context];
= GetterInvocationExpression.AllArguments => [Context];
= SetterInvocationExpression.TempAllArguments => [Context, TempValue];
= SetterInvocationExpression.AllArguments => [Context, Value];
= FunctionReferenceInvocationExpression.TempAllArguments => TempArguments;
= FunctionReferenceInvocationExpression.AllArguments => Arguments;
= InitializerInvocationExpression.TempAllArguments => TempArguments;
= InitializerInvocationExpression.AllArguments => Arguments;
= NonInvocableInvocationExpression.TempAllArguments => TempArguments;
= NonInvocableInvocationExpression.AllArguments => Arguments;

// ---------- Name Expressions
↑ VariableNameExpression.Name: `IdentifierName` => Syntax.Name;
↑ SelfExpression.IsImplicit: `bool` => Syntax.IsImplicit;

// ---------- Unresolved Name Expressions
↑ UnresolvedOrdinaryNameExpression.Name: `OrdinaryName`;
↑ UnresolvedIdentifierNameExpression.Name: `IdentifierName` => Syntax.Name;
↑ UnresolvedGenericNameExpression.Name: `GenericName` => Syntax.Name;

// ---------- Names
↑ UnqualifiedNamespaceName.Name: `IdentifierName` => Syntax.Name;
↑ QualifiedNamespaceName.Name: `IdentifierName` => (IdentifierName)Syntax.MemberName;

// ---------- Unresolved Names
↑ UnresolvedOrdinaryName.Name: `OrdinaryName`;
↑ UnresolvedIdentifierName.Name: `IdentifierName` => Syntax.Name;
↑ UnresolvedGenericName.Name: `GenericName` => Syntax.Name;
↑ UnresolvedQualifiedName.MemberName: `OrdinaryName` => Syntax.MemberName;

// ---------- Type Names
↑ UnqualifiedTypeName.Name: `UnqualifiedName` => Syntax.Name;
↑ BuiltInTypeName.Name: `BuiltInTypeName` => Syntax.Name;
↑ OrdinaryTypeName.Name: `OrdinaryName` => Syntax.Name;
↑ IdentifierTypeName.Name: `IdentifierName` => Syntax.Name;
↑ GenericTypeName.Name: `GenericName` => Syntax.Name;

// ---------- Capability Expressions
↑ PrepareToReturnExpression.Syntax: `IExpressionSyntax` => Value.Syntax;

// ---------- Async Expressions
↑ AsyncStartExpression.Scheduled: `bool` => Syntax.Scheduled;

// -------------------------------------------------------------------------------------------------
// Declarations
// -------------------------------------------------------------------------------------------------

// ---------- Facets
↑ PackageFacetChildDeclaration.Name: `OrdinaryName`?;
