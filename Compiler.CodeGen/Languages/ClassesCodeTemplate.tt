<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Azoth.Tools.Bootstrap.Compiler.CodeGen.Core" #>
<#  foreach(var usingNamespace in Build.OrderedNamespaces(grammar, "System.CodeDom.Compiler")) { #>
using <#=usingNamespace #>;
<#  } #>

// ReSharper disable InconsistentNaming
// ReSharper disable PartialTypeWithSinglePart

// ReSharper disable once CheckNamespace
namespace <#=grammar.Namespace #>;

<#  foreach(var rule in grammar.Rules.Where(ShouldEmit.NewClass)) {#>
[GeneratedCode("AzothCompilerCodeGen", null)]
internal <#=Emit.ClassModifier(rule) #> partial class <#=Emit.ClassName(language, rule.Defines) #> : <#=Emit.ClassName(language, rule.Parent) #>, <#=Emit.QualifiedTypeName(rule.Defines) #>
{
<#      foreach (var property in rule.AllProperties) { #>
    public <#=Emit.ClassPropertyModifier(rule, property) #><#=Emit.ClassType(property.Type) #> <#=property.Name #> { get; }
<#          if (property.ReferencesRule) { #>
    <#=Emit.QualifiedType(property.Type) #> <#= Emit.QualifiedTypeName(rule.Defines) #>.<#=property.Name #> => <#=property.Name #>;
<#          } #>
<#          foreach (var baseProperty in rule.SupertypePropertiesNamed(property).Where(p => p.IsDeclared)) { #>
    <#=Emit.QualifiedType(baseProperty.Type) #> <#= Emit.QualifiedTypeName(baseProperty.Rule.Defines) #>.<#=baseProperty.Name #> => <#=property.Name #>;
<#          } #>
<#      } #>

<#      if (ShouldEmit.Constructor(rule)) { #>
    public <#=Emit.ClassName(language, rule.Defines) #>(<#=Emit.PropertyClassParameters(rule) #>)
    {
<#          foreach(var property in rule.AllProperties) { #>
        <#=property.Name #> = <#=property.Name.ToCamelCase() #>;
<#          } #>
    }
<#      } #>
 }

<#  } #>
<#   foreach(var rule in grammar.Rules.Where(ShouldEmit.AmendedClass)) {#>
internal partial class <#=Emit.ClassName(language, rule.Defines) #> : <#= Emit.QualifiedTypeName(rule.Defines) #>
{
<#      foreach(var property in rule.AllProperties) { #>
<#          if (property.IsDeclared && rule.DeclaredProperties.Contains(property)) { #>
    <#=Emit.QualifiedType(property.Type) #> <#= Emit.QualifiedTypeName(rule.Defines) #>.<#=property.Name #> => <#=property.Name #>;
<#          } #>
<#          foreach (var baseProperty in rule.SupertypePropertiesNamed(property).Where(p => p.IsDeclared)) { #>
    <#=Emit.QualifiedType(baseProperty.Type) #> <#= Emit.QualifiedTypeName(baseProperty.Rule.Defines) #>.<#=baseProperty.Name #> => <#=property.Name #>;
<#          } #>
<#      } #>
}

<#  } #>