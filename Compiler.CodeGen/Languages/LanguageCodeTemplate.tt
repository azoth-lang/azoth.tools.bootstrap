<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Azoth.Tools.Bootstrap.Compiler.CodeGen.Core" #>
<#  foreach(var usingNamespace in Build.OrderedNamespaces(grammar, "ExhaustiveMatching", "System.CodeDom.Compiler")) { #>
using <#=usingNamespace #>;
<#  } #>

namespace <#=grammar.Namespace #>;

// ReSharper disable InconsistentNaming

[GeneratedCode("AzothCompilerCodeGen", null)]
public sealed class <#=language.Name #>
{
<#  foreach(var rule in grammar.Rules) {#>
<#=Emit.ClosedAttribute(rule, indent: "    ") #>    public interface <#= Emit.TypeName(rule.Defines) #><#= Emit.BaseTypes(rule, "IImplementationRestricted") #>
    {
<#      foreach(var property in rule.DeclaredProperties.Where(p => ShouldEmit.Property(rule, p))) { #>
        <#=Emit.PropertyIsNew(property) #><#=Emit.Type(property.Type) #> <#=property.Name #> { get; }
<#      } #>
<#      if (rule.IsTerminal) { #>

        public static <#= Emit.TypeName(rule.Defines) #> Create(<#=Emit.PropertyParameters(rule) #>)
            => new <#=Emit.SmartClassName(rule.Defines) #>(<#=Emit.PropertyArguments(rule) #>);
<#          if (rule.IsModified) { #>

        // public static <#= Emit.TypeName(rule.Defines) #> Create(<#=Emit.ModifiedPropertyParameters(rule) #>)
        //     => new <#=Emit.SmartClassName(rule.Defines) #>(<#=Emit.ModifiedPropertyArguments(rule) #>);
<#          } #>
<#      } #>
    }

<#  } #>
}
