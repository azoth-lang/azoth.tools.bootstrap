<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Azoth.Tools.Bootstrap.Compiler.CodeGen.Core" #>
<#  foreach(var usingNamespace in Build.OrderedNamespaces(grammar, "ExhaustiveMatching")) { #>
using <#=usingNamespace #>;
<#  } #>

namespace <#=grammar.Namespace #>;

// ReSharper disable PartialTypeWithSinglePart

<#  foreach(var rule in grammar.Rules) {#>
<#=Emit.ClosedAttribute(rule) #>public partial interface <#= Emit.TypeName(rule.Defines) #><#= Emit.BaseTypes(rule) #>
{
<#      foreach(var property in rule.DeclaredProperties.Where(p => ShouldEmit.Property(rule, p))) { #>
    <#=Emit.PropertyIsNew(property) #><#=Emit.Type(property.Type) #> <#=property.Name #> { get; }
<#      } #>
}

<#  } #>