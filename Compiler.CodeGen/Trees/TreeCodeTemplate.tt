<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Azoth.Tools.Bootstrap.Compiler.CodeGen.Core" #>
<#  foreach(var usingNamespace in Build.OrderedNamespaces(tree, "ExhaustiveMatching")) { #>
using <#=usingNamespace #>;
<#  } #>

namespace <#=tree.Namespace #>;

// ReSharper disable PartialTypeWithSinglePart

<#  foreach(var node in tree.Nodes) {#>
<#=Emit.ClosedAttribute(node) #>public partial interface <#= Emit.TypeName(node.Defines) #><#= Emit.BaseTypes(node) #>
{
<#      foreach (var property in node.DeclaredProperties.Where(ShouldEmit.Property)) { #>
    <#=Emit.PropertyIsNew(property) #><#=Emit.Type(property.Type) #> <#=property.Name #> { get; }
<#          foreach (var baseProperty in Build.BaseProperties(node, property)) { #>
    <#=Emit.Type(baseProperty.Type) #> <#= Emit.TypeName(baseProperty.Node.Defines) #>.<#=baseProperty.Name #> => <#=property.Name #>;
<#          } #>
<#      } #>
}

<#  } #>