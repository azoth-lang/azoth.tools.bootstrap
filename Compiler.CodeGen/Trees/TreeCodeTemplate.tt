<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Azoth.Tools.Bootstrap.Compiler.CodeGen.Core" #>
<#  foreach(var usingNamespace in grammar.OrderedUsingNamespaces("ExhaustiveMatching")) { #>
using <#=usingNamespace #>;
<#  } #>

namespace <#=grammar.Namespace #>;

// ReSharper disable PartialTypeWithSinglePart

<#  foreach(var rule in grammar.Rules) {#>
<#=Emit.ClosedAttribute(grammar, rule) #>public partial interface <#= grammar.TypeName(rule.Nonterminal) #><#= Emit.BaseTypes(grammar, rule) #>
{
<#      foreach(var property in rule.Properties.Where(p => ShouldEmit.Property(grammar, rule, p))) { #>
    <#=Emit.PropertyIsNew(grammar, rule, property) #><#=Emit.Type(grammar, property.Type) #> <#=property.Name #> { get; }
<#      } #>
}

<#  } #>