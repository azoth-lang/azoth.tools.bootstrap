<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Azoth.Tools.Bootstrap.Compiler.CodeGen.Core" #>
<#@ import namespace="Azoth.Tools.Bootstrap.Compiler.CodeGen.Model" #>
<#@ import namespace="Azoth.Tools.Bootstrap.Compiler.CodeGen.Model.Attributes" #>
<#@ import namespace="Azoth.Tools.Bootstrap.Compiler.CodeGen.Model.AttributeFamilies" #>
<#@ import namespace="Azoth.Tools.Bootstrap.Compiler.CodeGen.Model.Equations" #>
<#@ import namespace="Azoth.Tools.Bootstrap.Compiler.CodeGen.Model.Snippets" #>
<#@ import namespace="Azoth.Tools.Bootstrap.Compiler.CodeGen.Model.Types" #>
<#@ import namespace="Azoth.Tools.Bootstrap.Compiler.CodeGen.Syntax.Equations" #>
<#  foreach(var usingNamespace in Build.OrderedNamespaces(tree,
    Build.Conditional(!tree.SimplifiedTree, "System", "System.Linq", "System.Threading", "Azoth.Tools.Bootstrap.Compiler.Core.Attributes"),
    Build.Conditional(tree.GenerateClasses, "InlineMethod", "System.Collections.Generic"),
    ["ExhaustiveMatching", "System.CodeDom.Compiler", "System.Diagnostics"])) { #>
using <#=usingNamespace #>;
<#  } #>

namespace <#=tree.Namespace #>;

#nullable enable
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantTypeDeclarationBody
// ReSharper disable ReturnTypeCanBeNotNullable
// ReSharper disable ConvertToPrimaryConstructor

<#  foreach(var node in tree.Nodes) {#>
<#=Emit.ClosedAttribute(node) #>[GeneratedCode("AzothCompilerCodeGen", null)]
public partial interface <#= Emit.TypeName(node.Defines) #><#= Emit.BaseTypes(node) #>
{
<#      foreach (var attribute in node.AttributesRequiringDeclaration.ExceptPlaceholders()) { #>
<#          switch (attribute) { #>
<#              case PropertyModel prop when prop.IsChild && prop.IsTemp: #>
    <#= Emit.IsNew(prop) #><#= Emit.Type(prop.Type) #> <#= prop.TempName #> { get; }
    <#= Emit.IsNew(prop) #><#= Emit.Type(prop.FinalType) #> <#= prop.Name #> { get; }
    <#= Emit.IsNew(prop) #><#= Emit.Type(prop.Type) #> <#= prop.CurrentName #> { get; }
<#                  break;#>
<#              case PropertyModel prop when prop.IsChild && prop.MayHaveRewrites: #>
    <#= Emit.IsNew(prop) #><#= Emit.Type(prop.Type) #> <#= prop.Name #> { get; }
    <#= Emit.IsNew(prop) #><#= Emit.Type(prop.Type) #> <#= prop.CurrentName #> { get; }
<#                  break;#>
<#              default: #>
    <#= Emit.IsNew(attribute) #><#= Emit.Type(attribute.Type) #> <#= attribute.Name #><#= Emit.ParametersAndBody(attribute) #>
<#                  break;#>
<#          } #>
<#          foreach (var baseAttribute in Build.BaseAttributes(node, attribute)) { #>
    <#= Emit.Type(baseAttribute.Type) #> <#= Emit.TypeName(baseAttribute.Node.Defines) #>.<#= baseAttribute.Name #><#= Emit.Parameters(baseAttribute) #> => <#= attribute.Name #><#= Emit.Parameters(attribute) #>;
<#              if (baseAttribute.IsChild && baseAttribute.MayHaveRewrites) { #>
    <#= Emit.Type(baseAttribute.Type) #> <#= Emit.TypeName(baseAttribute.Node.Defines) #>.<#= baseAttribute.CurrentName #><#= Emit.Parameters(baseAttribute) #> => <#= attribute.CurrentName #><#= Emit.Parameters(attribute) #>;
<#              } #>
<#          } #>
<#      } #>
<#      foreach (var eq in node.EquationsRequiringEmit) { #>
    <#= Emit.Type(eq.Type) #> <#= Emit.TypeName(eq.Attribute.Node.Defines) #>.<#= eq.Name #><#= Emit.ParametersAndBody(eq) #>
<#      } #>
<#      if (tree.GenerateClasses && !node.IsAbstract) { #>

    public static <#= Emit.TypeName(node.Defines) #> Create(<#= Emit.Parameters(Build.PropertiesForClass(node)) #>)
        => new <#= Emit.ClassName(node.Defines) #>(<#= Emit.Arguments(Build.PropertiesForClass(node)) #>);
<#      } #>
}

<#  } #>
<#  if (tree.GenerateClasses) { #>
<#  if (!tree.SimplifiedTree) { #>
// TODO switch back to `file` and not `partial` once fully transitioned
internal abstract partial class <#= Emit.BaseClassName(tree) #> : TreeNode, IChildTreeNode<<#= Emit.TypeName(tree.RootSupertype) #>>
{
    private <#= Emit.BaseClassName(tree) #>? parent;

    protected <#= Emit.BaseClassName(tree) #>() { }
    protected <#= Emit.BaseClassName(tree) #>(bool inFinalTree) : base(inFinalTree) { }

    [DebuggerStepThrough]
    protected sealed override SemanticNode? PeekParent()
        // Use volatile read to ensure order of operations as seen by other threads. If parent is
        // null, report an error if not in final tree. Root nodes are always in the final tree.
        => Volatile.Read(in parent) ?? (InFinalTree ? null : throw Child.ParentMissing(this));

    private <#= Emit.BaseClassName(tree) #>? GetParent(IInheritanceContext ctx)
    {
        // Use volatile read to ensure order of operations as seen by other threads
        var node = Volatile.Read(in parent) ?? (InFinalTree ? null : throw Child.ParentMissing(this));
        ctx.AccessParentOf(this);
        return node;
    }

    void IChildTreeNode<<#= Emit.TypeName(tree.RootSupertype) #>>.SetParent(<#= Emit.TypeName(tree.RootSupertype) #> newParent)
    {
        if (newParent is not <#= Emit.BaseClassName(tree) #> newParentNode)
            throw new ArgumentException($"Parent must be a {nameof(<#= Emit.BaseClassName(tree) #>)}.", nameof(newParent));

        // Use volatile write to ensure order of operations as seen by other threads
        Volatile.Write(ref parent, newParentNode);
    }

    /// <summary>
    /// The previous node to this one in a preorder traversal of the tree.
    /// </summary>
    protected virtual <#= Emit.BaseClassName(tree) #>? Previous(IInheritanceContext ctx)
    {
        <#= Emit.BaseClassName(tree) #>? previous = null;
        var parent = GetParent(ctx);
        if (parent is null)
            return null;
        foreach (var child in parent.Children().Cast<<#= Emit.BaseClassName(tree) #>>())
        {
            if (child == this)
                // If this is the first child, return the parent without descending
                return previous?.LastDescendant() ?? parent;
            previous = child;
        }

        throw new UnreachableException("Node is not a child of its parent.");
    }

    // TODO can this be more efficient?
    internal <#= Emit.BaseClassName(tree) #> LastDescendant()
        => ((<#= Emit.BaseClassName(tree) #>?)Children().LastOrDefault())?.LastDescendant() ?? this;
<#      if (tree.AllAttributeFamilies.Any()) { #>

    protected int? IndexOfNode<T>(IEnumerable<T> nodes, <#= Emit.BaseClassName(tree) #> node)
        where T : <#= Emit.TypeName(tree.RootSupertype) #>
    {
        if (node is not T value)
            return null;
        var index = 0;
        foreach (var item in nodes)
        {
            if (ReferenceEquals(item, value))
                return index;
            index++;
        }

        return null;
    }

    protected bool ContainsNode<T>(IEnumerable<T> nodes, <#= Emit.BaseClassName(tree) #> node)
        where T : <#= Emit.TypeName(tree.RootSupertype) #>
        => node is T value ? nodes.Contains(value) : false;

    protected bool ContainsNode<T>(IFixedSet<T> nodes, <#= Emit.BaseClassName(tree) #> node)
        where T : <#= Emit.TypeName(tree.RootSupertype) #>
        => node is T value ? nodes.Contains(value) : false;

    protected bool ContainsNode<T>(IReadOnlySet<T> nodes, <#= Emit.BaseClassName(tree) #> node)
        where T : <#= Emit.TypeName(tree.RootSupertype) #>
        => node is T value ? nodes.Contains(value) : false;
<#      } #>
<#      foreach (var attr in tree.AllAttributeFamilies) { #>

<#          switch (attr) { #>
<#              case InheritedAttributeFamilyModel inherited: #>
    internal virtual <#= Emit.Type(attr.Type) #> Inherited_<#= attr.Name #>(<#= Emit.BaseClassName(tree) #> child, <#= Emit.BaseClassName(tree) #> descendant, IInheritanceContext ctx)
        => (<#= Emit.GetParent(inherited) #> ?? throw Child.InheritFailed("<#= attr.Name #>", child, descendant)).Inherited_<#= attr.Name #>(this, descendant, ctx);
    protected <#= Emit.Type(attr.Type) #> Inherited_<#= attr.Name #>(IInheritanceContext ctx)
        => <#= Emit.GetParent(inherited) #>!.Inherited_<#= attr.Name #>(this, this, ctx);
<#                  break;#>
<#              case PreviousAttributeFamilyModel: #>
    internal virtual <#= Emit.Type(attr.Type) #> Next_<#= attr.Name #>(<#= Emit.BaseClassName(tree) #> before, IInheritanceContext ctx)
        => (Previous(ctx) ?? throw Child.PreviousFailed("<#= attr.Name #>", before)).Next_<#= attr.Name #>(this, ctx);
    protected <#= Emit.Type(attr.Type) #> Previous_<#= attr.Name #>(IInheritanceContext ctx)
        => Previous(ctx)!.Next_<#= attr.Name #>(this, ctx);
<#                  break;#>
<#              case AggregateAttributeFamilyModel family: #>
    protected IFixedSet<<#= Emit.BaseClassName(tree) #>> CollectContributors_<#= family.Name #>()
    {
        var contributors = new List<<#= Emit.BaseClassName(tree) #>>();
        foreach (var child in Children().Cast<<#= Emit.BaseClassName(tree) #>>())
            child.CollectContributors_<#= family.Name #>(contributors);
        return contributors.ToFixedSet();
    }
    internal virtual void CollectContributors_<#= family.Name #>(List<<#= Emit.BaseClassName(tree) #>> contributors)
    {
        foreach (var child in Children().Cast<<#= Emit.BaseClassName(tree) #>>())
            child.CollectContributors_<#= family.Name #>(contributors);
    }
    protected <#= Emit.Type(family.Type) #> Collect_<#= family.Name #>(IFixedSet<<#= Emit.BaseClassName(tree) #>> contributors)
    {
        var builder = <#= family.ConstructExpression #>;
        Contribute_This_<#= family.Name #>(builder);
        foreach (var contributor in contributors)
            contributor.Contribute_<#= family.Name #>(builder);
        return builder.<#= family.DoneMethod #>();
    }
    internal virtual void Contribute_This_<#= family.Name #>(<#= Emit.Type(family.FromType) #> builder) { }
    internal virtual void Contribute_<#= family.Name #>(<#= Emit.Type(family.FromType) #> builder) { }
<#                  break;#>
<#              case CollectionAttributeFamilyModel family: #>
    // <#= family.Name #> is a collection attribute family
    protected IFixedSet<<#= Emit.BaseClassName(tree) #>> CollectContributors_<#= family.Name #><#= Emit.RootParam(family) #>(<#= Emit.BaseClassName(tree) #> target, IInheritanceContext ctx)
    {
<#                  if (family.HasRoot) { #>
        if (this is TRoot) return CollectContributors_<#= family.Name #>(target);
<#                  } #>
        return GetParent(ctx)?.CollectContributors_<#= family.Name #><#= Emit.RootParam(family) #>(target, ctx)
            ?? (InFinalTree ? CollectContributors_<#= family.Name #>(target)
                : throw Child.ParentMissing(this));
    }
    // TODO avoid adding this to every node
    private ContributorCollection<<#= Emit.BaseClassName(tree) #>>? contributors_<#= family.Name #>;
    private IFixedSet<<#= Emit.BaseClassName(tree) #>> CollectContributors_<#= family.Name #>(<#= Emit.BaseClassName(tree) #> target)
    {
        var contributors = LazyInitializer.EnsureInitialized(ref contributors_<#= family.Name #>);
        contributors.EnsurePopulated(CollectContributors_<#= family.Name #>);
        return contributors.Remove(target).ToFixedSet();
    }
    internal virtual void CollectContributors_<#= family.Name #>(ContributorCollection<<#= Emit.BaseClassName(tree) #>> contributors)
    {
        foreach (var child in Children().Cast<<#= Emit.BaseClassName(tree) #>>())
            child.CollectContributors_<#= family.Name #>(contributors);
    }
    protected <#= Emit.Type(family.Type) #> Collect_<#= family.Name #>(<#= Emit.BaseClassName(tree) #> target, IFixedSet<<#= Emit.BaseClassName(tree) #>> contributors)
    {
        var builder = <#= family.ConstructExpression #>;
        foreach (var contributor in contributors)
            contributor.Contribute_<#= family.Name #>(target, builder);
        return builder.<#= family.DoneMethod #>();
    }
    internal virtual void Contribute_<#= family.Name #>(<#= Emit.BaseClassName(tree) #> target, <#= Emit.Type(family.FromType) #> builder) { }
<#                  break;#>
<#          } #>
<#      } #>
}

<#  } #>
<#  foreach(var node in tree.Nodes.Where(ShouldEmit.Class)) {#>
[GeneratedCode("AzothCompilerCodeGen", null)]
file class <#= Emit.ClassName(node.Defines) #> : <#= Emit.BaseClass(tree) #><#= Emit.TypeName(node.Defines) #>
{
    private <#= Emit.TypeName(node.Defines) #> Self { [Inline] get => this; }
<#      if (node.IsSyncLockRequired) { #>
    private AttributeLock syncLock;
<#      } #>
<#      if (node.MayHaveRewrite) { #>
    protected override bool MayHaveRewrite => true;
<#      } #>

<#      foreach (var property in Build.PropertiesForClass(node)) { #>
<#          if (property.IsChild && property.MayHaveRewrites) { #>
    private <#= Emit.RewritableBackingType(property) #> <#=Emit.VariableName(property) #>;
<#                  if (property.Type is CollectionTypeModel) { #>
    public <#= Emit.Type(property.Type) #> <#= property.TempName #> => <#=Emit.VariableName(property) #>;
<#                  } else { #>
    private bool <#=Emit.VariableName(property) #>Cached;
    public <#= Emit.Type(property.Type) #> <#= property.TempName #>
        => GrammarAttribute.IsCached(in <#=Emit.VariableName(property) #>Cached) ? <#=Emit.VariableName(property) #>.UnsafeValue
            : this.RewritableChild(ref <#=Emit.VariableName(property) #>Cached, ref <#=Emit.VariableName(property) #>);
<#                  } #>
<#                  if (property.IsTemp) { #>
    public <#= Emit.Type(property.FinalType) #> <#= property.Name #> => <#= Emit.FinalValue(property) #>;
<#                  } #>
    public <#= Emit.Type(property.Type) #> <#= property.CurrentName #> => <#= Emit.CurrentValue(property) #>;
<#          } else { #>
    public <#= Emit.Type(property.Type) #> <#= property.Name #> { [DebuggerStepThrough] get; }
<#          } #>
<#      } #>
<#      foreach (var attr in node.ActualAttributes.Where(ShouldEmit.OnClass)) { #>
    public <#= Emit.Type(attr.Type) #> <#= attr.Name #><#= Emit.Parameters(attr) #><#= Emit.Body(attr) #>
<#      } #>
<#      foreach (var equation in node.ActualEquations) { #>
<#          switch (equation) { #>
<#              case LocalAttributeEquationModel eq when eq.Strategy == EvaluationStrategy.Eager: #>
    public <#= Emit.Type(eq.Type) #> <#= eq.Name #> { [DebuggerStepThrough] get; }
<#                  break;#>
<#              case LocalAttributeEquationModel eq
                    when eq.Strategy == EvaluationStrategy.Lazy || eq.Strategy == EvaluationStrategy.Computed && eq.IsObjectMember(): #>
    public <#= Emit.Override(eq) #><#= Emit.Type(eq.Type) #> <#= eq.Name #><#= Emit.ParametersAndBody(eq) #>
<#                  break;#>
<#          } #>
<#      } #>

    public <#= Emit.ClassName(node.Defines) #>(<#= Emit.Parameters(Build.PropertiesForClass(node)) #>)
<#     if (!tree.SimplifiedTree && node.IsRoot) { #>
        : base(true)
<#     } #>
    {
<#          foreach (var valid in node.Snippets.OfType<ConstructorArgumentValidationModel>()) { #>
        <#= valid.Aspect.Name #>.Validate_<#= Emit.ClassName(node.Defines) #>(<#= Emit.Arguments(Build.PropertiesForClass(node)) #>);
<#          } #>
<#      foreach (var property in Build.PropertiesForClass(node)) { #>
<#          if (!tree.SimplifiedTree && property.IsChild) { #>
        <#= Emit.FieldReference(property) #> = <#= Emit.ChildAttach(property) #><#= Emit.VariableName(property) #>);
<#          } else { #>
        <#= property.TempName #> = <#= Emit.VariableName(property) #><#= Emit.ToCollection(property) #>;
<#          } #>
<#      } #>
<#      foreach (var equation in node.ActualEquations.OfType<LocalAttributeEquationModel>().Where(eq => eq.Strategy == EvaluationStrategy.Eager)) { #>
        <#= equation.Name #> = <#= Emit.EagerBody(equation) #>;
<#      } #>
    }
<#      foreach (var group in node.InheritedAttributeEquationGroups) { #>

    internal override <#= Emit.Type(group.Type) #> Inherited_<#= group.Name #>(<#= Emit.BaseClassName(tree) #> child, <#= Emit.BaseClassName(tree) #> descendant, IInheritanceContext ctx)
    {
<#          foreach (var eq in group.Equations) { #>
        <#= Emit.Selector(eq) #>return <#= Emit.Body(eq) #>;
<#          } #>
<#          if (!group.IsAllDescendants) { #>
        return base.Inherited_<#= group.Name #>(child, descendant, ctx);
<#          } #>
    }
<#      } #>
<#      foreach (var eq in node.ActualEquations.OfType<PreviousAttributeEquationModel>()) { #>

    internal override <#= Emit.Type(eq.Type) #> Next_<#= eq.Name #>(<#= Emit.BaseClassName(tree) #> before, IInheritanceContext ctx)
        => <#= Emit.Body(eq) #>;
<#      } #>
<#      foreach (var attribute in node.ActualAttributes.OfType<AggregateAttributeModel>()) { #>

    internal override void Contribute_<#= attribute.Name #>(<#= Emit.Type(attribute.FromType) #> builder)
        => builder.<#= attribute.AggregateMethod #>(<#= attribute.Name #>);
<#      } #>
<#      foreach (var family in tree.AllAttributeFamilies.OfType<AggregateAttributeFamilyModel>()) { #>
<#          if (ShouldEmit.CollectContributors(family, node)) { #>

    internal override void CollectContributors_<#= family.Name #>(List<<#= Emit.BaseClassName(tree) #>> contributors)
<#              if (ShouldEmit.CollectContributorsFromChildren(family, node)) { #>
    {
        contributors.Add(this);
        base.CollectContributors_<#= family.Name #>(contributors);
    }
<#              } else { #>
        => contributors.Add(this);
<#              } #>
<#          } #>
<#          if (ShouldEmit.OverrideContribute(family, node)) { #>

    internal override void <#= Emit.ContributeMethodName(family, node) #>(<#= Emit.Type(family.FromType) #> builder)
    {
<#              foreach (var equation in Build.Equations(node, family)) { #>
        <#= Emit.QualifiedEquationMethod(equation) #>(this, builder);
<#              } #>
    }
<#          } #>
<#      } #>
<#      foreach (var family in tree.AllAttributeFamilies.OfType<CollectionAttributeFamilyModel>()) { #>
<#          if (ShouldEmit.Collect(family, node)) { #>

    internal override void CollectContributors_<#= family.Name #>(ContributorCollection<<#= Emit.BaseClassName(tree) #>> contributors)
    {
<#              foreach (var equation in Build.Equations(node, family)) { #>
        <#= Emit.AddContributors(equation) #>
<#              } #>
        base.CollectContributors_<#= family.Name #>(contributors);
    }

    internal override void Contribute_<#= family.Name #>(<#= Emit.BaseClassName(tree) #> target, <#= Emit.Type(family.FromType) #> builder)
    {
<#              foreach (var equation in Build.Equations(node, family)) { #>
        <#= Emit.Contribute(equation) #>
<#              } #>
    }
<#          } #>
<#      } #>
<#      if (!node.ActualRewriteRules.IsEmpty) { #>

    protected override IChildTreeNode Rewrite()
<#          foreach (var rule in node.ActualRewriteRules) { #>
        <#= Emit.RuleJoin(node.ActualRewriteRules, rule) #> <#= Emit.QualifiedRewriteRuleMethod(rule) #>(this)
<#      } #>
        ?? base.Rewrite();
<#      } #>
}

<#  } #>
<#  } #>