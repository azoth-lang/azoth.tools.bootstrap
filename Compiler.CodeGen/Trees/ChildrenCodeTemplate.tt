<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Diagnostics;
using ExhaustiveMatching;

namespace <#=grammar.Namespace #>;

[GeneratedCode("AzothCompilerCodeGen", null)]
public static class <#=TypeName(grammar.RootType)#>Extensions
{
    [DebuggerStepThrough]
    public static IEnumerable<<#=TypeName(grammar.RootType)#>> Children(this <#=TypeName(grammar.RootType)#> node)
    {
        switch (node)
        {
            default:
                throw ExhaustiveMatch.Failed(node);
<#  foreach(var rule in grammar.Rules.Where(grammar.IsTerminal)) { #>
            case <#=TypeName(rule.Defines) #> n:
<#      foreach(var property in rule.Properties.Where(grammar.IsNonterminal)) { #>
<#          if (property.Type.IsList) { #>
                foreach (var child in n.<#=property.Name #>)
                    yield return child;
<#          } else if (property.Type.IsOptional) { #>
                if (n.<#=property.Name #> is not null)
                    yield return n.<#=property.Name #>;
<#          } else { #>
                yield return n.<#=property.Name #>;
<#          } #>
<#      } #>
                yield break;
<#  } #>
        }
    }
}
