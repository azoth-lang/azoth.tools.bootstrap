// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Azoth.Tools.Bootstrap.Compiler.CodeGen.Trees
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Azoth.Tools.Bootstrap.Compiler.CodeGen.Core;
    using Azoth.Tools.Bootstrap.Compiler.CodeGen.Model;
    using Azoth.Tools.Bootstrap.Compiler.CodeGen.Model.Attributes;
    using Azoth.Tools.Bootstrap.Compiler.CodeGen.Model.AttributeFamilies;
    using Azoth.Tools.Bootstrap.Compiler.CodeGen.Model.Equations;
    using Azoth.Tools.Bootstrap.Compiler.CodeGen.Syntax.Equations;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class TreeCodeTemplate : TreeCodeTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 12 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
  foreach(var usingNamespace in Build.OrderedNamespaces(tree,
    Build.Conditional(!tree.SimplifiedTree, "System", "System.Linq", "System.Threading", "Azoth.Tools.Bootstrap.Compiler.Core.Attributes"),
    Build.Conditional(tree.GenerateClasses, "InlineMethod", "System.Collections.Generic"),
    ["ExhaustiveMatching", "System.CodeDom.Compiler", "System.Diagnostics"])) { 
            
            #line default
            #line hidden
            this.Write("using ");
            
            #line 16 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(usingNamespace));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 17 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
  } 
            
            #line default
            #line hidden
            this.Write("\r\nnamespace ");
            
            #line 19 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tree.Namespace));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n#nullable enable\r\n// ReSharper disable PartialTypeWithSinglePart\r\n// ReSharp" +
                    "er disable RedundantTypeDeclarationBody\r\n// ReSharper disable ReturnTypeCanBeNot" +
                    "Nullable\r\n// ReSharper disable ConvertToPrimaryConstructor\r\n\r\n");
            
            #line 27 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
  foreach(var node in tree.Nodes) {
            
            #line default
            #line hidden
            
            #line 28 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.ClosedAttribute(node)));
            
            #line default
            #line hidden
            this.Write("[GeneratedCode(\"AzothCompilerCodeGen\", null)]\r\npublic partial interface ");
            
            #line 29 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.TypeName(node.Defines)));
            
            #line default
            #line hidden
            
            #line 29 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.BaseTypes(node)));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n");
            
            #line 31 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
      foreach (var attribute in node.AttributesRequiringDeclaration.ExceptPlaceholders()) { 
            
            #line default
            #line hidden
            
            #line 32 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
          switch (attribute) { 
            
            #line default
            #line hidden
            
            #line 33 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
              case PropertyModel prop when prop.IsChild && prop.IsTemp: 
            
            #line default
            #line hidden
            this.Write("    ");
            
            #line 34 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.IsNew(prop)));
            
            #line default
            #line hidden
            
            #line 34 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.Type(prop.Type)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 34 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(prop.TempName));
            
            #line default
            #line hidden
            this.Write(" { get; }\r\n    ");
            
            #line 35 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.IsNew(prop)));
            
            #line default
            #line hidden
            
            #line 35 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.Type(prop.FinalType)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 35 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(prop.Name));
            
            #line default
            #line hidden
            this.Write(" { get; }\r\n");
            
            #line 36 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
                  break;
            
            #line default
            #line hidden
            
            #line 37 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
              default: 
            
            #line default
            #line hidden
            this.Write("    ");
            
            #line 38 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.IsNew(attribute)));
            
            #line default
            #line hidden
            
            #line 38 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.Type(attribute.Type)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 38 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attribute.Name));
            
            #line default
            #line hidden
            
            #line 38 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.ParametersAndBody(attribute)));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 39 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
                  break;
            
            #line default
            #line hidden
            
            #line 40 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
          } 
            
            #line default
            #line hidden
            
            #line 41 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
          foreach (var baseAttribute in Build.BaseAttributes(node, attribute)) { 
            
            #line default
            #line hidden
            this.Write("    ");
            
            #line 42 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.Type(baseAttribute.Type)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 42 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.TypeName(baseAttribute.Node.Defines)));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 42 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(baseAttribute.Name));
            
            #line default
            #line hidden
            
            #line 42 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.Parameters(baseAttribute)));
            
            #line default
            #line hidden
            this.Write(" => ");
            
            #line 42 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attribute.Name));
            
            #line default
            #line hidden
            
            #line 42 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.Parameters(attribute)));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 43 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
          } 
            
            #line default
            #line hidden
            
            #line 44 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
      } 
            
            #line default
            #line hidden
            
            #line 45 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
      foreach (var eq in node.EquationsRequiringEmit) { 
            
            #line default
            #line hidden
            this.Write("    ");
            
            #line 46 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.Type(eq.Type)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 46 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.TypeName(eq.Attribute.Node.Defines)));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 46 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(eq.Name));
            
            #line default
            #line hidden
            
            #line 46 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.ParametersAndBody(eq)));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 47 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
      } 
            
            #line default
            #line hidden
            
            #line 48 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
      if (tree.GenerateClasses && !node.IsAbstract) { 
            
            #line default
            #line hidden
            this.Write("\r\n    public static ");
            
            #line 50 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.TypeName(node.Defines)));
            
            #line default
            #line hidden
            this.Write(" Create(\r\n        ");
            
            #line 51 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Join($",{Environment.NewLine}        ", Build.PropertiesForClass(node).Select(p => $"{Emit.ParameterType(p.Type)} {Emit.VariableName(p)}"))));
            
            #line default
            #line hidden
            this.Write(")\r\n        => new ");
            
            #line 52 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.ClassName(node.Defines)));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 52 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(", ", Build.PropertiesForClass(node).Select(p => Emit.VariableName(p)))));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 53 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
      } 
            
            #line default
            #line hidden
            this.Write("}\r\n\r\n");
            
            #line 56 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
  } 
            
            #line default
            #line hidden
            
            #line 57 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
  if (tree.GenerateClasses) { 
            
            #line default
            #line hidden
            
            #line 58 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
  if (!tree.SimplifiedTree) { 
            
            #line default
            #line hidden
            this.Write("// TODO switch back to `file` and not `partial` once fully transitioned\r\ninternal" +
                    " abstract partial class ");
            
            #line 60 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.BaseClassName(tree)));
            
            #line default
            #line hidden
            this.Write(" : TreeNode, IChildTreeNode<");
            
            #line 60 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.TypeName(tree.RootSupertype)));
            
            #line default
            #line hidden
            this.Write(">\r\n{\r\n    private ");
            
            #line 62 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.BaseClassName(tree)));
            
            #line default
            #line hidden
            this.Write("? parent;\r\n\r\n    protected ");
            
            #line 64 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.BaseClassName(tree)));
            
            #line default
            #line hidden
            this.Write("() { }\r\n    protected ");
            
            #line 65 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.BaseClassName(tree)));
            
            #line default
            #line hidden
            this.Write(@"(bool inFinalTree) : base(inFinalTree) { }

    [DebuggerStepThrough]
    protected sealed override SemanticNode? PeekParent()
        // Use volatile read to ensure order of operations as seen by other threads. If parent is
        // null, report an error if not in final tree. Root nodes are always in the final tree.
        => Volatile.Read(in parent) ?? (InFinalTree ? null : throw Child.ParentMissing(this));

    private ");
            
            #line 73 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.BaseClassName(tree)));
            
            #line default
            #line hidden
            this.Write(@"? GetParent(IInheritanceContext ctx)
    {
        // Use volatile read to ensure order of operations as seen by other threads
        var node = Volatile.Read(in parent) ?? (InFinalTree ? null : throw Child.ParentMissing(this));
        ctx.AccessParentOf(this);
        return node;
    }

    void IChildTreeNode<");
            
            #line 81 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.TypeName(tree.RootSupertype)));
            
            #line default
            #line hidden
            this.Write(">.SetParent(");
            
            #line 81 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.TypeName(tree.RootSupertype)));
            
            #line default
            #line hidden
            this.Write(" newParent)\r\n    {\r\n        if (newParent is not ");
            
            #line 83 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.BaseClassName(tree)));
            
            #line default
            #line hidden
            this.Write(" newParentNode)\r\n            throw new ArgumentException($\"Parent must be a {name" +
                    "of(");
            
            #line 84 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.BaseClassName(tree)));
            
            #line default
            #line hidden
            this.Write(@")}."", nameof(newParent));

        // Use volatile write to ensure order of operations as seen by other threads
        Volatile.Write(ref parent, newParentNode);
    }

    /// <summary>
    /// The previous node to this one in a preorder traversal of the tree.
    /// </summary>
    protected virtual ");
            
            #line 93 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.BaseClassName(tree)));
            
            #line default
            #line hidden
            this.Write("? Previous(IInheritanceContext ctx)\r\n    {\r\n        ");
            
            #line 95 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.BaseClassName(tree)));
            
            #line default
            #line hidden
            this.Write("? previous = null;\r\n        var parent = GetParent(ctx);\r\n        if (parent is n" +
                    "ull)\r\n            return null;\r\n        foreach (var child in parent.Children()." +
                    "Cast<");
            
            #line 99 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.BaseClassName(tree)));
            
            #line default
            #line hidden
            this.Write(@">())
        {
            if (child == this)
                // If this is the first child, return the parent without descending
                return previous?.LastDescendant() ?? parent;
            previous = child;
        }

        throw new UnreachableException(""Node is not a child of its parent."");
    }

    // TODO can this be more efficient?
    internal ");
            
            #line 111 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.BaseClassName(tree)));
            
            #line default
            #line hidden
            this.Write(" LastDescendant()\r\n        => ((");
            
            #line 112 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.BaseClassName(tree)));
            
            #line default
            #line hidden
            this.Write("?)Children().LastOrDefault())?.LastDescendant() ?? this;\r\n");
            
            #line 113 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
      if (tree.AllAttributeFamilies.Any()) { 
            
            #line default
            #line hidden
            this.Write("\r\n    protected int? IndexOfNode<T>(IEnumerable<T> nodes, ");
            
            #line 115 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.BaseClassName(tree)));
            
            #line default
            #line hidden
            this.Write(" node)\r\n        where T : ");
            
            #line 116 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.TypeName(tree.RootSupertype)));
            
            #line default
            #line hidden
            this.Write(@"
    {
        if (node is not T value)
            return null;
        var index = 0;
        foreach (var item in nodes)
        {
            if (ReferenceEquals(item, value))
                return index;
            index++;
        }

        return null;
    }

    protected bool ContainsNode<T>(IEnumerable<T> nodes, ");
            
            #line 131 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.BaseClassName(tree)));
            
            #line default
            #line hidden
            this.Write(" node)\r\n        where T : ");
            
            #line 132 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.TypeName(tree.RootSupertype)));
            
            #line default
            #line hidden
            this.Write("\r\n        => node is T value ? nodes.Contains(value) : false;\r\n\r\n    protected bo" +
                    "ol ContainsNode<T>(IFixedSet<T> nodes, ");
            
            #line 135 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.BaseClassName(tree)));
            
            #line default
            #line hidden
            this.Write(" node)\r\n        where T : ");
            
            #line 136 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.TypeName(tree.RootSupertype)));
            
            #line default
            #line hidden
            this.Write("\r\n        => node is T value ? nodes.Contains(value) : false;\r\n\r\n    protected bo" +
                    "ol ContainsNode<T>(IReadOnlySet<T> nodes, ");
            
            #line 139 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.BaseClassName(tree)));
            
            #line default
            #line hidden
            this.Write(" node)\r\n        where T : ");
            
            #line 140 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.TypeName(tree.RootSupertype)));
            
            #line default
            #line hidden
            this.Write("\r\n        => node is T value ? nodes.Contains(value) : false;\r\n");
            
            #line 142 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
      } 
            
            #line default
            #line hidden
            
            #line 143 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
      foreach (var attr in tree.AllAttributeFamilies) { 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 145 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
          switch (attr) { 
            
            #line default
            #line hidden
            
            #line 146 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
              case InheritedAttributeFamilyModel: 
            
            #line default
            #line hidden
            this.Write("    internal virtual ");
            
            #line 147 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.Type(attr.Type)));
            
            #line default
            #line hidden
            this.Write(" Inherited_");
            
            #line 147 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attr.Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 147 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.BaseClassName(tree)));
            
            #line default
            #line hidden
            this.Write(" child, ");
            
            #line 147 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.BaseClassName(tree)));
            
            #line default
            #line hidden
            this.Write(" descendant, IInheritanceContext ctx)\r\n        => (GetParent(ctx) ?? throw Child." +
                    "InheritFailed(\"");
            
            #line 148 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attr.Name));
            
            #line default
            #line hidden
            this.Write("\", child, descendant)).Inherited_");
            
            #line 148 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attr.Name));
            
            #line default
            #line hidden
            this.Write("(this, descendant, ctx);\r\n    protected ");
            
            #line 149 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.Type(attr.Type)));
            
            #line default
            #line hidden
            this.Write(" Inherited_");
            
            #line 149 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attr.Name));
            
            #line default
            #line hidden
            this.Write("(IInheritanceContext ctx)\r\n        => GetParent(ctx)!.Inherited_");
            
            #line 150 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attr.Name));
            
            #line default
            #line hidden
            this.Write("(this, this, ctx);\r\n");
            
            #line 151 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
                  break;
            
            #line default
            #line hidden
            
            #line 152 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
              case PreviousAttributeFamilyModel: 
            
            #line default
            #line hidden
            this.Write("    internal virtual ");
            
            #line 153 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.Type(attr.Type)));
            
            #line default
            #line hidden
            this.Write(" Next_");
            
            #line 153 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attr.Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 153 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.BaseClassName(tree)));
            
            #line default
            #line hidden
            this.Write(" before, IInheritanceContext ctx)\r\n        => (Previous(ctx) ?? throw Child.Previ" +
                    "ousFailed(\"");
            
            #line 154 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attr.Name));
            
            #line default
            #line hidden
            this.Write("\", before)).Next_");
            
            #line 154 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attr.Name));
            
            #line default
            #line hidden
            this.Write("(this, ctx);\r\n    protected ");
            
            #line 155 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.Type(attr.Type)));
            
            #line default
            #line hidden
            this.Write(" Previous_");
            
            #line 155 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attr.Name));
            
            #line default
            #line hidden
            this.Write("(IInheritanceContext ctx)\r\n        => Previous(ctx)!.Next_");
            
            #line 156 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attr.Name));
            
            #line default
            #line hidden
            this.Write("(this, ctx);\r\n");
            
            #line 157 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
                  break;
            
            #line default
            #line hidden
            
            #line 158 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
              case AggregateAttributeFamilyModel family: 
            
            #line default
            #line hidden
            this.Write("    protected IFixedSet<");
            
            #line 159 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.BaseClassName(tree)));
            
            #line default
            #line hidden
            this.Write("> CollectContributors_");
            
            #line 159 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(family.Name));
            
            #line default
            #line hidden
            this.Write("()\r\n    {\r\n        var contributors = new List<");
            
            #line 161 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.BaseClassName(tree)));
            
            #line default
            #line hidden
            this.Write(">();\r\n        foreach (var child in Children().Cast<");
            
            #line 162 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.BaseClassName(tree)));
            
            #line default
            #line hidden
            this.Write(">())\r\n            child.CollectContributors_");
            
            #line 163 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(family.Name));
            
            #line default
            #line hidden
            this.Write("(contributors);\r\n        return contributors.ToFixedSet();\r\n    }\r\n    internal v" +
                    "irtual void CollectContributors_");
            
            #line 166 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(family.Name));
            
            #line default
            #line hidden
            this.Write("(List<");
            
            #line 166 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.BaseClassName(tree)));
            
            #line default
            #line hidden
            this.Write("> contributors)\r\n    {\r\n        foreach (var child in Children().Cast<");
            
            #line 168 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.BaseClassName(tree)));
            
            #line default
            #line hidden
            this.Write(">())\r\n            child.CollectContributors_");
            
            #line 169 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(family.Name));
            
            #line default
            #line hidden
            this.Write("(contributors);\r\n    }\r\n    protected ");
            
            #line 171 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.Type(family.Type)));
            
            #line default
            #line hidden
            this.Write(" Collect_");
            
            #line 171 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(family.Name));
            
            #line default
            #line hidden
            this.Write("(IFixedSet<");
            
            #line 171 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.BaseClassName(tree)));
            
            #line default
            #line hidden
            this.Write("> contributors)\r\n    {\r\n        var builder = ");
            
            #line 173 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(family.ConstructExpression));
            
            #line default
            #line hidden
            this.Write(";\r\n        Contribute_This_");
            
            #line 174 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(family.Name));
            
            #line default
            #line hidden
            this.Write("(builder);\r\n        foreach (var contributor in contributors)\r\n            contri" +
                    "butor.Contribute_");
            
            #line 176 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(family.Name));
            
            #line default
            #line hidden
            this.Write("(builder);\r\n        return builder.");
            
            #line 177 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(family.DoneMethod));
            
            #line default
            #line hidden
            this.Write("();\r\n    }\r\n    internal virtual void Contribute_This_");
            
            #line 179 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(family.Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 179 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.Type(family.FromType)));
            
            #line default
            #line hidden
            this.Write(" builder) { }\r\n    internal virtual void Contribute_");
            
            #line 180 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(family.Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 180 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.Type(family.FromType)));
            
            #line default
            #line hidden
            this.Write(" builder) { }\r\n");
            
            #line 181 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
                  break;
            
            #line default
            #line hidden
            
            #line 182 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
          } 
            
            #line default
            #line hidden
            
            #line 183 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
      } 
            
            #line default
            #line hidden
            this.Write("}\r\n\r\n");
            
            #line 186 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
  } 
            
            #line default
            #line hidden
            
            #line 187 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
  foreach(var node in tree.Nodes.Where(ShouldEmit.Class)) {
            
            #line default
            #line hidden
            this.Write("[GeneratedCode(\"AzothCompilerCodeGen\", null)]\r\nfile class ");
            
            #line 189 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.ClassName(node.Defines)));
            
            #line default
            #line hidden
            this.Write(" : ");
            
            #line 189 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.BaseClass(tree)));
            
            #line default
            #line hidden
            
            #line 189 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.TypeName(node.Defines)));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    private ");
            
            #line 191 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.TypeName(node.Defines)));
            
            #line default
            #line hidden
            this.Write(" Self { [Inline] get => this; }\r\n");
            
            #line 192 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
      if (node.IsSyncLockRequired) { 
            
            #line default
            #line hidden
            this.Write("    private AttributeLock syncLock;\r\n");
            
            #line 194 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
      } 
            
            #line default
            #line hidden
            
            #line 195 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
      if (node.MayHaveRewrite) { 
            
            #line default
            #line hidden
            this.Write("    protected override bool MayHaveRewrite => true;\r\n");
            
            #line 197 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
      } 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 199 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
      foreach (var property in Build.PropertiesForClass(node)) { 
            
            #line default
            #line hidden
            
            #line 200 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
          if (property.IsChild && property.IsTemp) { 
            
            #line default
            #line hidden
            
            #line 201 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
              if (property.IsCollection) { 
            
            #line default
            #line hidden
            this.Write("    private ");
            
            #line 202 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.RewritableBackingType(property)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 202 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.VariableName(property)));
            
            #line default
            #line hidden
            this.Write(";\r\n    public ");
            
            #line 203 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.Type(property.Type)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 203 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.TempName));
            
            #line default
            #line hidden
            this.Write(" => ");
            
            #line 203 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.VariableName(property)));
            
            #line default
            #line hidden
            this.Write(";\r\n    public ");
            
            #line 204 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.Type(property.FinalType)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 204 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write(" => ");
            
            #line 204 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.VariableName(property)));
            
            #line default
            #line hidden
            this.Write(".AsFinalType;\r\n");
            
            #line 205 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
              } else { 
            
            #line default
            #line hidden
            this.Write("    public ");
            
            #line 206 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.Type(property.Type)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 206 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.TempName));
            
            #line default
            #line hidden
            this.Write(" { [DebuggerStepThrough] get; }\r\n    public ");
            
            #line 207 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.Type(property.FinalType)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 207 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write(" => ");
            
            #line 207 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.TempName));
            
            #line default
            #line hidden
            this.Write(" as ");
            
            #line 207 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.Type(property.FinalType.ToNonOptional())));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 208 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
              } 
            
            #line default
            #line hidden
            
            #line 209 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
          } else { 
            
            #line default
            #line hidden
            this.Write("    public ");
            
            #line 210 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.Type(property.Type)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 210 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write(" { [DebuggerStepThrough] get; }\r\n");
            
            #line 211 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
          } 
            
            #line default
            #line hidden
            
            #line 212 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
      } 
            
            #line default
            #line hidden
            
            #line 213 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
      foreach (var attr in node.ActualAttributes.OfType<ContextAttributeModel>()) { 
            
            #line default
            #line hidden
            this.Write("    public ");
            
            #line 214 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.Type(attr.Type)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 214 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attr.Name));
            
            #line default
            #line hidden
            
            #line 214 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.Parameters(attr)));
            
            #line default
            #line hidden
            
            #line 214 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.Body(attr)));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 215 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
      } 
            
            #line default
            #line hidden
            
            #line 216 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
      foreach (var attr in node.ActualAttributes.OfType<AggregateAttributeModel>()) { 
            
            #line default
            #line hidden
            this.Write("    public ");
            
            #line 217 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.Type(attr.Type)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 217 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attr.Name));
            
            #line default
            #line hidden
            
            #line 217 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.Parameters(attr)));
            
            #line default
            #line hidden
            
            #line 217 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.Body(attr)));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 218 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
      } 
            
            #line default
            #line hidden
            
            #line 219 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
      foreach (var equation in node.ActualEquations) { 
            
            #line default
            #line hidden
            
            #line 220 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
          switch (equation) { 
            
            #line default
            #line hidden
            
            #line 221 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
              case LocalAttributeEquationModel eq when eq.Strategy == EvaluationStrategy.Eager: 
            
            #line default
            #line hidden
            this.Write("    public ");
            
            #line 222 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.Type(eq.Type)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 222 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(eq.Name));
            
            #line default
            #line hidden
            this.Write(" { [DebuggerStepThrough] get; }\r\n");
            
            #line 223 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
                  break;
            
            #line default
            #line hidden
            
            #line 224 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
              case LocalAttributeEquationModel eq
                    when eq.Strategy == EvaluationStrategy.Lazy || eq.Strategy == EvaluationStrategy.Computed && eq.IsObjectMember(): 
            
            #line default
            #line hidden
            this.Write("    public ");
            
            #line 226 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.Override(eq)));
            
            #line default
            #line hidden
            
            #line 226 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.Type(eq.Type)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 226 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(eq.Name));
            
            #line default
            #line hidden
            
            #line 226 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.ParametersAndBody(eq)));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 227 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
                  break;
            
            #line default
            #line hidden
            
            #line 228 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
          } 
            
            #line default
            #line hidden
            
            #line 229 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
      } 
            
            #line default
            #line hidden
            this.Write("\r\n    public ");
            
            #line 231 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.ClassName(node.Defines)));
            
            #line default
            #line hidden
            this.Write("(\r\n        ");
            
            #line 232 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Join($",{Environment.NewLine}        ", Build.PropertiesForClass(node).Select(p => $"{Emit.ParameterType(p.Type)} {Emit.VariableName(p)}"))));
            
            #line default
            #line hidden
            this.Write(")\r\n");
            
            #line 233 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
     if (!tree.SimplifiedTree && node.IsRoot) { 
            
            #line default
            #line hidden
            this.Write("        : base(true)\r\n");
            
            #line 235 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
     } 
            
            #line default
            #line hidden
            this.Write("    {\r\n");
            
            #line 237 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
      foreach (var property in Build.PropertiesForClass(node)) { 
            
            #line default
            #line hidden
            
            #line 238 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
          if (!tree.SimplifiedTree && property.IsChild) { 
            
            #line default
            #line hidden
            this.Write("        ");
            
            #line 239 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.FieldReference(property)));
            
            #line default
            #line hidden
            this.Write(" = ");
            
            #line 239 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.ChildAttach(property)));
            
            #line default
            #line hidden
            
            #line 239 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.VariableName(property)));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 240 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
          } else { 
            
            #line default
            #line hidden
            this.Write("        ");
            
            #line 241 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.TempName));
            
            #line default
            #line hidden
            this.Write(" = ");
            
            #line 241 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.VariableName(property)));
            
            #line default
            #line hidden
            
            #line 241 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.ToCollection(property)));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 242 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
          } 
            
            #line default
            #line hidden
            
            #line 243 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
      } 
            
            #line default
            #line hidden
            
            #line 244 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
      foreach (var equation in node.ActualEquations.OfType<LocalAttributeEquationModel>().Where(eq => eq.Strategy == EvaluationStrategy.Eager)) { 
            
            #line default
            #line hidden
            this.Write("        ");
            
            #line 245 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(equation.Name));
            
            #line default
            #line hidden
            this.Write(" = ");
            
            #line 245 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.EagerBody(equation)));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 246 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
      } 
            
            #line default
            #line hidden
            this.Write("    }\r\n");
            
            #line 248 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
      foreach (var group in node.InheritedAttributeEquationGroups) { 
            
            #line default
            #line hidden
            this.Write("\r\n    internal override ");
            
            #line 250 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.Type(group.Type)));
            
            #line default
            #line hidden
            this.Write(" Inherited_");
            
            #line 250 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(group.Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 250 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.BaseClassName(tree)));
            
            #line default
            #line hidden
            this.Write(" child, ");
            
            #line 250 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.BaseClassName(tree)));
            
            #line default
            #line hidden
            this.Write(" descendant, IInheritanceContext ctx)\r\n    {\r\n");
            
            #line 252 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
          foreach (var eq in group.Equations) { 
            
            #line default
            #line hidden
            this.Write("        ");
            
            #line 253 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.Selector(eq)));
            
            #line default
            #line hidden
            this.Write("return ");
            
            #line 253 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.Body(eq)));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 254 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
          } 
            
            #line default
            #line hidden
            
            #line 255 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
          if (!group.IsAllDescendants) { 
            
            #line default
            #line hidden
            this.Write("        return base.Inherited_");
            
            #line 256 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(group.Name));
            
            #line default
            #line hidden
            this.Write("(child, descendant, ctx);\r\n");
            
            #line 257 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
          } 
            
            #line default
            #line hidden
            this.Write("    }\r\n");
            
            #line 259 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
      } 
            
            #line default
            #line hidden
            
            #line 260 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
      foreach (var eq in node.ActualEquations.OfType<PreviousAttributeEquationModel>()) { 
            
            #line default
            #line hidden
            this.Write("\r\n    internal override ");
            
            #line 262 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.Type(eq.Type)));
            
            #line default
            #line hidden
            this.Write(" Next_");
            
            #line 262 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(eq.Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 262 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.BaseClassName(tree)));
            
            #line default
            #line hidden
            this.Write(" before, IInheritanceContext ctx)\r\n        => ");
            
            #line 263 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.QualifiedEquationMethod(eq)));
            
            #line default
            #line hidden
            this.Write("(this);\r\n");
            
            #line 264 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
      } 
            
            #line default
            #line hidden
            
            #line 265 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
      foreach (var attribute in node.ActualAttributes.OfType<AggregateAttributeModel>()) { 
            
            #line default
            #line hidden
            this.Write("\r\n    internal override void Contribute_");
            
            #line 267 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attribute.Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 267 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.Type(attribute.FromType)));
            
            #line default
            #line hidden
            this.Write(" builder)\r\n        => builder.");
            
            #line 268 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attribute.AggregateMethod));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 268 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attribute.Name));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 269 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
      } 
            
            #line default
            #line hidden
            
            #line 270 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
      foreach (var family in tree.AllAttributeFamilies.OfType<AggregateAttributeFamilyModel>()) { 
            
            #line default
            #line hidden
            
            #line 271 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
          if (ShouldEmit.CollectContributors(family, node)) { 
            
            #line default
            #line hidden
            this.Write("\r\n    internal override void CollectContributors_");
            
            #line 273 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(family.Name));
            
            #line default
            #line hidden
            this.Write("(List<");
            
            #line 273 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.BaseClassName(tree)));
            
            #line default
            #line hidden
            this.Write("> contributors)\r\n");
            
            #line 274 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
              if (ShouldEmit.CollectContributorsFromChildren(family, node)) { 
            
            #line default
            #line hidden
            this.Write("    {\r\n        contributors.Add(this);\r\n        base.CollectContributors_");
            
            #line 277 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(family.Name));
            
            #line default
            #line hidden
            this.Write("(contributors);\r\n    }\r\n");
            
            #line 279 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
              } else { 
            
            #line default
            #line hidden
            this.Write("        => contributors.Add(this);\r\n");
            
            #line 281 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
              } 
            
            #line default
            #line hidden
            
            #line 282 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
          } 
            
            #line default
            #line hidden
            
            #line 283 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
          if (ShouldEmit.OverrideContribute(family, node)) { 
            
            #line default
            #line hidden
            this.Write("\r\n    internal override void ");
            
            #line 285 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.ContributeMethodName(family, node)));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 285 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.Type(family.FromType)));
            
            #line default
            #line hidden
            this.Write(" builder)\r\n    {\r\n");
            
            #line 287 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
              foreach (var equation in node.ActualEquations.OfType<AggregateAttributeEquationModel>()) { 
            
            #line default
            #line hidden
            this.Write("        ");
            
            #line 288 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.QualifiedEquationMethod(equation)));
            
            #line default
            #line hidden
            this.Write("(this, builder);\r\n");
            
            #line 289 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
              } 
            
            #line default
            #line hidden
            this.Write("    }\r\n");
            
            #line 291 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
          } 
            
            #line default
            #line hidden
            
            #line 292 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
      } 
            
            #line default
            #line hidden
            
            #line 293 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
      if (!node.ActualRewriteRules.IsEmpty) { 
            
            #line default
            #line hidden
            this.Write("\r\n    protected override IChildTreeNode Rewrite()\r\n");
            
            #line 296 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
          foreach (var rule in node.ActualRewriteRules) { 
            
            #line default
            #line hidden
            this.Write("        ");
            
            #line 297 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.RuleJoin(node.ActualRewriteRules, rule)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 297 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Emit.QualifiedRewriteRuleMethod(rule)));
            
            #line default
            #line hidden
            this.Write("(this)\r\n");
            
            #line 298 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
      } 
            
            #line default
            #line hidden
            this.Write("        ?? base.Rewrite();\r\n");
            
            #line 300 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
      } 
            
            #line default
            #line hidden
            this.Write("}\r\n\r\n");
            
            #line 303 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
  } 
            
            #line default
            #line hidden
            
            #line 304 "C:\dataFast\azoth-lang\azoth.tools.bootstrap\Compiler.CodeGen\Trees\TreeCodeTemplate.tt"
  } 
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class TreeCodeTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        public System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
