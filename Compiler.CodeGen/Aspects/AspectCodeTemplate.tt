<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Azoth.Tools.Bootstrap.Compiler.CodeGen.Core" #>
<#@ import namespace="Azoth.Tools.Bootstrap.Compiler.CodeGen.Model.Attributes" #>
<#@ import namespace="Azoth.Tools.Bootstrap.Compiler.CodeGen.Model.Equations" #>
<#@ import namespace="Azoth.Tools.Bootstrap.Compiler.CodeGen.Model.Snippets" #>
<#@ import namespace="ExhaustiveMatching" #>
<#  foreach(var usingNamespace in Build.OrderedNamespaces(aspect, "System.CodeDom.Compiler", "System.Runtime.CompilerServices")) { #>
using <#=usingNamespace #>;
<#  } #>

namespace <#=aspect.Namespace #>;

#nullable enable
// ReSharper disable PartialTypeWithSinglePart

[GeneratedCode("AzothCompilerCodeGen", null)]
internal static partial class <#= aspect.Name #>
{
<#  foreach (var valid in aspect.Snippets.OfType<ConstructorArgumentValidationModel>()) { #>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static partial void Validate_<#= Emit.ClassName(valid.Node.Defines) #>(<#= Emit.Parameters(Build.PropertiesForClass(valid.Node)) #>);
<#  } #>
<#  foreach (var attr in aspect.DeclaredAttributes.OfType<CircularAttributeModel>().Where(ShouldEmit.Initial)) { #>
    public static partial <#= Emit.Type(attr.Type) #> <#= Emit.InitialMethod(attr) #>(<#= Emit.TypeName(attr.Node.Defines) #> node);
<#  } #>
<#  foreach (var equation in aspect.AllDeclaredEquations.Where(eq => ShouldEmit.EquationPartialImplementation(eq))) { #>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
<#          switch (equation) { #>
<#              case LocalAttributeEquationModel eq: #>
    public static partial <#= Emit.Type(eq.Type) #> <#= Emit.EquationMethod(eq) #>(<#= Emit.TypeName(eq.Node.Defines) #> node);
<#                  break; #>
<#              case InheritedAttributeEquationModel eq: #>
    public static partial <#= Emit.Type(eq.Type) #> <#= Emit.EquationMethod(eq) #>(<#= Emit.TypeName(eq.Node.Defines) #> node<#= Emit.EquationMethodExtraParams(eq) #>);
<#                  break; #>
<#              case PreviousAttributeEquationModel eq: #>
    public static partial <#= Emit.Type(eq.Type) #> <#= Emit.EquationMethod(eq) #>(<#= Emit.TypeName(eq.Node.Defines) #> node);
<#                  break; #>
<#              case AggregateAttributeEquationModel eq: #>
    public static partial void <#= Emit.EquationMethod(eq) #>(<#= Emit.TypeName(eq.Node.Defines) #> node<#= Emit.EquationMethodExtraParams(eq) #>);
<#                  break; #>
<#              case CollectionAttributeEquationModel eq: #>
    public static partial void <#= Emit.EquationMethod(eq) #>(<#= Emit.TypeName(eq.Node.Defines) #> node<#= Emit.EquationMethodExtraParams(eq) #>);
<#                  break; #>
<#              case IntertypeMethodEquationModel _: /* do nothing */ break; #>
<#              default: #>
<#                  throw ExhaustiveMatch.Failed(equation); #>
<#          } #>
<#  } #>
<#  foreach (var rule in aspect.RewriteRules) { #>
    public static partial <#= Emit.Type(rule.RewriteToType) #>? <#= Emit.RewriteRuleMethod(rule) #>(<#= Emit.TypeName(rule.Node.Defines) #> node);
<#  } #>
}
