using System.Collections.Generic;
using System.Linq;
using Azoth.Tools.Bootstrap.Compiler.CodeGen.Model.Types;
using Azoth.Tools.Bootstrap.Framework;

namespace Azoth.Tools.Bootstrap.Compiler.CodeGen.Model.Methods;

/// <summary>
/// A declared transform method that can just return the input value as is.
/// </summary>
public sealed class TransformIdentityMethod : TransformMethod
{
    public override NonOptionalType FromCoreType { get; }
    public Parameter From { get; }
    public override IFixedList<Parameter> AdditionalParameters { get; }
    public IFixedList<Parameter> AllParameters { get; }

    public Parameter To { get; }
    public IFixedList<Parameter> AdditionalReturnValues { get; }
    public IFixedList<Parameter> AllReturnValues { get; }
    public bool AutoGenerate => true;

    public TransformIdentityMethod(Pass pass, Transform transform, NonVoidType fromType, NonVoidType toType)
    : base(pass, true)
    {
        Requires.That(nameof(transform), transform.AutoGenerate, "Must be autogenerated");

        FromCoreType = fromType.ToNonOptional();
        From = Parameter.Create(fromType, Parameter.FromName);
        AdditionalParameters = transform.AdditionalParameters;
        AllParameters = AdditionalParameters.Prepend(From).ToFixedList();

        To = Parameter.Create(toType, Parameter.ToName);
        AdditionalReturnValues = transform.AdditionalReturnValues;
        AllReturnValues = AdditionalReturnValues.Prepend(To).ToFixedList();
    }

    public override IEnumerable<Method> GetMethodsCalled() => Enumerable.Empty<Method>();


}
