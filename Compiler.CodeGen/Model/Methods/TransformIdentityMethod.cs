using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using Azoth.Tools.Bootstrap.Compiler.CodeGen.Model.Types;
using Azoth.Tools.Bootstrap.Framework;

namespace Azoth.Tools.Bootstrap.Compiler.CodeGen.Model.Methods;

/// <summary>
/// A declared transform method that can just return the input value as is.
/// </summary>
public sealed record TransformIdentityMethod : TransformMethod
{
    public override required IFixedList<Parameter> AdditionalParameters { get; init; }

    public Parameter To { get; }
    public IFixedList<Parameter> AdditionalReturnValues { get; }
    public IFixedList<Parameter> AllReturnValues { get; }
    public bool AutoGenerate => true;

    [SetsRequiredMembers]
#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
    public TransformIdentityMethod(Pass pass, Transform transform, NonVoidType fromType, NonVoidType toType)
#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        : base(pass, true, fromType)
    {
        Requires.That(nameof(transform), transform.AutoGenerate, "Must be autogenerated");

        AdditionalParameters = transform.AdditionalParameters;

        To = Parameter.Create(toType, Parameter.ToName);
        AdditionalReturnValues = transform.AdditionalReturnValues;
        AllReturnValues = AdditionalReturnValues.Prepend(To).ToFixedList();
    }

    public override IEnumerable<Method> GetMethodsCalled() => Enumerable.Empty<Method>();
}
