<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".partial.cs" #>
<#
const int MaxReferences = 10;
const int MaxInts = 10;
const int MaxBytes = 40;
#>
using System;
using System.Collections.Generic;
using System.Numerics;
using System.Runtime.CompilerServices;

namespace Azoth.Tools.Bootstrap.Compiler.Semantics.Interpreter.MemoryLayout.Experiment;

#pragma warning disable IDE0051 // Remove unused private members
#pragma warning disable IDE0044 // Add readonly modifier
#pragma warning disable CS0169 // Field is never used

internal struct AzothReferences0 : IAzothReferences
{
    public int Length => 0;
}
<#for(int i = 1; i <= MaxReferences; i++) {#>
[InlineArray(<#=i#>)]
internal struct AzothReferences<#=i#> : IAzothReferences
{
    private object references;

    public int Length => <#=i#>;
}
<#}#>

internal struct AzothInts0 : IAzothInts
{
    public int Length => 0;
}
<#for(int i = 1; i <= MaxInts; i++) {#>
[InlineArray(<#=i#>)]
internal struct AzothInts<#=i#> : IAzothInts
{
    private BigInteger ints;

    public int Length => <#=i#>;
}
<#}#>

internal struct AzothBytes0 : IAzothBytes
{
    public int Length => 0;
}
<#for(int i = 1; i <= MaxBytes; i++) {#>
[InlineArray(<#=i#>)]
internal struct AzothBytes<#=i#> : IAzothBytes
{
    private byte bytes;

    public int Length => <#=i#>;
}
<#}#>

#pragma warning restore CS0169 // Field is never used
#pragma warning restore IDE0044 // Add readonly modifier
#pragma warning restore IDE0051 // Remove unused private members


internal partial class AzothLayout
{
    private static readonly IReadOnlyDictionary<int, Type> ReferencesTypes = new Dictionary<int, Type>
    {
<#for(int i = 0; i <= MaxReferences; i++) {#>
        { <#=i#>, typeof(AzothReferences<#=i#>) },
<#}#>
    }.AsReadOnly();

    private static readonly IReadOnlyDictionary<int, Type> IntsTypes = new Dictionary<int, Type>
    {
<#for(int i = 0; i <= MaxInts; i++) {#>
        { <#=i#>, typeof(AzothInts<#=i#>) },
<#}#>
    }.AsReadOnly();

    private static readonly IReadOnlyDictionary<int, Type> BytesTypes = new Dictionary<int, Type>
    {
<#for(int i = 0; i <= MaxBytes; i++) {#>
        { <#=i#>, typeof(AzothBytes<#=i#>) },
<#}#>
    }.AsReadOnly();
}