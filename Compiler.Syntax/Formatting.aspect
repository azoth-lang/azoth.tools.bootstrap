◊namespace Azoth.Tools.Bootstrap.Compiler.Syntax;
◊name FormattingAspect;

/// <summary>
/// A developer/debugging friendly string representation of the syntax.
/// </summary>
↑ <default>.ToString(): `string`;

// ---------- Parameters and Return
= SelfParameter.ToString();

// ---------- Expressions
↑ Expression.ToGroupedString(OperatorPrecedence surroundingPrecedence): `string`
    => surroundingPrecedence > ExpressionPrecedence ? $"({this})" : ToString();
↑ Expression.ExpressionPrecedence:`OperatorPrecedence`;
= BlockExpression.ExpressionPrecedence => OperatorPrecedence.Primary;
= UnsafeExpression.ExpressionPrecedence => OperatorPrecedence.Primary;

// ---------- Instance Member Access Expressions
= MemberAccessExpression.ExpressionPrecedence => OperatorPrecedence.Primary;

// ---------- Literal Expressions
= LiteralExpression.ExpressionPrecedence => OperatorPrecedence.Primary;

// ---------- Operator Expressions
= AssignmentExpression.ExpressionPrecedence => OperatorPrecedence.Assignment;
= BinaryOperatorExpression.ExpressionPrecedence => Operator.Precedence();
= UnaryOperatorExpression.ExpressionPrecedence => OperatorPrecedence.Unary;
= ConversionExpression.ExpressionPrecedence => OperatorPrecedence.Conversion;
= PatternMatchExpression.ExpressionPrecedence => OperatorPrecedence.Conversion;

// ---------- Control Flow Expressions
= IfExpression.ExpressionPrecedence => OperatorPrecedence.Min;
= LoopExpression.ExpressionPrecedence => OperatorPrecedence.Primary;
= WhileExpression.ExpressionPrecedence => OperatorPrecedence.Min;
= ForeachExpression.ExpressionPrecedence => OperatorPrecedence.Min;
= BreakExpression.ExpressionPrecedence => Value is not null ? OperatorPrecedence.Min : OperatorPrecedence.Primary;
= NextExpression.ExpressionPrecedence => OperatorPrecedence.Primary;
= ReturnExpression.ExpressionPrecedence => OperatorPrecedence.Min;

// ---------- Invocation Expressions
= InvocationExpression.ExpressionPrecedence => OperatorPrecedence.Primary;

// ---------- Name Expressions
= NameExpression.ExpressionPrecedence => OperatorPrecedence.Primary;

// ---------- Names
= QualifiedName.ExpressionPrecedence => OperatorPrecedence.Primary;

// ---------- Capability Expressions
= MoveExpression.ExpressionPrecedence => OperatorPrecedence.Min;
= FreezeExpression.ExpressionPrecedence => OperatorPrecedence.Min;

// ---------- Async Expressions
= AsyncBlockExpression.ExpressionPrecedence => OperatorPrecedence.Primary;
= AsyncStartExpression.ExpressionPrecedence => OperatorPrecedence.Min;
= AwaitExpression.ExpressionPrecedence => OperatorPrecedence.Unary;
