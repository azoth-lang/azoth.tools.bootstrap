◊namespace Azoth.Tools.Bootstrap.Compiler.Syntax;
◊root-supertype <default>;
◊prefix I;
◊suffix Syntax;
◊class-suffix Syntax;
◊simplified-tree true;
◊using System.Numerics;
◊using Azoth.Tools.Bootstrap.Compiler.Core.Code;
◊using Azoth.Tools.Bootstrap.Compiler.Core.Diagnostics;
◊using Azoth.Tools.Bootstrap.Compiler.Core.Operators;
◊using Azoth.Tools.Bootstrap.Compiler.Core.Types;
◊using Azoth.Tools.Bootstrap.Compiler.Names;
◊using Azoth.Tools.Bootstrap.Compiler.Symbols;
◊using Azoth.Tools.Bootstrap.Compiler.Tokens;
◊using Azoth.Tools.Bootstrap.Compiler.Types.Capabilities;
◊using Azoth.Tools.Bootstrap.Framework;

// TODO:
//     The syntax tree ought to be independent of semantics. It should not try to enforce rules
//     such as that certian kinds of expressions are expected in certian places. It should collapse
//     node types even if they appear in different contexts. For example, a `BuiltInTypeName` and a
//     `BuiltInTypeNameExpression` should be the same node type.

<default>;

// ---------- Top Level
/// Syntax that corresponds to Azoth code.
Code = Span:`TextSpan`;
CompilationUnit <: Code = File:`CodeFile` ImplicitNamespaceName:`NamespaceName` Diagnostics:`DiagnosticCollection`
    ImportDirectives:ImportDirective* Definitions:NamespaceBlockMemberDefinition*;
ImportDirective <: Code = Name:`NamespaceName`;

// ---------- Special Parts
BodyOrBlock <: Code = Statements:Statement*;
ElseClause <: Code;
BlockOrResult <: ElseClause;

// ---------- Bindings
Binding <: Code = IsMutableBinding:`bool`;
LocalBinding <: Binding = NameSpan:`TextSpan`;

// ---------- Packages
Package = Name:`IdentifierName` CompilationUnits:{CompilationUnit} TestingCompilationUnits:{CompilationUnit}
    References:{PackageReference};
PackageReference = AliasOrName:`IdentifierName` Package:`IPackageSymbols` IsTrusted:`bool`;

// ---------- Definitions
Definition <: Code = File:`CodeFile` Name:`TypeName`? NameSpan:`TextSpan`;
/// All top-level non-namespace definitions since a namespace doesn't really create a thing, it just
/// defines a group of names.
// TODO give a better name to this (the semantic tree has moved away from "entity")
EntityDefinition <: Definition = AccessModifier:`IAccessModifierToken`?;
/// Base type for any declaration that declares a callable thing (i.e. function, method, getter, setter, constructor, or initializer).
InvocableDefinition <: EntityDefinition = Parameters:ConstructorOrInitializerParameter* Body?;

// ---------- Namespace Definitions
NamespaceBlockDefinition <: NamespaceBlockMemberDefinition
    = IsGlobalQualified:`bool` DeclaredNames:`NamespaceName` ImportDirectives:ImportDirective* Definitions:NamespaceBlockMemberDefinition*;
/// Things that can be declared outside of a type (i.e. functions, types, and namespace blocks).
NamespaceBlockMemberDefinition <: Definition;

// ---------- Function Definition
FunctionDefinition <: InvocableDefinition, NamespaceBlockMemberDefinition
    = Attributes:Attribute* Name:`IdentifierName` Parameters:NamedParameter* Return? Body;

// ---------- Type Definitions
TypeDefinition <: NamespaceBlockMemberDefinition, ClassMemberDefinition, TraitMemberDefinition, StructMemberDefinition
    = ConstModifier:`IConstKeywordToken`? MoveModifier:`IMoveKeywordToken`? Name:`OrdinaryName` GenericParameters:GenericParameter* SupertypeNames:StandardTypeName* Members:TypeMemberDefinition*;
ClassDefinition <: TypeDefinition
    = AbstractModifier:`IAbstractKeywordToken`? GenericParameters:GenericParameter* BaseTypeName:StandardTypeName? SupertypeNames:StandardTypeName* Members:ClassMemberDefinition*;
StructDefinition <: TypeDefinition
    = GenericParameters:GenericParameter* SupertypeNames:StandardTypeName* Members:StructMemberDefinition*;
TraitDefinition <: TypeDefinition
    = GenericParameters:GenericParameter* SupertypeNames:StandardTypeName* Members:TraitMemberDefinition*;

// ---------- Type Definition Parts
GenericParameter <: Code = Constraint:CapabilityConstraint Name:`IdentifierName` Independence:`TypeParameterIndependence` Variance:`TypeParameterVariance`;

// ---------- Type Member Definitions (i.e. declarations that can be contained in a type)
TypeMemberDefinition <: EntityDefinition;
ClassMemberDefinition <: TypeMemberDefinition;
TraitMemberDefinition <: TypeMemberDefinition;
StructMemberDefinition <: TypeMemberDefinition;

// ---------- Member Definitions
MethodDefinition <: TypeMemberDefinition, ClassMemberDefinition, TraitMemberDefinition, StructMemberDefinition, InvocableDefinition
    = Name:`IdentifierName` SelfParameter:MethodSelfParameter Parameters:NamedParameter* Return? Body?;
AbstractMethodDefinition <: MethodDefinition = /SelfParameter/ /Parameters/ Return?;
OrdinaryMethodDefinition <: MethodDefinition = SelfParameter:MethodSelfParameter Parameters:NamedParameter* Return? Body;
GetterMethodDefinition <: MethodDefinition = SelfParameter:MethodSelfParameter Return Body?;
SetterMethodDefinition <: MethodDefinition = SelfParameter:MethodSelfParameter Parameters:NamedParameter* Body;
ConstructorDefinition <: InvocableDefinition, ClassMemberDefinition
    = Name:`IdentifierName`? SelfParameter:ConstructorSelfParameter Parameters:ConstructorOrInitializerParameter* Body:BlockBody;
InitializerDefinition <: InvocableDefinition, StructMemberDefinition, ClassMemberDefinition
    = Name:`IdentifierName`? SelfParameter:InitializerSelfParameter Parameters:ConstructorOrInitializerParameter* Body:BlockBody;
FieldDefinition <: TypeMemberDefinition, ClassMemberDefinition, StructMemberDefinition, Binding
    = Name:`IdentifierName` Type Initializer:Expression?;
AssociatedFunctionDefinition <: TypeMemberDefinition, ClassMemberDefinition, TraitMemberDefinition, StructMemberDefinition, InvocableDefinition
    = Name:`IdentifierName` Parameters:NamedParameter* Return? Body;

// ---------- Attributes
Attribute <: Code = TypeName:StandardTypeName;

// ---------- Capabilities
CapabilityConstraint <: Code;
CapabilitySet <: CapabilityConstraint = CapabilitySet:`CapabilitySet`;
Capability <: CapabilityConstraint = Tokens:`ICapabilityToken`* Capability:`DeclaredCapability`;

// ---------- Parameters and Return
Parameter <: Code = Name:`IdentifierName`?;
/// A non-self parameter that can be declared in a constructor
ConstructorOrInitializerParameter <: Parameter;
NamedParameter <: ConstructorOrInitializerParameter, LocalBinding
    = IsMutableBinding:`bool` IsLentBinding:`bool` Name:`IdentifierName` Type DefaultValue:Expression?;
SelfParameter <: Parameter = IsLentBinding:`bool` Constraint:CapabilityConstraint;
// TODO support renaming base Constraint property to Capability
ConstructorSelfParameter <: SelfParameter = Constraint:Capability;
InitializerSelfParameter <: SelfParameter = Constraint:Capability;
MethodSelfParameter <: SelfParameter;
FieldParameter <: ConstructorOrInitializerParameter = Name:`IdentifierName` DefaultValue:Expression?;
Return <: Code = Type; // Return syntax of a function or method (i.e. ``)

// ---------- Function Parts
Body <: BodyOrBlock;
BlockBody <: Body = Statements:BodyStatement*;
ExpressionBody <: Body = ResultStatement;

// ---------- Types
Type <: Code;
TypeName <: Type = Name:`TypeName`;
StandardTypeName <: TypeName = Name:`OrdinaryName`;
// TODO SimpleTypeName is a bad name because it sounds like it should refer to the simple types and it doesn't
SimpleTypeName <: TypeName;
IdentifierTypeName <: TypeName, StandardTypeName, SimpleTypeName = Name:`IdentifierName`;
BuiltInTypeName <: SimpleTypeName = Name:`BuiltInTypeName`;
GenericTypeName <: StandardTypeName = Name:`GenericName` GenericArguments:Type*;
QualifiedTypeName <: TypeName = Context:TypeName QualifiedName:StandardTypeName;
OptionalType <: Type = Referent:Type;
CapabilityType <: Type = Capability Referent:Type;
FunctionType <: Type = Parameters:ParameterType* Return:ReturnType;
ParameterType <: Code = IsLent:`bool` Referent:Type;
ReturnType <: Code = Referent:Type; // Return type of function type
ViewpointType <: Type = Referent:Type;
CapabilityViewpointType <: ViewpointType = Capability Referent:Type;
SelfViewpointType <: ViewpointType = Referent:Type;

// ---------- Statements
Statement <: Code;
ResultStatement <: Statement, BlockOrResult = Expression;

/// A statement that can appear directly in a method body. (i.e. not a result statement)
BodyStatement <: Statement;
VariableDeclarationStatement <: BodyStatement, LocalBinding
    = Name:`IdentifierName` Capability? Type? Initializer:Expression?;
ExpressionStatement <: BodyStatement = Expression;

// ---------- Patterns
Pattern <: Code;
BindingContextPattern <: Pattern = IsMutableBinding:`bool` Pattern Type?;
OptionalOrBindingPattern <: Pattern;
BindingPattern <: OptionalOrBindingPattern, LocalBinding = Name:`IdentifierName`;
OptionalPattern <: OptionalOrBindingPattern = Pattern:OptionalOrBindingPattern;

// ---------- Expressions
Expression <: Code;

/// A block expression. Not to be used to represent function or type bodies.
BlockExpression <: Expression, BlockOrResult, BodyOrBlock = Statements:Statement*;

/// <summary>
/// Note that this could represent a named or unnamed constructor. So
/// for an unnamed constructor, it is really the type name. Conceptually
/// though, the type name is the name of the unnamed constructor. Thus,
/// this expression's type could be either an object type, or member type.
/// </summary>
NewObjectExpression <: Expression
    = Type:TypeName ConstructorName:`IdentifierName`? ConstructorNameSpan:`TextSpan`? Arguments:Expression*;
UnsafeExpression <: Expression = Expression;

// ---------- Literal Expressions
LiteralExpression <: Expression;
BoolLiteralExpression <: LiteralExpression = Value:`bool`;
IntegerLiteralExpression <: LiteralExpression = Value:`BigInteger` ;
NoneLiteralExpression <: LiteralExpression;
StringLiteralExpression <: LiteralExpression = Value:`string`;

// ---------- Operator Expressions
AssignmentExpression <: Expression = LeftOperand:Expression Operator:`AssignmentOperator` RightOperand:Expression;
BinaryOperatorExpression <: Expression = LeftOperand:Expression Operator:`BinaryOperator` RightOperand:Expression;
UnaryOperatorExpression <: Expression = Fixity:`UnaryOperatorFixity` Operator:`UnaryOperator` Operand:Expression;
ConversionExpression <: Expression = Referent:Expression Operator:`ConversionOperator` ConvertToType:Type;
PatternMatchExpression <: Expression = Referent:Expression Pattern;

// ---------- Control Flow Expressions
IfExpression <: Expression, ElseClause = Condition:Expression ThenBlock:BlockOrResult ElseClause?;
LoopExpression <: Expression = Block:BlockExpression;
WhileExpression <: Expression = Condition:Expression Block:BlockExpression;
ForeachExpression <: Expression, LocalBinding
    = VariableName:`IdentifierName` InExpression:Expression Type? Block:BlockExpression;
BreakExpression <: Expression = Value:Expression?;
NextExpression <: Expression;
ReturnExpression <: Expression = Value:Expression?;

// ---------- Invocation Expressions
InvocationExpression <: Expression = Expression Arguments:Expression*;

// ---------- Name Expressions
NameExpression <: Expression;
OrdinaryNameExpression <: NameExpression = Name:`OrdinaryName` GenericArguments:Type*;
IdentifierNameExpression <: OrdinaryNameExpression = Name:`IdentifierName`;
BuiltInTypeNameExpression <: NameExpression, Expression = Name:`BuiltInTypeName`;
GenericNameExpression <: NameExpression, OrdinaryNameExpression = Name:`GenericName` /GenericArguments/;
InstanceExpression <: NameExpression; // i.e. `self` or `base`
SelfExpression <: NameExpression, InstanceExpression = IsImplicit:`bool`;
MemberAccessExpression <: NameExpression
    = Context:Expression MemberName:`OrdinaryName` GenericArguments:Type* MemberNameSpan:`TextSpan`;
MissingName <: NameExpression;

// ---------- Capability Expressions
/// i.e. `move name`. A move takes ownership of something from a variable or expression.
MoveExpression <: Expression = Referent:Expression;
FreezeExpression <: Expression = Referent:Expression;

// ---------- Async Expressions
AsyncBlockExpression <: Expression = Block:BlockExpression;
AsyncStartExpression <: Expression = Scheduled:`bool` Expression;
AwaitExpression <: Expression = Expression;
