//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Azoth.Tools.Bootstrap.Compiler.Emit.C.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Azoth.Tools.Bootstrap.Compiler.Emit.C.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #include &quot;RuntimeLibrary.h&quot;
        ///#include &lt;stdio.h&gt;
        ///#include &lt;string.h&gt;
        ///
        ///// Reminder: `extern` function declarations are so the compiler knows what
        ///// object file to put the non-inline copies of inlined functions in.
        ///
        ///#define EXTERN_OPTIONAL_TYPE(type) \
        ///extern inline _opt__##type _opt__##type##__Some(type x); \
        ///const _opt__##type _opt__##type##__none = (_opt__##type) {0};
        ///
        ///// `bool` type
        ///extern inline _bool _bool__and(_bool x, _bool y);
        ///extern inline _bool _bool__or(_bool x, _bool y);
        ///
        ///EXTERN_OPTIONAL_TYPE(_boo [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string RuntimeLibraryCode {
            get {
                return ResourceManager.GetString("RuntimeLibraryCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #include &lt;stdint.h&gt;
        ///
        ///// Rather than including all of stdlib.h we only declare the things we need.
        ///void* malloc(size_t size);
        ///void free(void* ptr);
        ///
        ///// Cross platform way to mark a variable or parameter as unused to avoid warnings
        ///#define _UNUSED(x) (void)(x)
        ///
        ///#define OPTIONAL_TYPE(type) \
        ///typedef struct { _Bool _hasValue; type _value; } _opt__##type; \
        ///inline _opt__##type _opt__##type##__Some(type x) { return (_opt__##type) {1, x}; } \
        ///extern const _opt__##type _opt__##type##__none;
        ///
        ///// `bool` type
        ///typedef  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string RuntimeLibraryHeader {
            get {
                return ResourceManager.GetString("RuntimeLibraryHeader", resourceCulture);
            }
        }
    }
}
