<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var keywords = new List<string>()
    {
        "Abstract",
        "Aliasable",
        "And",
        "Any",
        "AnyType",
        "As",
        "AsExclamation",
        "AsQuestion",
        "Async",
        "Await",
        "Base",
        "Bool",
        "Break",
        "Byte",
        "Class",
        "Const",
        "Copy",
        "Do",
        "Drop",
        "Else",
        "False",
        "Foreach",
        "Freeze",
        "Function",
        "Get",
        "Go",
        "Id",
        "If",
        "Import",
        "In",
        "Independent",
        "Init",
        "Int",
        "Int16",
        "Int32",
        "Int64",
        "Int8",
        "Is",
        "Isolated",
        "Lent",
        "Let",
        "Loop",
        "Move",
        "Mutable",
        "Namespace",
        "Never",
        "Next",
        "NInt",
        "None",
        "Not",
        "NUInt",
        "Offset",
        "Or",
        "Out",
        "Protected",
        "Public",
        "Published",
        "Read",
        "Readable",
        "ReadOnly",
        "Return",
        "Safe",
        "Self",
        "SelfType",
        "Sendable",
        "Set",
        "Shareable",
        "Size",
        "Struct",
        "Temp",
        "Temporary",
        "Trait",
        "True",
        "Type",
        "TypeType",
        "UInt",
        "UInt16",
        "UInt32",
        "UInt64",
        "Unsafe",
        "Value",
        "Var",
        "Void",
        "While",
        //"Closed",
        //"Ensures",
        //"Explicit",
        //"External",
        //"Float32",
        //"Float64",
        //"Hides",
        //"Implicit",
        //"Invariant",
        //"Match",
        //"May",
        //"No",
        //"Operator",
        //"Overrides",
        //"Params",
        //"Requires",
        //"Sealed",
        //"Throw",
        //"Underscore",
        //"Uninitialized",
        //"Where",
    }.AsReadOnly();
#>
using System;
using System.Collections.Generic;
using Azoth.Tools.Bootstrap.Compiler.Core.Code;
using ExhaustiveMatching;

namespace Azoth.Tools.Bootstrap.Compiler.Tokens;

public static partial class TokenTypes
{
    private static readonly IReadOnlyList<Type> Keyword = new List<Type>()
    {
<# foreach(var keyword in keywords) {#>
        typeof(<#=keyword#>KeywordToken),
<#}#>
    }.AsReadOnly();
}

public static partial class TokenFactory
{
<# foreach(var keyword in keywords) {#>
    public static I<#=keyword#>KeywordToken <#=keyword#>Keyword(TextSpan span)
        => new <#=keyword#>KeywordToken(span);

<#}#>
}

[Closed(
<# for (int i = 0; i < keywords.Count; i++) {#>
    typeof(I<#=keywords[i]#>KeywordToken)<# if(i == keywords.Count-1) {#>)]<#} else {#>,<#}#>

<#}#>public partial interface IKeywordToken : IToken;

<# foreach(var keyword in keywords) {#>

public partial interface I<#=keyword#>KeywordToken : IKeywordToken;
internal partial class <#=keyword#>KeywordToken : Token, I<#=keyword#>KeywordToken
{
    public <#=keyword#>KeywordToken(TextSpan span)
        : base(span)
    {
    }
}
<#}#>
