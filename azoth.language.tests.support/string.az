published const struct string
{
    /// The index of the start of the string data in `bytes`.
    public let start: size;
    /// The number of bytes in the string when encoded in UTF8.
    published let byte_count: size;
    // TODO use iref var?
    var bytes: mut Raw_Hybrid_Bounded_List[void, byte];

    // Initializer is private because this is a temporary way of initializing strings for constants
    // TODO parameter type doesn't make sense for string literals
    /* unsafe */ init(self, bytes: const Raw_Hybrid_Bounded_List[void, byte], start: size, byte_count: size)
    {
        .bytes = bytes;
        .start = start;
        .byte_count = byte_count;
    }

    public fn raw_bytes(self) -> Raw_Hybrid_Bounded_List[void, byte]
        => .bytes;

    // Once it is supported, this should be a copy constructor
    // published safe init(other: string)
    // {
    //     self.byte_count = other.byte_count;
    //     self.bytes = mem_allocate(self.byte_count);
    //     unsafe(mem_copy(other.bytes, self.bytes, self.byte_count));
    // }

    /// Concatenate two strings producing a new one
    // published /* safe */ fn concat(self, other: string) -> owned string
    // {
    //     let new_byte_count = self.byte_count + other.byte_count;
    //     let new_bytes = mem_allocate(new_byte_count);
    //     unsafe
    //     {
    //         mem_copy(self.bytes, new_bytes, self.byte_count);
    //         mem_copy(other.bytes, new_bytes + self.byte_count, other.byte_count);
    //         return string(new_byte_count, new_bytes);
    //     }
    // }

    // published safe fn equals(self, other: string) -> bool
    // {
    //     if self.byte_count =/= other.byte_count => return false;

    //     foreach i: size in 0..<other.byte_count
    //     {
    //         if mem_get_byte(self.bytes+i) =/= mem_get_byte(other.bytes+i)
    //         {
    //             return false;
    //         }
    //     }

    //     return true;
    // }

    // Pad this string out to a given length using the supplied string
    // Currently only works correctly if the string is comprised only of ASCII
    // characters and `with` is only a single character
    // published safe fn pad_left(self, total_length: size, pad_with: string) -> string$owned
    // {
    //     if self.bytes >= total_length => return string(self);

    //     let new_bytes = mem_allocate(total_length);
    //     let padding = total_length - self.byte_count;
    //     unsafe
    //     {
    //         mem_copy(self.bytes, new_bytes + padding, self.byte_count);
    //         // foreach i: size in 0..<padding
    //         // {
    //         //     mem_copy(pad_with.bytes, new_bytes+i, 1);
    //         // }
    //         return string(total_length, new_bytes);
    //     }
    // }

    // published implicit operator "_"(value: const Raw_Array[byte]) -> string
    // {
    //     return string(value);
    // }
}
