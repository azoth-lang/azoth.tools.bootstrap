published class List[T ind]
{
    var items: mut Raw_Hybrid_Bounded_List[void, T];

    published new(mut self)
    {
        .items = new Raw_Hybrid_Bounded_List[void, T](2);
    }

    published new(mut self, var capacity: size)
    {
        if capacity < 2 => capacity = 2;
        .items = new Raw_Hybrid_Bounded_List[void, T](capacity);
    }

    published fn get_capacity(self) -> size
    {
        return .items.get_capacity();
    }

    published fn get_count(self) -> size
    {
        return .items.get_count();
    }

    published fn at(self, index: size) -> T
    {
        let count = .items.get_count();
        if index < 0 or index >= count => ABORT("index out of bounds");
        return .items.at(index);
    }

    // TODO replace with `at` returning `ref var`
    published fn set_at(mut self, index: size, value: T)
    {
        let count = .items.get_count();
        if index < 0 or index >= count => ABORT("index out of bounds");
        .items.set_at(index, value);
    }

    published fn add(mut self, value: T)
    {
        let count = .items.get_count();
        .ensure_capacity(count + 1);
        .items.add(value);
    }

    fn ensure_capacity(mut self, new_count: size)
    {
        var capacity = .items.get_capacity();
        if new_count <= capacity => return;
        while capacity < new_count { capacity *= 2; }
        let count = .items.get_count();
        let new_items: mut = new Raw_Hybrid_Bounded_List[void, T](capacity);
        foreach i in 0..<count { new_items.add(.items.at(i as! size)); }
        .items = new_items;
    }

    published fn clear(mut self)
    {
        .items.shrink(0);
    }

    published fn iterate(temp const self) -> mut List_Iterator[T]
        => new List_Iterator[T](self);
}
