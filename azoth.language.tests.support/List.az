published class List[T ind]
{
    var items: mut Raw_Hybrid_Bounded_List[void, T];

    published init(mut self)
    {
        .items = Raw_Hybrid_Bounded_List[void, T](2);
    }

    published init(mut self, var capacity: size)
    {
        if capacity < 2 => capacity = 2;
        .items = Raw_Hybrid_Bounded_List[void, T](capacity);
    }

    published get capacity(self) -> size
        => .items.capacity;

    published get count(self) -> size
        => .items.count;

    published fn get(self, index: size) -> aliasable T
    {
        let count = .items.count;
        if index >= count => ABORT("index out of bounds");
        return .items.get(index);
    }

    published fn set(mut self, index: size, value: T)
    {
        let count = .items.count;
        if index >= count => ABORT("index out of bounds");
        .items.set(index, value);
    }

    published fn add(mut self, value: T)
    {
        let count = .items.count;
        .ensure_capacity(count + 1);
        .items.add(value);
    }

    // TODO for owned structs, this needs items to be `iso` to avoid references to the old data
    fn ensure_capacity(mut self, new_count: size)
    {
        var capacity = .items.capacity;
        if new_count <= capacity => return;
        while capacity < new_count { capacity *= 2; }
        let count = .items.count;
        let new_items: mut = Raw_Hybrid_Bounded_List[void, T](capacity);
        foreach i in 0..<count { new_items.add(.items.take(i as! size)); }
        .items = new_items;
    }

    published fn clear(mut self)
        => .items.shrink(0);

    published fn iterate(temp const self) -> mut List_Iterator[T]
        => List_Iterator[T](self);
}
